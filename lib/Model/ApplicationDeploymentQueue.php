<?php
/**
 * ApplicationDeploymentQueue
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Coolify
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApplicationDeploymentQueue Class Doc Comment
 *
 * @category Class
 * @description Project model
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApplicationDeploymentQueue implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApplicationDeploymentQueue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'application_id' => 'string',
        'deployment_uuid' => 'string',
        'pull_request_id' => 'int',
        'force_rebuild' => 'bool',
        'commit' => 'string',
        'status' => 'string',
        'is_webhook' => 'bool',
        'is_api' => 'bool',
        'created_at' => 'string',
        'updated_at' => 'string',
        'logs' => 'string',
        'current_process_id' => 'string',
        'restart_only' => 'bool',
        'git_type' => 'string',
        'server_id' => 'int',
        'application_name' => 'string',
        'server_name' => 'string',
        'deployment_url' => 'string',
        'destination_id' => 'string',
        'only_this_server' => 'bool',
        'rollback' => 'bool',
        'commit_message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'application_id' => null,
        'deployment_uuid' => null,
        'pull_request_id' => null,
        'force_rebuild' => null,
        'commit' => null,
        'status' => null,
        'is_webhook' => null,
        'is_api' => null,
        'created_at' => null,
        'updated_at' => null,
        'logs' => null,
        'current_process_id' => null,
        'restart_only' => null,
        'git_type' => null,
        'server_id' => null,
        'application_name' => null,
        'server_name' => null,
        'deployment_url' => null,
        'destination_id' => null,
        'only_this_server' => null,
        'rollback' => null,
        'commit_message' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'application_id' => false,
        'deployment_uuid' => false,
        'pull_request_id' => false,
        'force_rebuild' => false,
        'commit' => false,
        'status' => false,
        'is_webhook' => false,
        'is_api' => false,
        'created_at' => false,
        'updated_at' => false,
        'logs' => false,
        'current_process_id' => false,
        'restart_only' => false,
        'git_type' => false,
        'server_id' => false,
        'application_name' => false,
        'server_name' => false,
        'deployment_url' => false,
        'destination_id' => false,
        'only_this_server' => false,
        'rollback' => false,
        'commit_message' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'application_id' => 'application_id',
        'deployment_uuid' => 'deployment_uuid',
        'pull_request_id' => 'pull_request_id',
        'force_rebuild' => 'force_rebuild',
        'commit' => 'commit',
        'status' => 'status',
        'is_webhook' => 'is_webhook',
        'is_api' => 'is_api',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'logs' => 'logs',
        'current_process_id' => 'current_process_id',
        'restart_only' => 'restart_only',
        'git_type' => 'git_type',
        'server_id' => 'server_id',
        'application_name' => 'application_name',
        'server_name' => 'server_name',
        'deployment_url' => 'deployment_url',
        'destination_id' => 'destination_id',
        'only_this_server' => 'only_this_server',
        'rollback' => 'rollback',
        'commit_message' => 'commit_message'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'application_id' => 'setApplicationId',
        'deployment_uuid' => 'setDeploymentUuid',
        'pull_request_id' => 'setPullRequestId',
        'force_rebuild' => 'setForceRebuild',
        'commit' => 'setCommit',
        'status' => 'setStatus',
        'is_webhook' => 'setIsWebhook',
        'is_api' => 'setIsApi',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'logs' => 'setLogs',
        'current_process_id' => 'setCurrentProcessId',
        'restart_only' => 'setRestartOnly',
        'git_type' => 'setGitType',
        'server_id' => 'setServerId',
        'application_name' => 'setApplicationName',
        'server_name' => 'setServerName',
        'deployment_url' => 'setDeploymentUrl',
        'destination_id' => 'setDestinationId',
        'only_this_server' => 'setOnlyThisServer',
        'rollback' => 'setRollback',
        'commit_message' => 'setCommitMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'application_id' => 'getApplicationId',
        'deployment_uuid' => 'getDeploymentUuid',
        'pull_request_id' => 'getPullRequestId',
        'force_rebuild' => 'getForceRebuild',
        'commit' => 'getCommit',
        'status' => 'getStatus',
        'is_webhook' => 'getIsWebhook',
        'is_api' => 'getIsApi',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'logs' => 'getLogs',
        'current_process_id' => 'getCurrentProcessId',
        'restart_only' => 'getRestartOnly',
        'git_type' => 'getGitType',
        'server_id' => 'getServerId',
        'application_name' => 'getApplicationName',
        'server_name' => 'getServerName',
        'deployment_url' => 'getDeploymentUrl',
        'destination_id' => 'getDestinationId',
        'only_this_server' => 'getOnlyThisServer',
        'rollback' => 'getRollback',
        'commit_message' => 'getCommitMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('application_id', $data ?? [], null);
        $this->setIfExists('deployment_uuid', $data ?? [], null);
        $this->setIfExists('pull_request_id', $data ?? [], null);
        $this->setIfExists('force_rebuild', $data ?? [], null);
        $this->setIfExists('commit', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('is_webhook', $data ?? [], null);
        $this->setIfExists('is_api', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('logs', $data ?? [], null);
        $this->setIfExists('current_process_id', $data ?? [], null);
        $this->setIfExists('restart_only', $data ?? [], null);
        $this->setIfExists('git_type', $data ?? [], null);
        $this->setIfExists('server_id', $data ?? [], null);
        $this->setIfExists('application_name', $data ?? [], null);
        $this->setIfExists('server_name', $data ?? [], null);
        $this->setIfExists('deployment_url', $data ?? [], null);
        $this->setIfExists('destination_id', $data ?? [], null);
        $this->setIfExists('only_this_server', $data ?? [], null);
        $this->setIfExists('rollback', $data ?? [], null);
        $this->setIfExists('commit_message', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets application_id
     *
     * @return string|null
     */
    public function getApplicationId()
    {
        return $this->container['application_id'];
    }

    /**
     * Sets application_id
     *
     * @param string|null $application_id application_id
     *
     * @return self
     */
    public function setApplicationId($application_id)
    {
        if (is_null($application_id)) {
            throw new \InvalidArgumentException('non-nullable application_id cannot be null');
        }
        $this->container['application_id'] = $application_id;

        return $this;
    }

    /**
     * Gets deployment_uuid
     *
     * @return string|null
     */
    public function getDeploymentUuid()
    {
        return $this->container['deployment_uuid'];
    }

    /**
     * Sets deployment_uuid
     *
     * @param string|null $deployment_uuid deployment_uuid
     *
     * @return self
     */
    public function setDeploymentUuid($deployment_uuid)
    {
        if (is_null($deployment_uuid)) {
            throw new \InvalidArgumentException('non-nullable deployment_uuid cannot be null');
        }
        $this->container['deployment_uuid'] = $deployment_uuid;

        return $this;
    }

    /**
     * Gets pull_request_id
     *
     * @return int|null
     */
    public function getPullRequestId()
    {
        return $this->container['pull_request_id'];
    }

    /**
     * Sets pull_request_id
     *
     * @param int|null $pull_request_id pull_request_id
     *
     * @return self
     */
    public function setPullRequestId($pull_request_id)
    {
        if (is_null($pull_request_id)) {
            throw new \InvalidArgumentException('non-nullable pull_request_id cannot be null');
        }
        $this->container['pull_request_id'] = $pull_request_id;

        return $this;
    }

    /**
     * Gets force_rebuild
     *
     * @return bool|null
     */
    public function getForceRebuild()
    {
        return $this->container['force_rebuild'];
    }

    /**
     * Sets force_rebuild
     *
     * @param bool|null $force_rebuild force_rebuild
     *
     * @return self
     */
    public function setForceRebuild($force_rebuild)
    {
        if (is_null($force_rebuild)) {
            throw new \InvalidArgumentException('non-nullable force_rebuild cannot be null');
        }
        $this->container['force_rebuild'] = $force_rebuild;

        return $this;
    }

    /**
     * Gets commit
     *
     * @return string|null
     */
    public function getCommit()
    {
        return $this->container['commit'];
    }

    /**
     * Sets commit
     *
     * @param string|null $commit commit
     *
     * @return self
     */
    public function setCommit($commit)
    {
        if (is_null($commit)) {
            throw new \InvalidArgumentException('non-nullable commit cannot be null');
        }
        $this->container['commit'] = $commit;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets is_webhook
     *
     * @return bool|null
     */
    public function getIsWebhook()
    {
        return $this->container['is_webhook'];
    }

    /**
     * Sets is_webhook
     *
     * @param bool|null $is_webhook is_webhook
     *
     * @return self
     */
    public function setIsWebhook($is_webhook)
    {
        if (is_null($is_webhook)) {
            throw new \InvalidArgumentException('non-nullable is_webhook cannot be null');
        }
        $this->container['is_webhook'] = $is_webhook;

        return $this;
    }

    /**
     * Gets is_api
     *
     * @return bool|null
     */
    public function getIsApi()
    {
        return $this->container['is_api'];
    }

    /**
     * Sets is_api
     *
     * @param bool|null $is_api is_api
     *
     * @return self
     */
    public function setIsApi($is_api)
    {
        if (is_null($is_api)) {
            throw new \InvalidArgumentException('non-nullable is_api cannot be null');
        }
        $this->container['is_api'] = $is_api;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets logs
     *
     * @return string|null
     */
    public function getLogs()
    {
        return $this->container['logs'];
    }

    /**
     * Sets logs
     *
     * @param string|null $logs logs
     *
     * @return self
     */
    public function setLogs($logs)
    {
        if (is_null($logs)) {
            throw new \InvalidArgumentException('non-nullable logs cannot be null');
        }
        $this->container['logs'] = $logs;

        return $this;
    }

    /**
     * Gets current_process_id
     *
     * @return string|null
     */
    public function getCurrentProcessId()
    {
        return $this->container['current_process_id'];
    }

    /**
     * Sets current_process_id
     *
     * @param string|null $current_process_id current_process_id
     *
     * @return self
     */
    public function setCurrentProcessId($current_process_id)
    {
        if (is_null($current_process_id)) {
            throw new \InvalidArgumentException('non-nullable current_process_id cannot be null');
        }
        $this->container['current_process_id'] = $current_process_id;

        return $this;
    }

    /**
     * Gets restart_only
     *
     * @return bool|null
     */
    public function getRestartOnly()
    {
        return $this->container['restart_only'];
    }

    /**
     * Sets restart_only
     *
     * @param bool|null $restart_only restart_only
     *
     * @return self
     */
    public function setRestartOnly($restart_only)
    {
        if (is_null($restart_only)) {
            throw new \InvalidArgumentException('non-nullable restart_only cannot be null');
        }
        $this->container['restart_only'] = $restart_only;

        return $this;
    }

    /**
     * Gets git_type
     *
     * @return string|null
     */
    public function getGitType()
    {
        return $this->container['git_type'];
    }

    /**
     * Sets git_type
     *
     * @param string|null $git_type git_type
     *
     * @return self
     */
    public function setGitType($git_type)
    {
        if (is_null($git_type)) {
            throw new \InvalidArgumentException('non-nullable git_type cannot be null');
        }
        $this->container['git_type'] = $git_type;

        return $this;
    }

    /**
     * Gets server_id
     *
     * @return int|null
     */
    public function getServerId()
    {
        return $this->container['server_id'];
    }

    /**
     * Sets server_id
     *
     * @param int|null $server_id server_id
     *
     * @return self
     */
    public function setServerId($server_id)
    {
        if (is_null($server_id)) {
            throw new \InvalidArgumentException('non-nullable server_id cannot be null');
        }
        $this->container['server_id'] = $server_id;

        return $this;
    }

    /**
     * Gets application_name
     *
     * @return string|null
     */
    public function getApplicationName()
    {
        return $this->container['application_name'];
    }

    /**
     * Sets application_name
     *
     * @param string|null $application_name application_name
     *
     * @return self
     */
    public function setApplicationName($application_name)
    {
        if (is_null($application_name)) {
            throw new \InvalidArgumentException('non-nullable application_name cannot be null');
        }
        $this->container['application_name'] = $application_name;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string|null
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string|null $server_name server_name
     *
     * @return self
     */
    public function setServerName($server_name)
    {
        if (is_null($server_name)) {
            throw new \InvalidArgumentException('non-nullable server_name cannot be null');
        }
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets deployment_url
     *
     * @return string|null
     */
    public function getDeploymentUrl()
    {
        return $this->container['deployment_url'];
    }

    /**
     * Sets deployment_url
     *
     * @param string|null $deployment_url deployment_url
     *
     * @return self
     */
    public function setDeploymentUrl($deployment_url)
    {
        if (is_null($deployment_url)) {
            throw new \InvalidArgumentException('non-nullable deployment_url cannot be null');
        }
        $this->container['deployment_url'] = $deployment_url;

        return $this;
    }

    /**
     * Gets destination_id
     *
     * @return string|null
     */
    public function getDestinationId()
    {
        return $this->container['destination_id'];
    }

    /**
     * Sets destination_id
     *
     * @param string|null $destination_id destination_id
     *
     * @return self
     */
    public function setDestinationId($destination_id)
    {
        if (is_null($destination_id)) {
            throw new \InvalidArgumentException('non-nullable destination_id cannot be null');
        }
        $this->container['destination_id'] = $destination_id;

        return $this;
    }

    /**
     * Gets only_this_server
     *
     * @return bool|null
     */
    public function getOnlyThisServer()
    {
        return $this->container['only_this_server'];
    }

    /**
     * Sets only_this_server
     *
     * @param bool|null $only_this_server only_this_server
     *
     * @return self
     */
    public function setOnlyThisServer($only_this_server)
    {
        if (is_null($only_this_server)) {
            throw new \InvalidArgumentException('non-nullable only_this_server cannot be null');
        }
        $this->container['only_this_server'] = $only_this_server;

        return $this;
    }

    /**
     * Gets rollback
     *
     * @return bool|null
     */
    public function getRollback()
    {
        return $this->container['rollback'];
    }

    /**
     * Sets rollback
     *
     * @param bool|null $rollback rollback
     *
     * @return self
     */
    public function setRollback($rollback)
    {
        if (is_null($rollback)) {
            throw new \InvalidArgumentException('non-nullable rollback cannot be null');
        }
        $this->container['rollback'] = $rollback;

        return $this;
    }

    /**
     * Gets commit_message
     *
     * @return string|null
     */
    public function getCommitMessage()
    {
        return $this->container['commit_message'];
    }

    /**
     * Sets commit_message
     *
     * @param string|null $commit_message commit_message
     *
     * @return self
     */
    public function setCommitMessage($commit_message)
    {
        if (is_null($commit_message)) {
            throw new \InvalidArgumentException('non-nullable commit_message cannot be null');
        }
        $this->container['commit_message'] = $commit_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


