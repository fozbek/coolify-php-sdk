<?php
/**
 * Service
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Coolify
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Service Class Doc Comment
 *
 * @category Class
 * @description Service model
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Service implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Service';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'uuid' => 'string',
        'name' => 'string',
        'environment_id' => 'int',
        'server_id' => 'int',
        'description' => 'string',
        'docker_compose_raw' => 'string',
        'docker_compose' => 'string',
        'destination_type' => 'string',
        'destination_id' => 'int',
        'connect_to_docker_network' => 'bool',
        'is_container_label_escape_enabled' => 'bool',
        'is_container_label_readonly_enabled' => 'bool',
        'config_hash' => 'string',
        'service_type' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'deleted_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'uuid' => null,
        'name' => null,
        'environment_id' => null,
        'server_id' => null,
        'description' => null,
        'docker_compose_raw' => null,
        'docker_compose' => null,
        'destination_type' => null,
        'destination_id' => null,
        'connect_to_docker_network' => null,
        'is_container_label_escape_enabled' => null,
        'is_container_label_readonly_enabled' => null,
        'config_hash' => null,
        'service_type' => null,
        'created_at' => null,
        'updated_at' => null,
        'deleted_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'uuid' => false,
        'name' => false,
        'environment_id' => false,
        'server_id' => false,
        'description' => false,
        'docker_compose_raw' => false,
        'docker_compose' => false,
        'destination_type' => false,
        'destination_id' => false,
        'connect_to_docker_network' => false,
        'is_container_label_escape_enabled' => false,
        'is_container_label_readonly_enabled' => false,
        'config_hash' => false,
        'service_type' => false,
        'created_at' => false,
        'updated_at' => false,
        'deleted_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'uuid' => 'uuid',
        'name' => 'name',
        'environment_id' => 'environment_id',
        'server_id' => 'server_id',
        'description' => 'description',
        'docker_compose_raw' => 'docker_compose_raw',
        'docker_compose' => 'docker_compose',
        'destination_type' => 'destination_type',
        'destination_id' => 'destination_id',
        'connect_to_docker_network' => 'connect_to_docker_network',
        'is_container_label_escape_enabled' => 'is_container_label_escape_enabled',
        'is_container_label_readonly_enabled' => 'is_container_label_readonly_enabled',
        'config_hash' => 'config_hash',
        'service_type' => 'service_type',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'deleted_at' => 'deleted_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'uuid' => 'setUuid',
        'name' => 'setName',
        'environment_id' => 'setEnvironmentId',
        'server_id' => 'setServerId',
        'description' => 'setDescription',
        'docker_compose_raw' => 'setDockerComposeRaw',
        'docker_compose' => 'setDockerCompose',
        'destination_type' => 'setDestinationType',
        'destination_id' => 'setDestinationId',
        'connect_to_docker_network' => 'setConnectToDockerNetwork',
        'is_container_label_escape_enabled' => 'setIsContainerLabelEscapeEnabled',
        'is_container_label_readonly_enabled' => 'setIsContainerLabelReadonlyEnabled',
        'config_hash' => 'setConfigHash',
        'service_type' => 'setServiceType',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'deleted_at' => 'setDeletedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'uuid' => 'getUuid',
        'name' => 'getName',
        'environment_id' => 'getEnvironmentId',
        'server_id' => 'getServerId',
        'description' => 'getDescription',
        'docker_compose_raw' => 'getDockerComposeRaw',
        'docker_compose' => 'getDockerCompose',
        'destination_type' => 'getDestinationType',
        'destination_id' => 'getDestinationId',
        'connect_to_docker_network' => 'getConnectToDockerNetwork',
        'is_container_label_escape_enabled' => 'getIsContainerLabelEscapeEnabled',
        'is_container_label_readonly_enabled' => 'getIsContainerLabelReadonlyEnabled',
        'config_hash' => 'getConfigHash',
        'service_type' => 'getServiceType',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'deleted_at' => 'getDeletedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('environment_id', $data ?? [], null);
        $this->setIfExists('server_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('docker_compose_raw', $data ?? [], null);
        $this->setIfExists('docker_compose', $data ?? [], null);
        $this->setIfExists('destination_type', $data ?? [], null);
        $this->setIfExists('destination_id', $data ?? [], null);
        $this->setIfExists('connect_to_docker_network', $data ?? [], null);
        $this->setIfExists('is_container_label_escape_enabled', $data ?? [], null);
        $this->setIfExists('is_container_label_readonly_enabled', $data ?? [], null);
        $this->setIfExists('config_hash', $data ?? [], null);
        $this->setIfExists('service_type', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('deleted_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The unique identifier of the service. Only used for database identification.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid The unique identifier of the service.
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the service.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets environment_id
     *
     * @return int|null
     */
    public function getEnvironmentId()
    {
        return $this->container['environment_id'];
    }

    /**
     * Sets environment_id
     *
     * @param int|null $environment_id The unique identifier of the environment where the service is attached to.
     *
     * @return self
     */
    public function setEnvironmentId($environment_id)
    {
        if (is_null($environment_id)) {
            throw new \InvalidArgumentException('non-nullable environment_id cannot be null');
        }
        $this->container['environment_id'] = $environment_id;

        return $this;
    }

    /**
     * Gets server_id
     *
     * @return int|null
     */
    public function getServerId()
    {
        return $this->container['server_id'];
    }

    /**
     * Sets server_id
     *
     * @param int|null $server_id The unique identifier of the server where the service is running.
     *
     * @return self
     */
    public function setServerId($server_id)
    {
        if (is_null($server_id)) {
            throw new \InvalidArgumentException('non-nullable server_id cannot be null');
        }
        $this->container['server_id'] = $server_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the service.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets docker_compose_raw
     *
     * @return string|null
     */
    public function getDockerComposeRaw()
    {
        return $this->container['docker_compose_raw'];
    }

    /**
     * Sets docker_compose_raw
     *
     * @param string|null $docker_compose_raw The raw docker-compose.yml file of the service.
     *
     * @return self
     */
    public function setDockerComposeRaw($docker_compose_raw)
    {
        if (is_null($docker_compose_raw)) {
            throw new \InvalidArgumentException('non-nullable docker_compose_raw cannot be null');
        }
        $this->container['docker_compose_raw'] = $docker_compose_raw;

        return $this;
    }

    /**
     * Gets docker_compose
     *
     * @return string|null
     */
    public function getDockerCompose()
    {
        return $this->container['docker_compose'];
    }

    /**
     * Sets docker_compose
     *
     * @param string|null $docker_compose The docker-compose.yml file that is parsed and modified by Coolify.
     *
     * @return self
     */
    public function setDockerCompose($docker_compose)
    {
        if (is_null($docker_compose)) {
            throw new \InvalidArgumentException('non-nullable docker_compose cannot be null');
        }
        $this->container['docker_compose'] = $docker_compose;

        return $this;
    }

    /**
     * Gets destination_type
     *
     * @return string|null
     */
    public function getDestinationType()
    {
        return $this->container['destination_type'];
    }

    /**
     * Sets destination_type
     *
     * @param string|null $destination_type Destination type.
     *
     * @return self
     */
    public function setDestinationType($destination_type)
    {
        if (is_null($destination_type)) {
            throw new \InvalidArgumentException('non-nullable destination_type cannot be null');
        }
        $this->container['destination_type'] = $destination_type;

        return $this;
    }

    /**
     * Gets destination_id
     *
     * @return int|null
     */
    public function getDestinationId()
    {
        return $this->container['destination_id'];
    }

    /**
     * Sets destination_id
     *
     * @param int|null $destination_id The unique identifier of the destination where the service is running.
     *
     * @return self
     */
    public function setDestinationId($destination_id)
    {
        if (is_null($destination_id)) {
            throw new \InvalidArgumentException('non-nullable destination_id cannot be null');
        }
        $this->container['destination_id'] = $destination_id;

        return $this;
    }

    /**
     * Gets connect_to_docker_network
     *
     * @return bool|null
     */
    public function getConnectToDockerNetwork()
    {
        return $this->container['connect_to_docker_network'];
    }

    /**
     * Sets connect_to_docker_network
     *
     * @param bool|null $connect_to_docker_network The flag to connect the service to the predefined Docker network.
     *
     * @return self
     */
    public function setConnectToDockerNetwork($connect_to_docker_network)
    {
        if (is_null($connect_to_docker_network)) {
            throw new \InvalidArgumentException('non-nullable connect_to_docker_network cannot be null');
        }
        $this->container['connect_to_docker_network'] = $connect_to_docker_network;

        return $this;
    }

    /**
     * Gets is_container_label_escape_enabled
     *
     * @return bool|null
     */
    public function getIsContainerLabelEscapeEnabled()
    {
        return $this->container['is_container_label_escape_enabled'];
    }

    /**
     * Sets is_container_label_escape_enabled
     *
     * @param bool|null $is_container_label_escape_enabled The flag to enable the container label escape.
     *
     * @return self
     */
    public function setIsContainerLabelEscapeEnabled($is_container_label_escape_enabled)
    {
        if (is_null($is_container_label_escape_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_container_label_escape_enabled cannot be null');
        }
        $this->container['is_container_label_escape_enabled'] = $is_container_label_escape_enabled;

        return $this;
    }

    /**
     * Gets is_container_label_readonly_enabled
     *
     * @return bool|null
     */
    public function getIsContainerLabelReadonlyEnabled()
    {
        return $this->container['is_container_label_readonly_enabled'];
    }

    /**
     * Sets is_container_label_readonly_enabled
     *
     * @param bool|null $is_container_label_readonly_enabled The flag to enable the container label readonly.
     *
     * @return self
     */
    public function setIsContainerLabelReadonlyEnabled($is_container_label_readonly_enabled)
    {
        if (is_null($is_container_label_readonly_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_container_label_readonly_enabled cannot be null');
        }
        $this->container['is_container_label_readonly_enabled'] = $is_container_label_readonly_enabled;

        return $this;
    }

    /**
     * Gets config_hash
     *
     * @return string|null
     */
    public function getConfigHash()
    {
        return $this->container['config_hash'];
    }

    /**
     * Sets config_hash
     *
     * @param string|null $config_hash The hash of the service configuration.
     *
     * @return self
     */
    public function setConfigHash($config_hash)
    {
        if (is_null($config_hash)) {
            throw new \InvalidArgumentException('non-nullable config_hash cannot be null');
        }
        $this->container['config_hash'] = $config_hash;

        return $this;
    }

    /**
     * Gets service_type
     *
     * @return string|null
     */
    public function getServiceType()
    {
        return $this->container['service_type'];
    }

    /**
     * Sets service_type
     *
     * @param string|null $service_type The type of the service.
     *
     * @return self
     */
    public function setServiceType($service_type)
    {
        if (is_null($service_type)) {
            throw new \InvalidArgumentException('non-nullable service_type cannot be null');
        }
        $this->container['service_type'] = $service_type;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The date and time when the service was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The date and time when the service was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return string|null
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param string|null $deleted_at The date and time when the service was deleted.
     *
     * @return self
     */
    public function setDeletedAt($deleted_at)
    {
        if (is_null($deleted_at)) {
            throw new \InvalidArgumentException('non-nullable deleted_at cannot be null');
        }
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


