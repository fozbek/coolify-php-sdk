<?php
/**
 * CreateDockerfileApplicationRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  CoolifyPHP\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Coolify
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CoolifyPHP\Client\Model;

use \ArrayAccess;
use \CoolifyPHP\Client\ObjectSerializer;

/**
 * CreateDockerfileApplicationRequest Class Doc Comment
 *
 * @category Class
 * @package  CoolifyPHP\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateDockerfileApplicationRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'create_dockerfile_application_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'project_uuid' => 'string',
        'server_uuid' => 'string',
        'environment_name' => 'string',
        'environment_uuid' => 'string',
        'dockerfile' => 'string',
        'build_pack' => 'string',
        'ports_exposes' => 'string',
        'destination_uuid' => 'string',
        'name' => 'string',
        'description' => 'string',
        'domains' => 'string',
        'docker_registry_image_name' => 'string',
        'docker_registry_image_tag' => 'string',
        'ports_mappings' => 'string',
        'base_directory' => 'string',
        'health_check_enabled' => 'bool',
        'health_check_path' => 'string',
        'health_check_port' => 'string',
        'health_check_host' => 'string',
        'health_check_method' => 'string',
        'health_check_return_code' => 'int',
        'health_check_scheme' => 'string',
        'health_check_response_text' => 'string',
        'health_check_interval' => 'int',
        'health_check_timeout' => 'int',
        'health_check_retries' => 'int',
        'health_check_start_period' => 'int',
        'limits_memory' => 'string',
        'limits_memory_swap' => 'string',
        'limits_memory_swappiness' => 'int',
        'limits_memory_reservation' => 'string',
        'limits_cpus' => 'string',
        'limits_cpuset' => 'string',
        'limits_cpu_shares' => 'int',
        'custom_labels' => 'string',
        'custom_docker_run_options' => 'string',
        'post_deployment_command' => 'string',
        'post_deployment_command_container' => 'string',
        'pre_deployment_command' => 'string',
        'pre_deployment_command_container' => 'string',
        'manual_webhook_secret_github' => 'string',
        'manual_webhook_secret_gitlab' => 'string',
        'manual_webhook_secret_bitbucket' => 'string',
        'manual_webhook_secret_gitea' => 'string',
        'redirect' => 'string',
        'instant_deploy' => 'bool',
        'use_build_server' => 'bool',
        'is_http_basic_auth_enabled' => 'bool',
        'http_basic_auth_username' => 'string',
        'http_basic_auth_password' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'project_uuid' => null,
        'server_uuid' => null,
        'environment_name' => null,
        'environment_uuid' => null,
        'dockerfile' => null,
        'build_pack' => null,
        'ports_exposes' => null,
        'destination_uuid' => null,
        'name' => null,
        'description' => null,
        'domains' => null,
        'docker_registry_image_name' => null,
        'docker_registry_image_tag' => null,
        'ports_mappings' => null,
        'base_directory' => null,
        'health_check_enabled' => null,
        'health_check_path' => null,
        'health_check_port' => null,
        'health_check_host' => null,
        'health_check_method' => null,
        'health_check_return_code' => null,
        'health_check_scheme' => null,
        'health_check_response_text' => null,
        'health_check_interval' => null,
        'health_check_timeout' => null,
        'health_check_retries' => null,
        'health_check_start_period' => null,
        'limits_memory' => null,
        'limits_memory_swap' => null,
        'limits_memory_swappiness' => null,
        'limits_memory_reservation' => null,
        'limits_cpus' => null,
        'limits_cpuset' => null,
        'limits_cpu_shares' => null,
        'custom_labels' => null,
        'custom_docker_run_options' => null,
        'post_deployment_command' => null,
        'post_deployment_command_container' => null,
        'pre_deployment_command' => null,
        'pre_deployment_command_container' => null,
        'manual_webhook_secret_github' => null,
        'manual_webhook_secret_gitlab' => null,
        'manual_webhook_secret_bitbucket' => null,
        'manual_webhook_secret_gitea' => null,
        'redirect' => null,
        'instant_deploy' => null,
        'use_build_server' => null,
        'is_http_basic_auth_enabled' => null,
        'http_basic_auth_username' => null,
        'http_basic_auth_password' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'project_uuid' => false,
        'server_uuid' => false,
        'environment_name' => false,
        'environment_uuid' => false,
        'dockerfile' => false,
        'build_pack' => false,
        'ports_exposes' => false,
        'destination_uuid' => false,
        'name' => false,
        'description' => false,
        'domains' => false,
        'docker_registry_image_name' => false,
        'docker_registry_image_tag' => false,
        'ports_mappings' => false,
        'base_directory' => false,
        'health_check_enabled' => false,
        'health_check_path' => false,
        'health_check_port' => false,
        'health_check_host' => false,
        'health_check_method' => false,
        'health_check_return_code' => false,
        'health_check_scheme' => false,
        'health_check_response_text' => false,
        'health_check_interval' => false,
        'health_check_timeout' => false,
        'health_check_retries' => false,
        'health_check_start_period' => false,
        'limits_memory' => false,
        'limits_memory_swap' => false,
        'limits_memory_swappiness' => false,
        'limits_memory_reservation' => false,
        'limits_cpus' => false,
        'limits_cpuset' => false,
        'limits_cpu_shares' => false,
        'custom_labels' => false,
        'custom_docker_run_options' => false,
        'post_deployment_command' => false,
        'post_deployment_command_container' => false,
        'pre_deployment_command' => false,
        'pre_deployment_command_container' => false,
        'manual_webhook_secret_github' => false,
        'manual_webhook_secret_gitlab' => false,
        'manual_webhook_secret_bitbucket' => false,
        'manual_webhook_secret_gitea' => false,
        'redirect' => false,
        'instant_deploy' => false,
        'use_build_server' => false,
        'is_http_basic_auth_enabled' => false,
        'http_basic_auth_username' => false,
        'http_basic_auth_password' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'project_uuid' => 'project_uuid',
        'server_uuid' => 'server_uuid',
        'environment_name' => 'environment_name',
        'environment_uuid' => 'environment_uuid',
        'dockerfile' => 'dockerfile',
        'build_pack' => 'build_pack',
        'ports_exposes' => 'ports_exposes',
        'destination_uuid' => 'destination_uuid',
        'name' => 'name',
        'description' => 'description',
        'domains' => 'domains',
        'docker_registry_image_name' => 'docker_registry_image_name',
        'docker_registry_image_tag' => 'docker_registry_image_tag',
        'ports_mappings' => 'ports_mappings',
        'base_directory' => 'base_directory',
        'health_check_enabled' => 'health_check_enabled',
        'health_check_path' => 'health_check_path',
        'health_check_port' => 'health_check_port',
        'health_check_host' => 'health_check_host',
        'health_check_method' => 'health_check_method',
        'health_check_return_code' => 'health_check_return_code',
        'health_check_scheme' => 'health_check_scheme',
        'health_check_response_text' => 'health_check_response_text',
        'health_check_interval' => 'health_check_interval',
        'health_check_timeout' => 'health_check_timeout',
        'health_check_retries' => 'health_check_retries',
        'health_check_start_period' => 'health_check_start_period',
        'limits_memory' => 'limits_memory',
        'limits_memory_swap' => 'limits_memory_swap',
        'limits_memory_swappiness' => 'limits_memory_swappiness',
        'limits_memory_reservation' => 'limits_memory_reservation',
        'limits_cpus' => 'limits_cpus',
        'limits_cpuset' => 'limits_cpuset',
        'limits_cpu_shares' => 'limits_cpu_shares',
        'custom_labels' => 'custom_labels',
        'custom_docker_run_options' => 'custom_docker_run_options',
        'post_deployment_command' => 'post_deployment_command',
        'post_deployment_command_container' => 'post_deployment_command_container',
        'pre_deployment_command' => 'pre_deployment_command',
        'pre_deployment_command_container' => 'pre_deployment_command_container',
        'manual_webhook_secret_github' => 'manual_webhook_secret_github',
        'manual_webhook_secret_gitlab' => 'manual_webhook_secret_gitlab',
        'manual_webhook_secret_bitbucket' => 'manual_webhook_secret_bitbucket',
        'manual_webhook_secret_gitea' => 'manual_webhook_secret_gitea',
        'redirect' => 'redirect',
        'instant_deploy' => 'instant_deploy',
        'use_build_server' => 'use_build_server',
        'is_http_basic_auth_enabled' => 'is_http_basic_auth_enabled',
        'http_basic_auth_username' => 'http_basic_auth_username',
        'http_basic_auth_password' => 'http_basic_auth_password'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'project_uuid' => 'setProjectUuid',
        'server_uuid' => 'setServerUuid',
        'environment_name' => 'setEnvironmentName',
        'environment_uuid' => 'setEnvironmentUuid',
        'dockerfile' => 'setDockerfile',
        'build_pack' => 'setBuildPack',
        'ports_exposes' => 'setPortsExposes',
        'destination_uuid' => 'setDestinationUuid',
        'name' => 'setName',
        'description' => 'setDescription',
        'domains' => 'setDomains',
        'docker_registry_image_name' => 'setDockerRegistryImageName',
        'docker_registry_image_tag' => 'setDockerRegistryImageTag',
        'ports_mappings' => 'setPortsMappings',
        'base_directory' => 'setBaseDirectory',
        'health_check_enabled' => 'setHealthCheckEnabled',
        'health_check_path' => 'setHealthCheckPath',
        'health_check_port' => 'setHealthCheckPort',
        'health_check_host' => 'setHealthCheckHost',
        'health_check_method' => 'setHealthCheckMethod',
        'health_check_return_code' => 'setHealthCheckReturnCode',
        'health_check_scheme' => 'setHealthCheckScheme',
        'health_check_response_text' => 'setHealthCheckResponseText',
        'health_check_interval' => 'setHealthCheckInterval',
        'health_check_timeout' => 'setHealthCheckTimeout',
        'health_check_retries' => 'setHealthCheckRetries',
        'health_check_start_period' => 'setHealthCheckStartPeriod',
        'limits_memory' => 'setLimitsMemory',
        'limits_memory_swap' => 'setLimitsMemorySwap',
        'limits_memory_swappiness' => 'setLimitsMemorySwappiness',
        'limits_memory_reservation' => 'setLimitsMemoryReservation',
        'limits_cpus' => 'setLimitsCpus',
        'limits_cpuset' => 'setLimitsCpuset',
        'limits_cpu_shares' => 'setLimitsCpuShares',
        'custom_labels' => 'setCustomLabels',
        'custom_docker_run_options' => 'setCustomDockerRunOptions',
        'post_deployment_command' => 'setPostDeploymentCommand',
        'post_deployment_command_container' => 'setPostDeploymentCommandContainer',
        'pre_deployment_command' => 'setPreDeploymentCommand',
        'pre_deployment_command_container' => 'setPreDeploymentCommandContainer',
        'manual_webhook_secret_github' => 'setManualWebhookSecretGithub',
        'manual_webhook_secret_gitlab' => 'setManualWebhookSecretGitlab',
        'manual_webhook_secret_bitbucket' => 'setManualWebhookSecretBitbucket',
        'manual_webhook_secret_gitea' => 'setManualWebhookSecretGitea',
        'redirect' => 'setRedirect',
        'instant_deploy' => 'setInstantDeploy',
        'use_build_server' => 'setUseBuildServer',
        'is_http_basic_auth_enabled' => 'setIsHttpBasicAuthEnabled',
        'http_basic_auth_username' => 'setHttpBasicAuthUsername',
        'http_basic_auth_password' => 'setHttpBasicAuthPassword'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'project_uuid' => 'getProjectUuid',
        'server_uuid' => 'getServerUuid',
        'environment_name' => 'getEnvironmentName',
        'environment_uuid' => 'getEnvironmentUuid',
        'dockerfile' => 'getDockerfile',
        'build_pack' => 'getBuildPack',
        'ports_exposes' => 'getPortsExposes',
        'destination_uuid' => 'getDestinationUuid',
        'name' => 'getName',
        'description' => 'getDescription',
        'domains' => 'getDomains',
        'docker_registry_image_name' => 'getDockerRegistryImageName',
        'docker_registry_image_tag' => 'getDockerRegistryImageTag',
        'ports_mappings' => 'getPortsMappings',
        'base_directory' => 'getBaseDirectory',
        'health_check_enabled' => 'getHealthCheckEnabled',
        'health_check_path' => 'getHealthCheckPath',
        'health_check_port' => 'getHealthCheckPort',
        'health_check_host' => 'getHealthCheckHost',
        'health_check_method' => 'getHealthCheckMethod',
        'health_check_return_code' => 'getHealthCheckReturnCode',
        'health_check_scheme' => 'getHealthCheckScheme',
        'health_check_response_text' => 'getHealthCheckResponseText',
        'health_check_interval' => 'getHealthCheckInterval',
        'health_check_timeout' => 'getHealthCheckTimeout',
        'health_check_retries' => 'getHealthCheckRetries',
        'health_check_start_period' => 'getHealthCheckStartPeriod',
        'limits_memory' => 'getLimitsMemory',
        'limits_memory_swap' => 'getLimitsMemorySwap',
        'limits_memory_swappiness' => 'getLimitsMemorySwappiness',
        'limits_memory_reservation' => 'getLimitsMemoryReservation',
        'limits_cpus' => 'getLimitsCpus',
        'limits_cpuset' => 'getLimitsCpuset',
        'limits_cpu_shares' => 'getLimitsCpuShares',
        'custom_labels' => 'getCustomLabels',
        'custom_docker_run_options' => 'getCustomDockerRunOptions',
        'post_deployment_command' => 'getPostDeploymentCommand',
        'post_deployment_command_container' => 'getPostDeploymentCommandContainer',
        'pre_deployment_command' => 'getPreDeploymentCommand',
        'pre_deployment_command_container' => 'getPreDeploymentCommandContainer',
        'manual_webhook_secret_github' => 'getManualWebhookSecretGithub',
        'manual_webhook_secret_gitlab' => 'getManualWebhookSecretGitlab',
        'manual_webhook_secret_bitbucket' => 'getManualWebhookSecretBitbucket',
        'manual_webhook_secret_gitea' => 'getManualWebhookSecretGitea',
        'redirect' => 'getRedirect',
        'instant_deploy' => 'getInstantDeploy',
        'use_build_server' => 'getUseBuildServer',
        'is_http_basic_auth_enabled' => 'getIsHttpBasicAuthEnabled',
        'http_basic_auth_username' => 'getHttpBasicAuthUsername',
        'http_basic_auth_password' => 'getHttpBasicAuthPassword'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BUILD_PACK_NIXPACKS = 'nixpacks';
    public const BUILD_PACK__STATIC = 'static';
    public const BUILD_PACK_DOCKERFILE = 'dockerfile';
    public const BUILD_PACK_DOCKERCOMPOSE = 'dockercompose';
    public const REDIRECT_WWW = 'www';
    public const REDIRECT_NON_WWW = 'non-www';
    public const REDIRECT_BOTH = 'both';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBuildPackAllowableValues()
    {
        return [
            self::BUILD_PACK_NIXPACKS,
            self::BUILD_PACK__STATIC,
            self::BUILD_PACK_DOCKERFILE,
            self::BUILD_PACK_DOCKERCOMPOSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRedirectAllowableValues()
    {
        return [
            self::REDIRECT_WWW,
            self::REDIRECT_NON_WWW,
            self::REDIRECT_BOTH,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('project_uuid', $data ?? [], null);
        $this->setIfExists('server_uuid', $data ?? [], null);
        $this->setIfExists('environment_name', $data ?? [], null);
        $this->setIfExists('environment_uuid', $data ?? [], null);
        $this->setIfExists('dockerfile', $data ?? [], null);
        $this->setIfExists('build_pack', $data ?? [], null);
        $this->setIfExists('ports_exposes', $data ?? [], null);
        $this->setIfExists('destination_uuid', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('domains', $data ?? [], null);
        $this->setIfExists('docker_registry_image_name', $data ?? [], null);
        $this->setIfExists('docker_registry_image_tag', $data ?? [], null);
        $this->setIfExists('ports_mappings', $data ?? [], null);
        $this->setIfExists('base_directory', $data ?? [], null);
        $this->setIfExists('health_check_enabled', $data ?? [], null);
        $this->setIfExists('health_check_path', $data ?? [], null);
        $this->setIfExists('health_check_port', $data ?? [], null);
        $this->setIfExists('health_check_host', $data ?? [], null);
        $this->setIfExists('health_check_method', $data ?? [], null);
        $this->setIfExists('health_check_return_code', $data ?? [], null);
        $this->setIfExists('health_check_scheme', $data ?? [], null);
        $this->setIfExists('health_check_response_text', $data ?? [], null);
        $this->setIfExists('health_check_interval', $data ?? [], null);
        $this->setIfExists('health_check_timeout', $data ?? [], null);
        $this->setIfExists('health_check_retries', $data ?? [], null);
        $this->setIfExists('health_check_start_period', $data ?? [], null);
        $this->setIfExists('limits_memory', $data ?? [], null);
        $this->setIfExists('limits_memory_swap', $data ?? [], null);
        $this->setIfExists('limits_memory_swappiness', $data ?? [], null);
        $this->setIfExists('limits_memory_reservation', $data ?? [], null);
        $this->setIfExists('limits_cpus', $data ?? [], null);
        $this->setIfExists('limits_cpuset', $data ?? [], null);
        $this->setIfExists('limits_cpu_shares', $data ?? [], null);
        $this->setIfExists('custom_labels', $data ?? [], null);
        $this->setIfExists('custom_docker_run_options', $data ?? [], null);
        $this->setIfExists('post_deployment_command', $data ?? [], null);
        $this->setIfExists('post_deployment_command_container', $data ?? [], null);
        $this->setIfExists('pre_deployment_command', $data ?? [], null);
        $this->setIfExists('pre_deployment_command_container', $data ?? [], null);
        $this->setIfExists('manual_webhook_secret_github', $data ?? [], null);
        $this->setIfExists('manual_webhook_secret_gitlab', $data ?? [], null);
        $this->setIfExists('manual_webhook_secret_bitbucket', $data ?? [], null);
        $this->setIfExists('manual_webhook_secret_gitea', $data ?? [], null);
        $this->setIfExists('redirect', $data ?? [], null);
        $this->setIfExists('instant_deploy', $data ?? [], null);
        $this->setIfExists('use_build_server', $data ?? [], null);
        $this->setIfExists('is_http_basic_auth_enabled', $data ?? [], null);
        $this->setIfExists('http_basic_auth_username', $data ?? [], null);
        $this->setIfExists('http_basic_auth_password', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['project_uuid'] === null) {
            $invalidProperties[] = "'project_uuid' can't be null";
        }
        if ($this->container['server_uuid'] === null) {
            $invalidProperties[] = "'server_uuid' can't be null";
        }
        if ($this->container['environment_name'] === null) {
            $invalidProperties[] = "'environment_name' can't be null";
        }
        if ($this->container['environment_uuid'] === null) {
            $invalidProperties[] = "'environment_uuid' can't be null";
        }
        if ($this->container['dockerfile'] === null) {
            $invalidProperties[] = "'dockerfile' can't be null";
        }
        $allowedValues = $this->getBuildPackAllowableValues();
        if (!is_null($this->container['build_pack']) && !in_array($this->container['build_pack'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'build_pack', must be one of '%s'",
                $this->container['build_pack'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRedirectAllowableValues();
        if (!is_null($this->container['redirect']) && !in_array($this->container['redirect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'redirect', must be one of '%s'",
                $this->container['redirect'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets project_uuid
     *
     * @return string
     */
    public function getProjectUuid()
    {
        return $this->container['project_uuid'];
    }

    /**
     * Sets project_uuid
     *
     * @param string $project_uuid The project UUID.
     *
     * @return self
     */
    public function setProjectUuid($project_uuid)
    {
        if (is_null($project_uuid)) {
            throw new \InvalidArgumentException('non-nullable project_uuid cannot be null');
        }
        $this->container['project_uuid'] = $project_uuid;

        return $this;
    }

    /**
     * Gets server_uuid
     *
     * @return string
     */
    public function getServerUuid()
    {
        return $this->container['server_uuid'];
    }

    /**
     * Sets server_uuid
     *
     * @param string $server_uuid The server UUID.
     *
     * @return self
     */
    public function setServerUuid($server_uuid)
    {
        if (is_null($server_uuid)) {
            throw new \InvalidArgumentException('non-nullable server_uuid cannot be null');
        }
        $this->container['server_uuid'] = $server_uuid;

        return $this;
    }

    /**
     * Gets environment_name
     *
     * @return string
     */
    public function getEnvironmentName()
    {
        return $this->container['environment_name'];
    }

    /**
     * Sets environment_name
     *
     * @param string $environment_name The environment name. You need to provide at least one of environment_name or environment_uuid.
     *
     * @return self
     */
    public function setEnvironmentName($environment_name)
    {
        if (is_null($environment_name)) {
            throw new \InvalidArgumentException('non-nullable environment_name cannot be null');
        }
        $this->container['environment_name'] = $environment_name;

        return $this;
    }

    /**
     * Gets environment_uuid
     *
     * @return string
     */
    public function getEnvironmentUuid()
    {
        return $this->container['environment_uuid'];
    }

    /**
     * Sets environment_uuid
     *
     * @param string $environment_uuid The environment UUID. You need to provide at least one of environment_name or environment_uuid.
     *
     * @return self
     */
    public function setEnvironmentUuid($environment_uuid)
    {
        if (is_null($environment_uuid)) {
            throw new \InvalidArgumentException('non-nullable environment_uuid cannot be null');
        }
        $this->container['environment_uuid'] = $environment_uuid;

        return $this;
    }

    /**
     * Gets dockerfile
     *
     * @return string
     */
    public function getDockerfile()
    {
        return $this->container['dockerfile'];
    }

    /**
     * Sets dockerfile
     *
     * @param string $dockerfile The Dockerfile content.
     *
     * @return self
     */
    public function setDockerfile($dockerfile)
    {
        if (is_null($dockerfile)) {
            throw new \InvalidArgumentException('non-nullable dockerfile cannot be null');
        }
        $this->container['dockerfile'] = $dockerfile;

        return $this;
    }

    /**
     * Gets build_pack
     *
     * @return string|null
     */
    public function getBuildPack()
    {
        return $this->container['build_pack'];
    }

    /**
     * Sets build_pack
     *
     * @param string|null $build_pack The build pack type.
     *
     * @return self
     */
    public function setBuildPack($build_pack)
    {
        if (is_null($build_pack)) {
            throw new \InvalidArgumentException('non-nullable build_pack cannot be null');
        }
        $allowedValues = $this->getBuildPackAllowableValues();
        if (!in_array($build_pack, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'build_pack', must be one of '%s'",
                    $build_pack,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['build_pack'] = $build_pack;

        return $this;
    }

    /**
     * Gets ports_exposes
     *
     * @return string|null
     */
    public function getPortsExposes()
    {
        return $this->container['ports_exposes'];
    }

    /**
     * Sets ports_exposes
     *
     * @param string|null $ports_exposes The ports to expose.
     *
     * @return self
     */
    public function setPortsExposes($ports_exposes)
    {
        if (is_null($ports_exposes)) {
            throw new \InvalidArgumentException('non-nullable ports_exposes cannot be null');
        }
        $this->container['ports_exposes'] = $ports_exposes;

        return $this;
    }

    /**
     * Gets destination_uuid
     *
     * @return string|null
     */
    public function getDestinationUuid()
    {
        return $this->container['destination_uuid'];
    }

    /**
     * Sets destination_uuid
     *
     * @param string|null $destination_uuid The destination UUID.
     *
     * @return self
     */
    public function setDestinationUuid($destination_uuid)
    {
        if (is_null($destination_uuid)) {
            throw new \InvalidArgumentException('non-nullable destination_uuid cannot be null');
        }
        $this->container['destination_uuid'] = $destination_uuid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The application name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The application description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return string|null
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param string|null $domains The application domains.
     *
     * @return self
     */
    public function setDomains($domains)
    {
        if (is_null($domains)) {
            throw new \InvalidArgumentException('non-nullable domains cannot be null');
        }
        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets docker_registry_image_name
     *
     * @return string|null
     */
    public function getDockerRegistryImageName()
    {
        return $this->container['docker_registry_image_name'];
    }

    /**
     * Sets docker_registry_image_name
     *
     * @param string|null $docker_registry_image_name The docker registry image name.
     *
     * @return self
     */
    public function setDockerRegistryImageName($docker_registry_image_name)
    {
        if (is_null($docker_registry_image_name)) {
            throw new \InvalidArgumentException('non-nullable docker_registry_image_name cannot be null');
        }
        $this->container['docker_registry_image_name'] = $docker_registry_image_name;

        return $this;
    }

    /**
     * Gets docker_registry_image_tag
     *
     * @return string|null
     */
    public function getDockerRegistryImageTag()
    {
        return $this->container['docker_registry_image_tag'];
    }

    /**
     * Sets docker_registry_image_tag
     *
     * @param string|null $docker_registry_image_tag The docker registry image tag.
     *
     * @return self
     */
    public function setDockerRegistryImageTag($docker_registry_image_tag)
    {
        if (is_null($docker_registry_image_tag)) {
            throw new \InvalidArgumentException('non-nullable docker_registry_image_tag cannot be null');
        }
        $this->container['docker_registry_image_tag'] = $docker_registry_image_tag;

        return $this;
    }

    /**
     * Gets ports_mappings
     *
     * @return string|null
     */
    public function getPortsMappings()
    {
        return $this->container['ports_mappings'];
    }

    /**
     * Sets ports_mappings
     *
     * @param string|null $ports_mappings The ports mappings.
     *
     * @return self
     */
    public function setPortsMappings($ports_mappings)
    {
        if (is_null($ports_mappings)) {
            throw new \InvalidArgumentException('non-nullable ports_mappings cannot be null');
        }
        $this->container['ports_mappings'] = $ports_mappings;

        return $this;
    }

    /**
     * Gets base_directory
     *
     * @return string|null
     */
    public function getBaseDirectory()
    {
        return $this->container['base_directory'];
    }

    /**
     * Sets base_directory
     *
     * @param string|null $base_directory The base directory for all commands.
     *
     * @return self
     */
    public function setBaseDirectory($base_directory)
    {
        if (is_null($base_directory)) {
            throw new \InvalidArgumentException('non-nullable base_directory cannot be null');
        }
        $this->container['base_directory'] = $base_directory;

        return $this;
    }

    /**
     * Gets health_check_enabled
     *
     * @return bool|null
     */
    public function getHealthCheckEnabled()
    {
        return $this->container['health_check_enabled'];
    }

    /**
     * Sets health_check_enabled
     *
     * @param bool|null $health_check_enabled Health check enabled.
     *
     * @return self
     */
    public function setHealthCheckEnabled($health_check_enabled)
    {
        if (is_null($health_check_enabled)) {
            throw new \InvalidArgumentException('non-nullable health_check_enabled cannot be null');
        }
        $this->container['health_check_enabled'] = $health_check_enabled;

        return $this;
    }

    /**
     * Gets health_check_path
     *
     * @return string|null
     */
    public function getHealthCheckPath()
    {
        return $this->container['health_check_path'];
    }

    /**
     * Sets health_check_path
     *
     * @param string|null $health_check_path Health check path.
     *
     * @return self
     */
    public function setHealthCheckPath($health_check_path)
    {
        if (is_null($health_check_path)) {
            throw new \InvalidArgumentException('non-nullable health_check_path cannot be null');
        }
        $this->container['health_check_path'] = $health_check_path;

        return $this;
    }

    /**
     * Gets health_check_port
     *
     * @return string|null
     */
    public function getHealthCheckPort()
    {
        return $this->container['health_check_port'];
    }

    /**
     * Sets health_check_port
     *
     * @param string|null $health_check_port Health check port.
     *
     * @return self
     */
    public function setHealthCheckPort($health_check_port)
    {
        if (is_null($health_check_port)) {
            throw new \InvalidArgumentException('non-nullable health_check_port cannot be null');
        }
        $this->container['health_check_port'] = $health_check_port;

        return $this;
    }

    /**
     * Gets health_check_host
     *
     * @return string|null
     */
    public function getHealthCheckHost()
    {
        return $this->container['health_check_host'];
    }

    /**
     * Sets health_check_host
     *
     * @param string|null $health_check_host Health check host.
     *
     * @return self
     */
    public function setHealthCheckHost($health_check_host)
    {
        if (is_null($health_check_host)) {
            throw new \InvalidArgumentException('non-nullable health_check_host cannot be null');
        }
        $this->container['health_check_host'] = $health_check_host;

        return $this;
    }

    /**
     * Gets health_check_method
     *
     * @return string|null
     */
    public function getHealthCheckMethod()
    {
        return $this->container['health_check_method'];
    }

    /**
     * Sets health_check_method
     *
     * @param string|null $health_check_method Health check method.
     *
     * @return self
     */
    public function setHealthCheckMethod($health_check_method)
    {
        if (is_null($health_check_method)) {
            throw new \InvalidArgumentException('non-nullable health_check_method cannot be null');
        }
        $this->container['health_check_method'] = $health_check_method;

        return $this;
    }

    /**
     * Gets health_check_return_code
     *
     * @return int|null
     */
    public function getHealthCheckReturnCode()
    {
        return $this->container['health_check_return_code'];
    }

    /**
     * Sets health_check_return_code
     *
     * @param int|null $health_check_return_code Health check return code.
     *
     * @return self
     */
    public function setHealthCheckReturnCode($health_check_return_code)
    {
        if (is_null($health_check_return_code)) {
            throw new \InvalidArgumentException('non-nullable health_check_return_code cannot be null');
        }
        $this->container['health_check_return_code'] = $health_check_return_code;

        return $this;
    }

    /**
     * Gets health_check_scheme
     *
     * @return string|null
     */
    public function getHealthCheckScheme()
    {
        return $this->container['health_check_scheme'];
    }

    /**
     * Sets health_check_scheme
     *
     * @param string|null $health_check_scheme Health check scheme.
     *
     * @return self
     */
    public function setHealthCheckScheme($health_check_scheme)
    {
        if (is_null($health_check_scheme)) {
            throw new \InvalidArgumentException('non-nullable health_check_scheme cannot be null');
        }
        $this->container['health_check_scheme'] = $health_check_scheme;

        return $this;
    }

    /**
     * Gets health_check_response_text
     *
     * @return string|null
     */
    public function getHealthCheckResponseText()
    {
        return $this->container['health_check_response_text'];
    }

    /**
     * Sets health_check_response_text
     *
     * @param string|null $health_check_response_text Health check response text.
     *
     * @return self
     */
    public function setHealthCheckResponseText($health_check_response_text)
    {
        if (is_null($health_check_response_text)) {
            throw new \InvalidArgumentException('non-nullable health_check_response_text cannot be null');
        }
        $this->container['health_check_response_text'] = $health_check_response_text;

        return $this;
    }

    /**
     * Gets health_check_interval
     *
     * @return int|null
     */
    public function getHealthCheckInterval()
    {
        return $this->container['health_check_interval'];
    }

    /**
     * Sets health_check_interval
     *
     * @param int|null $health_check_interval Health check interval in seconds.
     *
     * @return self
     */
    public function setHealthCheckInterval($health_check_interval)
    {
        if (is_null($health_check_interval)) {
            throw new \InvalidArgumentException('non-nullable health_check_interval cannot be null');
        }
        $this->container['health_check_interval'] = $health_check_interval;

        return $this;
    }

    /**
     * Gets health_check_timeout
     *
     * @return int|null
     */
    public function getHealthCheckTimeout()
    {
        return $this->container['health_check_timeout'];
    }

    /**
     * Sets health_check_timeout
     *
     * @param int|null $health_check_timeout Health check timeout in seconds.
     *
     * @return self
     */
    public function setHealthCheckTimeout($health_check_timeout)
    {
        if (is_null($health_check_timeout)) {
            throw new \InvalidArgumentException('non-nullable health_check_timeout cannot be null');
        }
        $this->container['health_check_timeout'] = $health_check_timeout;

        return $this;
    }

    /**
     * Gets health_check_retries
     *
     * @return int|null
     */
    public function getHealthCheckRetries()
    {
        return $this->container['health_check_retries'];
    }

    /**
     * Sets health_check_retries
     *
     * @param int|null $health_check_retries Health check retries count.
     *
     * @return self
     */
    public function setHealthCheckRetries($health_check_retries)
    {
        if (is_null($health_check_retries)) {
            throw new \InvalidArgumentException('non-nullable health_check_retries cannot be null');
        }
        $this->container['health_check_retries'] = $health_check_retries;

        return $this;
    }

    /**
     * Gets health_check_start_period
     *
     * @return int|null
     */
    public function getHealthCheckStartPeriod()
    {
        return $this->container['health_check_start_period'];
    }

    /**
     * Sets health_check_start_period
     *
     * @param int|null $health_check_start_period Health check start period in seconds.
     *
     * @return self
     */
    public function setHealthCheckStartPeriod($health_check_start_period)
    {
        if (is_null($health_check_start_period)) {
            throw new \InvalidArgumentException('non-nullable health_check_start_period cannot be null');
        }
        $this->container['health_check_start_period'] = $health_check_start_period;

        return $this;
    }

    /**
     * Gets limits_memory
     *
     * @return string|null
     */
    public function getLimitsMemory()
    {
        return $this->container['limits_memory'];
    }

    /**
     * Sets limits_memory
     *
     * @param string|null $limits_memory Memory limit.
     *
     * @return self
     */
    public function setLimitsMemory($limits_memory)
    {
        if (is_null($limits_memory)) {
            throw new \InvalidArgumentException('non-nullable limits_memory cannot be null');
        }
        $this->container['limits_memory'] = $limits_memory;

        return $this;
    }

    /**
     * Gets limits_memory_swap
     *
     * @return string|null
     */
    public function getLimitsMemorySwap()
    {
        return $this->container['limits_memory_swap'];
    }

    /**
     * Sets limits_memory_swap
     *
     * @param string|null $limits_memory_swap Memory swap limit.
     *
     * @return self
     */
    public function setLimitsMemorySwap($limits_memory_swap)
    {
        if (is_null($limits_memory_swap)) {
            throw new \InvalidArgumentException('non-nullable limits_memory_swap cannot be null');
        }
        $this->container['limits_memory_swap'] = $limits_memory_swap;

        return $this;
    }

    /**
     * Gets limits_memory_swappiness
     *
     * @return int|null
     */
    public function getLimitsMemorySwappiness()
    {
        return $this->container['limits_memory_swappiness'];
    }

    /**
     * Sets limits_memory_swappiness
     *
     * @param int|null $limits_memory_swappiness Memory swappiness.
     *
     * @return self
     */
    public function setLimitsMemorySwappiness($limits_memory_swappiness)
    {
        if (is_null($limits_memory_swappiness)) {
            throw new \InvalidArgumentException('non-nullable limits_memory_swappiness cannot be null');
        }
        $this->container['limits_memory_swappiness'] = $limits_memory_swappiness;

        return $this;
    }

    /**
     * Gets limits_memory_reservation
     *
     * @return string|null
     */
    public function getLimitsMemoryReservation()
    {
        return $this->container['limits_memory_reservation'];
    }

    /**
     * Sets limits_memory_reservation
     *
     * @param string|null $limits_memory_reservation Memory reservation.
     *
     * @return self
     */
    public function setLimitsMemoryReservation($limits_memory_reservation)
    {
        if (is_null($limits_memory_reservation)) {
            throw new \InvalidArgumentException('non-nullable limits_memory_reservation cannot be null');
        }
        $this->container['limits_memory_reservation'] = $limits_memory_reservation;

        return $this;
    }

    /**
     * Gets limits_cpus
     *
     * @return string|null
     */
    public function getLimitsCpus()
    {
        return $this->container['limits_cpus'];
    }

    /**
     * Sets limits_cpus
     *
     * @param string|null $limits_cpus CPU limit.
     *
     * @return self
     */
    public function setLimitsCpus($limits_cpus)
    {
        if (is_null($limits_cpus)) {
            throw new \InvalidArgumentException('non-nullable limits_cpus cannot be null');
        }
        $this->container['limits_cpus'] = $limits_cpus;

        return $this;
    }

    /**
     * Gets limits_cpuset
     *
     * @return string|null
     */
    public function getLimitsCpuset()
    {
        return $this->container['limits_cpuset'];
    }

    /**
     * Sets limits_cpuset
     *
     * @param string|null $limits_cpuset CPU set.
     *
     * @return self
     */
    public function setLimitsCpuset($limits_cpuset)
    {
        if (is_null($limits_cpuset)) {
            throw new \InvalidArgumentException('non-nullable limits_cpuset cannot be null');
        }
        $this->container['limits_cpuset'] = $limits_cpuset;

        return $this;
    }

    /**
     * Gets limits_cpu_shares
     *
     * @return int|null
     */
    public function getLimitsCpuShares()
    {
        return $this->container['limits_cpu_shares'];
    }

    /**
     * Sets limits_cpu_shares
     *
     * @param int|null $limits_cpu_shares CPU shares.
     *
     * @return self
     */
    public function setLimitsCpuShares($limits_cpu_shares)
    {
        if (is_null($limits_cpu_shares)) {
            throw new \InvalidArgumentException('non-nullable limits_cpu_shares cannot be null');
        }
        $this->container['limits_cpu_shares'] = $limits_cpu_shares;

        return $this;
    }

    /**
     * Gets custom_labels
     *
     * @return string|null
     */
    public function getCustomLabels()
    {
        return $this->container['custom_labels'];
    }

    /**
     * Sets custom_labels
     *
     * @param string|null $custom_labels Custom labels.
     *
     * @return self
     */
    public function setCustomLabels($custom_labels)
    {
        if (is_null($custom_labels)) {
            throw new \InvalidArgumentException('non-nullable custom_labels cannot be null');
        }
        $this->container['custom_labels'] = $custom_labels;

        return $this;
    }

    /**
     * Gets custom_docker_run_options
     *
     * @return string|null
     */
    public function getCustomDockerRunOptions()
    {
        return $this->container['custom_docker_run_options'];
    }

    /**
     * Sets custom_docker_run_options
     *
     * @param string|null $custom_docker_run_options Custom docker run options.
     *
     * @return self
     */
    public function setCustomDockerRunOptions($custom_docker_run_options)
    {
        if (is_null($custom_docker_run_options)) {
            throw new \InvalidArgumentException('non-nullable custom_docker_run_options cannot be null');
        }
        $this->container['custom_docker_run_options'] = $custom_docker_run_options;

        return $this;
    }

    /**
     * Gets post_deployment_command
     *
     * @return string|null
     */
    public function getPostDeploymentCommand()
    {
        return $this->container['post_deployment_command'];
    }

    /**
     * Sets post_deployment_command
     *
     * @param string|null $post_deployment_command Post deployment command.
     *
     * @return self
     */
    public function setPostDeploymentCommand($post_deployment_command)
    {
        if (is_null($post_deployment_command)) {
            throw new \InvalidArgumentException('non-nullable post_deployment_command cannot be null');
        }
        $this->container['post_deployment_command'] = $post_deployment_command;

        return $this;
    }

    /**
     * Gets post_deployment_command_container
     *
     * @return string|null
     */
    public function getPostDeploymentCommandContainer()
    {
        return $this->container['post_deployment_command_container'];
    }

    /**
     * Sets post_deployment_command_container
     *
     * @param string|null $post_deployment_command_container Post deployment command container.
     *
     * @return self
     */
    public function setPostDeploymentCommandContainer($post_deployment_command_container)
    {
        if (is_null($post_deployment_command_container)) {
            throw new \InvalidArgumentException('non-nullable post_deployment_command_container cannot be null');
        }
        $this->container['post_deployment_command_container'] = $post_deployment_command_container;

        return $this;
    }

    /**
     * Gets pre_deployment_command
     *
     * @return string|null
     */
    public function getPreDeploymentCommand()
    {
        return $this->container['pre_deployment_command'];
    }

    /**
     * Sets pre_deployment_command
     *
     * @param string|null $pre_deployment_command Pre deployment command.
     *
     * @return self
     */
    public function setPreDeploymentCommand($pre_deployment_command)
    {
        if (is_null($pre_deployment_command)) {
            throw new \InvalidArgumentException('non-nullable pre_deployment_command cannot be null');
        }
        $this->container['pre_deployment_command'] = $pre_deployment_command;

        return $this;
    }

    /**
     * Gets pre_deployment_command_container
     *
     * @return string|null
     */
    public function getPreDeploymentCommandContainer()
    {
        return $this->container['pre_deployment_command_container'];
    }

    /**
     * Sets pre_deployment_command_container
     *
     * @param string|null $pre_deployment_command_container Pre deployment command container.
     *
     * @return self
     */
    public function setPreDeploymentCommandContainer($pre_deployment_command_container)
    {
        if (is_null($pre_deployment_command_container)) {
            throw new \InvalidArgumentException('non-nullable pre_deployment_command_container cannot be null');
        }
        $this->container['pre_deployment_command_container'] = $pre_deployment_command_container;

        return $this;
    }

    /**
     * Gets manual_webhook_secret_github
     *
     * @return string|null
     */
    public function getManualWebhookSecretGithub()
    {
        return $this->container['manual_webhook_secret_github'];
    }

    /**
     * Sets manual_webhook_secret_github
     *
     * @param string|null $manual_webhook_secret_github Manual webhook secret for Github.
     *
     * @return self
     */
    public function setManualWebhookSecretGithub($manual_webhook_secret_github)
    {
        if (is_null($manual_webhook_secret_github)) {
            throw new \InvalidArgumentException('non-nullable manual_webhook_secret_github cannot be null');
        }
        $this->container['manual_webhook_secret_github'] = $manual_webhook_secret_github;

        return $this;
    }

    /**
     * Gets manual_webhook_secret_gitlab
     *
     * @return string|null
     */
    public function getManualWebhookSecretGitlab()
    {
        return $this->container['manual_webhook_secret_gitlab'];
    }

    /**
     * Sets manual_webhook_secret_gitlab
     *
     * @param string|null $manual_webhook_secret_gitlab Manual webhook secret for Gitlab.
     *
     * @return self
     */
    public function setManualWebhookSecretGitlab($manual_webhook_secret_gitlab)
    {
        if (is_null($manual_webhook_secret_gitlab)) {
            throw new \InvalidArgumentException('non-nullable manual_webhook_secret_gitlab cannot be null');
        }
        $this->container['manual_webhook_secret_gitlab'] = $manual_webhook_secret_gitlab;

        return $this;
    }

    /**
     * Gets manual_webhook_secret_bitbucket
     *
     * @return string|null
     */
    public function getManualWebhookSecretBitbucket()
    {
        return $this->container['manual_webhook_secret_bitbucket'];
    }

    /**
     * Sets manual_webhook_secret_bitbucket
     *
     * @param string|null $manual_webhook_secret_bitbucket Manual webhook secret for Bitbucket.
     *
     * @return self
     */
    public function setManualWebhookSecretBitbucket($manual_webhook_secret_bitbucket)
    {
        if (is_null($manual_webhook_secret_bitbucket)) {
            throw new \InvalidArgumentException('non-nullable manual_webhook_secret_bitbucket cannot be null');
        }
        $this->container['manual_webhook_secret_bitbucket'] = $manual_webhook_secret_bitbucket;

        return $this;
    }

    /**
     * Gets manual_webhook_secret_gitea
     *
     * @return string|null
     */
    public function getManualWebhookSecretGitea()
    {
        return $this->container['manual_webhook_secret_gitea'];
    }

    /**
     * Sets manual_webhook_secret_gitea
     *
     * @param string|null $manual_webhook_secret_gitea Manual webhook secret for Gitea.
     *
     * @return self
     */
    public function setManualWebhookSecretGitea($manual_webhook_secret_gitea)
    {
        if (is_null($manual_webhook_secret_gitea)) {
            throw new \InvalidArgumentException('non-nullable manual_webhook_secret_gitea cannot be null');
        }
        $this->container['manual_webhook_secret_gitea'] = $manual_webhook_secret_gitea;

        return $this;
    }

    /**
     * Gets redirect
     *
     * @return string|null
     */
    public function getRedirect()
    {
        return $this->container['redirect'];
    }

    /**
     * Sets redirect
     *
     * @param string|null $redirect How to set redirect with Traefik / Caddy. www<->non-www.
     *
     * @return self
     */
    public function setRedirect($redirect)
    {
        if (is_null($redirect)) {
            throw new \InvalidArgumentException('non-nullable redirect cannot be null');
        }
        $allowedValues = $this->getRedirectAllowableValues();
        if (!in_array($redirect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'redirect', must be one of '%s'",
                    $redirect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['redirect'] = $redirect;

        return $this;
    }

    /**
     * Gets instant_deploy
     *
     * @return bool|null
     */
    public function getInstantDeploy()
    {
        return $this->container['instant_deploy'];
    }

    /**
     * Sets instant_deploy
     *
     * @param bool|null $instant_deploy The flag to indicate if the application should be deployed instantly.
     *
     * @return self
     */
    public function setInstantDeploy($instant_deploy)
    {
        if (is_null($instant_deploy)) {
            throw new \InvalidArgumentException('non-nullable instant_deploy cannot be null');
        }
        $this->container['instant_deploy'] = $instant_deploy;

        return $this;
    }

    /**
     * Gets use_build_server
     *
     * @return bool|null
     */
    public function getUseBuildServer()
    {
        return $this->container['use_build_server'];
    }

    /**
     * Sets use_build_server
     *
     * @param bool|null $use_build_server Use build server.
     *
     * @return self
     */
    public function setUseBuildServer($use_build_server)
    {
        if (is_null($use_build_server)) {
            throw new \InvalidArgumentException('non-nullable use_build_server cannot be null');
        }
        $this->container['use_build_server'] = $use_build_server;

        return $this;
    }

    /**
     * Gets is_http_basic_auth_enabled
     *
     * @return bool|null
     */
    public function getIsHttpBasicAuthEnabled()
    {
        return $this->container['is_http_basic_auth_enabled'];
    }

    /**
     * Sets is_http_basic_auth_enabled
     *
     * @param bool|null $is_http_basic_auth_enabled HTTP Basic Authentication enabled.
     *
     * @return self
     */
    public function setIsHttpBasicAuthEnabled($is_http_basic_auth_enabled)
    {
        if (is_null($is_http_basic_auth_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_http_basic_auth_enabled cannot be null');
        }
        $this->container['is_http_basic_auth_enabled'] = $is_http_basic_auth_enabled;

        return $this;
    }

    /**
     * Gets http_basic_auth_username
     *
     * @return string|null
     */
    public function getHttpBasicAuthUsername()
    {
        return $this->container['http_basic_auth_username'];
    }

    /**
     * Sets http_basic_auth_username
     *
     * @param string|null $http_basic_auth_username Username for HTTP Basic Authentication
     *
     * @return self
     */
    public function setHttpBasicAuthUsername($http_basic_auth_username)
    {
        if (is_null($http_basic_auth_username)) {
            throw new \InvalidArgumentException('non-nullable http_basic_auth_username cannot be null');
        }
        $this->container['http_basic_auth_username'] = $http_basic_auth_username;

        return $this;
    }

    /**
     * Gets http_basic_auth_password
     *
     * @return string|null
     */
    public function getHttpBasicAuthPassword()
    {
        return $this->container['http_basic_auth_password'];
    }

    /**
     * Sets http_basic_auth_password
     *
     * @param string|null $http_basic_auth_password Password for HTTP Basic Authentication
     *
     * @return self
     */
    public function setHttpBasicAuthPassword($http_basic_auth_password)
    {
        if (is_null($http_basic_auth_password)) {
            throw new \InvalidArgumentException('non-nullable http_basic_auth_password cannot be null');
        }
        $this->container['http_basic_auth_password'] = $http_basic_auth_password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


