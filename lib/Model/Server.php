<?php
/**
 * Server
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  CoolifyPHP\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Coolify
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CoolifyPHP\Client\Model;

use \ArrayAccess;
use \CoolifyPHP\Client\ObjectSerializer;

/**
 * Server Class Doc Comment
 *
 * @category Class
 * @description Server model
 * @package  CoolifyPHP\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Server implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Server';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'uuid' => 'string',
        'name' => 'string',
        'description' => 'string',
        'ip' => 'string',
        'user' => 'string',
        'port' => 'int',
        'proxy' => 'object',
        'proxy_type' => 'string',
        'high_disk_usage_notification_sent' => 'bool',
        'unreachable_notification_sent' => 'bool',
        'unreachable_count' => 'int',
        'validation_logs' => 'string',
        'log_drain_notification_sent' => 'bool',
        'swarm_cluster' => 'string',
        'settings' => '\CoolifyPHP\Client\Model\ServerSetting'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'uuid' => null,
        'name' => null,
        'description' => null,
        'ip' => null,
        'user' => null,
        'port' => null,
        'proxy' => null,
        'proxy_type' => null,
        'high_disk_usage_notification_sent' => null,
        'unreachable_notification_sent' => null,
        'unreachable_count' => null,
        'validation_logs' => null,
        'log_drain_notification_sent' => null,
        'swarm_cluster' => null,
        'settings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'uuid' => false,
        'name' => false,
        'description' => false,
        'ip' => false,
        'user' => false,
        'port' => false,
        'proxy' => false,
        'proxy_type' => false,
        'high_disk_usage_notification_sent' => false,
        'unreachable_notification_sent' => false,
        'unreachable_count' => false,
        'validation_logs' => false,
        'log_drain_notification_sent' => false,
        'swarm_cluster' => false,
        'settings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'uuid' => 'uuid',
        'name' => 'name',
        'description' => 'description',
        'ip' => 'ip',
        'user' => 'user',
        'port' => 'port',
        'proxy' => 'proxy',
        'proxy_type' => 'proxy_type',
        'high_disk_usage_notification_sent' => 'high_disk_usage_notification_sent',
        'unreachable_notification_sent' => 'unreachable_notification_sent',
        'unreachable_count' => 'unreachable_count',
        'validation_logs' => 'validation_logs',
        'log_drain_notification_sent' => 'log_drain_notification_sent',
        'swarm_cluster' => 'swarm_cluster',
        'settings' => 'settings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'uuid' => 'setUuid',
        'name' => 'setName',
        'description' => 'setDescription',
        'ip' => 'setIp',
        'user' => 'setUser',
        'port' => 'setPort',
        'proxy' => 'setProxy',
        'proxy_type' => 'setProxyType',
        'high_disk_usage_notification_sent' => 'setHighDiskUsageNotificationSent',
        'unreachable_notification_sent' => 'setUnreachableNotificationSent',
        'unreachable_count' => 'setUnreachableCount',
        'validation_logs' => 'setValidationLogs',
        'log_drain_notification_sent' => 'setLogDrainNotificationSent',
        'swarm_cluster' => 'setSwarmCluster',
        'settings' => 'setSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'uuid' => 'getUuid',
        'name' => 'getName',
        'description' => 'getDescription',
        'ip' => 'getIp',
        'user' => 'getUser',
        'port' => 'getPort',
        'proxy' => 'getProxy',
        'proxy_type' => 'getProxyType',
        'high_disk_usage_notification_sent' => 'getHighDiskUsageNotificationSent',
        'unreachable_notification_sent' => 'getUnreachableNotificationSent',
        'unreachable_count' => 'getUnreachableCount',
        'validation_logs' => 'getValidationLogs',
        'log_drain_notification_sent' => 'getLogDrainNotificationSent',
        'swarm_cluster' => 'getSwarmCluster',
        'settings' => 'getSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PROXY_TYPE_TRAEFIK = 'traefik';
    public const PROXY_TYPE_CADDY = 'caddy';
    public const PROXY_TYPE_NONE = 'none';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProxyTypeAllowableValues()
    {
        return [
            self::PROXY_TYPE_TRAEFIK,
            self::PROXY_TYPE_CADDY,
            self::PROXY_TYPE_NONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('ip', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('port', $data ?? [], null);
        $this->setIfExists('proxy', $data ?? [], null);
        $this->setIfExists('proxy_type', $data ?? [], null);
        $this->setIfExists('high_disk_usage_notification_sent', $data ?? [], null);
        $this->setIfExists('unreachable_notification_sent', $data ?? [], null);
        $this->setIfExists('unreachable_count', $data ?? [], null);
        $this->setIfExists('validation_logs', $data ?? [], null);
        $this->setIfExists('log_drain_notification_sent', $data ?? [], null);
        $this->setIfExists('swarm_cluster', $data ?? [], null);
        $this->setIfExists('settings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProxyTypeAllowableValues();
        if (!is_null($this->container['proxy_type']) && !in_array($this->container['proxy_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'proxy_type', must be one of '%s'",
                $this->container['proxy_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The server ID.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid The server UUID.
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The server name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The server description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip The IP address.
     *
     * @return self
     */
    public function setIp($ip)
    {
        if (is_null($ip)) {
            throw new \InvalidArgumentException('non-nullable ip cannot be null');
        }
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user The user.
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port The port number.
     *
     * @return self
     */
    public function setPort($port)
    {
        if (is_null($port)) {
            throw new \InvalidArgumentException('non-nullable port cannot be null');
        }
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets proxy
     *
     * @return object|null
     */
    public function getProxy()
    {
        return $this->container['proxy'];
    }

    /**
     * Sets proxy
     *
     * @param object|null $proxy The proxy configuration.
     *
     * @return self
     */
    public function setProxy($proxy)
    {
        if (is_null($proxy)) {
            throw new \InvalidArgumentException('non-nullable proxy cannot be null');
        }
        $this->container['proxy'] = $proxy;

        return $this;
    }

    /**
     * Gets proxy_type
     *
     * @return string|null
     */
    public function getProxyType()
    {
        return $this->container['proxy_type'];
    }

    /**
     * Sets proxy_type
     *
     * @param string|null $proxy_type The proxy type.
     *
     * @return self
     */
    public function setProxyType($proxy_type)
    {
        if (is_null($proxy_type)) {
            throw new \InvalidArgumentException('non-nullable proxy_type cannot be null');
        }
        $allowedValues = $this->getProxyTypeAllowableValues();
        if (!in_array($proxy_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'proxy_type', must be one of '%s'",
                    $proxy_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['proxy_type'] = $proxy_type;

        return $this;
    }

    /**
     * Gets high_disk_usage_notification_sent
     *
     * @return bool|null
     */
    public function getHighDiskUsageNotificationSent()
    {
        return $this->container['high_disk_usage_notification_sent'];
    }

    /**
     * Sets high_disk_usage_notification_sent
     *
     * @param bool|null $high_disk_usage_notification_sent The flag to indicate if the high disk usage notification has been sent.
     *
     * @return self
     */
    public function setHighDiskUsageNotificationSent($high_disk_usage_notification_sent)
    {
        if (is_null($high_disk_usage_notification_sent)) {
            throw new \InvalidArgumentException('non-nullable high_disk_usage_notification_sent cannot be null');
        }
        $this->container['high_disk_usage_notification_sent'] = $high_disk_usage_notification_sent;

        return $this;
    }

    /**
     * Gets unreachable_notification_sent
     *
     * @return bool|null
     */
    public function getUnreachableNotificationSent()
    {
        return $this->container['unreachable_notification_sent'];
    }

    /**
     * Sets unreachable_notification_sent
     *
     * @param bool|null $unreachable_notification_sent The flag to indicate if the unreachable notification has been sent.
     *
     * @return self
     */
    public function setUnreachableNotificationSent($unreachable_notification_sent)
    {
        if (is_null($unreachable_notification_sent)) {
            throw new \InvalidArgumentException('non-nullable unreachable_notification_sent cannot be null');
        }
        $this->container['unreachable_notification_sent'] = $unreachable_notification_sent;

        return $this;
    }

    /**
     * Gets unreachable_count
     *
     * @return int|null
     */
    public function getUnreachableCount()
    {
        return $this->container['unreachable_count'];
    }

    /**
     * Sets unreachable_count
     *
     * @param int|null $unreachable_count The unreachable count for your server.
     *
     * @return self
     */
    public function setUnreachableCount($unreachable_count)
    {
        if (is_null($unreachable_count)) {
            throw new \InvalidArgumentException('non-nullable unreachable_count cannot be null');
        }
        $this->container['unreachable_count'] = $unreachable_count;

        return $this;
    }

    /**
     * Gets validation_logs
     *
     * @return string|null
     */
    public function getValidationLogs()
    {
        return $this->container['validation_logs'];
    }

    /**
     * Sets validation_logs
     *
     * @param string|null $validation_logs The validation logs.
     *
     * @return self
     */
    public function setValidationLogs($validation_logs)
    {
        if (is_null($validation_logs)) {
            throw new \InvalidArgumentException('non-nullable validation_logs cannot be null');
        }
        $this->container['validation_logs'] = $validation_logs;

        return $this;
    }

    /**
     * Gets log_drain_notification_sent
     *
     * @return bool|null
     */
    public function getLogDrainNotificationSent()
    {
        return $this->container['log_drain_notification_sent'];
    }

    /**
     * Sets log_drain_notification_sent
     *
     * @param bool|null $log_drain_notification_sent The flag to indicate if the log drain notification has been sent.
     *
     * @return self
     */
    public function setLogDrainNotificationSent($log_drain_notification_sent)
    {
        if (is_null($log_drain_notification_sent)) {
            throw new \InvalidArgumentException('non-nullable log_drain_notification_sent cannot be null');
        }
        $this->container['log_drain_notification_sent'] = $log_drain_notification_sent;

        return $this;
    }

    /**
     * Gets swarm_cluster
     *
     * @return string|null
     */
    public function getSwarmCluster()
    {
        return $this->container['swarm_cluster'];
    }

    /**
     * Sets swarm_cluster
     *
     * @param string|null $swarm_cluster The swarm cluster configuration.
     *
     * @return self
     */
    public function setSwarmCluster($swarm_cluster)
    {
        if (is_null($swarm_cluster)) {
            throw new \InvalidArgumentException('non-nullable swarm_cluster cannot be null');
        }
        $this->container['swarm_cluster'] = $swarm_cluster;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \CoolifyPHP\Client\Model\ServerSetting|null
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \CoolifyPHP\Client\Model\ServerSetting|null $settings settings
     *
     * @return self
     */
    public function setSettings($settings)
    {
        if (is_null($settings)) {
            throw new \InvalidArgumentException('non-nullable settings cannot be null');
        }
        $this->container['settings'] = $settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


