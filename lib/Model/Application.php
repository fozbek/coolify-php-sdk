<?php
/**
 * Application
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  CoolifyPHP\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Coolify
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CoolifyPHP\Client\Model;

use \ArrayAccess;
use \CoolifyPHP\Client\ObjectSerializer;

/**
 * Application Class Doc Comment
 *
 * @category Class
 * @description Application model
 * @package  CoolifyPHP\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Application implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Application';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'description' => 'string',
        'repository_project_id' => 'int',
        'uuid' => 'string',
        'name' => 'string',
        'fqdn' => 'string',
        'config_hash' => 'string',
        'git_repository' => 'string',
        'git_branch' => 'string',
        'git_commit_sha' => 'string',
        'git_full_url' => 'string',
        'docker_registry_image_name' => 'string',
        'docker_registry_image_tag' => 'string',
        'build_pack' => 'string',
        'static_image' => 'string',
        'install_command' => 'string',
        'build_command' => 'string',
        'start_command' => 'string',
        'ports_exposes' => 'string',
        'ports_mappings' => 'string',
        'custom_network_aliases' => 'string',
        'base_directory' => 'string',
        'publish_directory' => 'string',
        'health_check_enabled' => 'bool',
        'health_check_path' => 'string',
        'health_check_port' => 'string',
        'health_check_host' => 'string',
        'health_check_method' => 'string',
        'health_check_return_code' => 'int',
        'health_check_scheme' => 'string',
        'health_check_response_text' => 'string',
        'health_check_interval' => 'int',
        'health_check_timeout' => 'int',
        'health_check_retries' => 'int',
        'health_check_start_period' => 'int',
        'limits_memory' => 'string',
        'limits_memory_swap' => 'string',
        'limits_memory_swappiness' => 'int',
        'limits_memory_reservation' => 'string',
        'limits_cpus' => 'string',
        'limits_cpuset' => 'string',
        'limits_cpu_shares' => 'int',
        'status' => 'string',
        'preview_url_template' => 'string',
        'destination_type' => 'string',
        'destination_id' => 'int',
        'source_id' => 'int',
        'private_key_id' => 'int',
        'environment_id' => 'int',
        'dockerfile' => 'string',
        'dockerfile_location' => 'string',
        'custom_labels' => 'string',
        'dockerfile_target_build' => 'string',
        'manual_webhook_secret_github' => 'string',
        'manual_webhook_secret_gitlab' => 'string',
        'manual_webhook_secret_bitbucket' => 'string',
        'manual_webhook_secret_gitea' => 'string',
        'docker_compose_location' => 'string',
        'docker_compose' => 'string',
        'docker_compose_raw' => 'string',
        'docker_compose_domains' => 'string',
        'docker_compose_custom_start_command' => 'string',
        'docker_compose_custom_build_command' => 'string',
        'swarm_replicas' => 'int',
        'swarm_placement_constraints' => 'string',
        'custom_docker_run_options' => 'string',
        'post_deployment_command' => 'string',
        'post_deployment_command_container' => 'string',
        'pre_deployment_command' => 'string',
        'pre_deployment_command_container' => 'string',
        'watch_paths' => 'string',
        'custom_healthcheck_found' => 'bool',
        'redirect' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'deleted_at' => '\DateTime',
        'compose_parsing_version' => 'string',
        'custom_nginx_configuration' => 'string',
        'is_http_basic_auth_enabled' => 'bool',
        'http_basic_auth_username' => 'string',
        'http_basic_auth_password' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'description' => null,
        'repository_project_id' => null,
        'uuid' => null,
        'name' => null,
        'fqdn' => null,
        'config_hash' => null,
        'git_repository' => null,
        'git_branch' => null,
        'git_commit_sha' => null,
        'git_full_url' => null,
        'docker_registry_image_name' => null,
        'docker_registry_image_tag' => null,
        'build_pack' => null,
        'static_image' => null,
        'install_command' => null,
        'build_command' => null,
        'start_command' => null,
        'ports_exposes' => null,
        'ports_mappings' => null,
        'custom_network_aliases' => null,
        'base_directory' => null,
        'publish_directory' => null,
        'health_check_enabled' => null,
        'health_check_path' => null,
        'health_check_port' => null,
        'health_check_host' => null,
        'health_check_method' => null,
        'health_check_return_code' => null,
        'health_check_scheme' => null,
        'health_check_response_text' => null,
        'health_check_interval' => null,
        'health_check_timeout' => null,
        'health_check_retries' => null,
        'health_check_start_period' => null,
        'limits_memory' => null,
        'limits_memory_swap' => null,
        'limits_memory_swappiness' => null,
        'limits_memory_reservation' => null,
        'limits_cpus' => null,
        'limits_cpuset' => null,
        'limits_cpu_shares' => null,
        'status' => null,
        'preview_url_template' => null,
        'destination_type' => null,
        'destination_id' => null,
        'source_id' => null,
        'private_key_id' => null,
        'environment_id' => null,
        'dockerfile' => null,
        'dockerfile_location' => null,
        'custom_labels' => null,
        'dockerfile_target_build' => null,
        'manual_webhook_secret_github' => null,
        'manual_webhook_secret_gitlab' => null,
        'manual_webhook_secret_bitbucket' => null,
        'manual_webhook_secret_gitea' => null,
        'docker_compose_location' => null,
        'docker_compose' => null,
        'docker_compose_raw' => null,
        'docker_compose_domains' => null,
        'docker_compose_custom_start_command' => null,
        'docker_compose_custom_build_command' => null,
        'swarm_replicas' => null,
        'swarm_placement_constraints' => null,
        'custom_docker_run_options' => null,
        'post_deployment_command' => null,
        'post_deployment_command_container' => null,
        'pre_deployment_command' => null,
        'pre_deployment_command_container' => null,
        'watch_paths' => null,
        'custom_healthcheck_found' => null,
        'redirect' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'deleted_at' => 'date-time',
        'compose_parsing_version' => null,
        'custom_nginx_configuration' => null,
        'is_http_basic_auth_enabled' => null,
        'http_basic_auth_username' => null,
        'http_basic_auth_password' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'description' => false,
        'repository_project_id' => false,
        'uuid' => false,
        'name' => false,
        'fqdn' => false,
        'config_hash' => false,
        'git_repository' => false,
        'git_branch' => false,
        'git_commit_sha' => false,
        'git_full_url' => false,
        'docker_registry_image_name' => false,
        'docker_registry_image_tag' => false,
        'build_pack' => false,
        'static_image' => false,
        'install_command' => false,
        'build_command' => false,
        'start_command' => false,
        'ports_exposes' => false,
        'ports_mappings' => false,
        'custom_network_aliases' => false,
        'base_directory' => false,
        'publish_directory' => false,
        'health_check_enabled' => false,
        'health_check_path' => false,
        'health_check_port' => false,
        'health_check_host' => false,
        'health_check_method' => false,
        'health_check_return_code' => false,
        'health_check_scheme' => false,
        'health_check_response_text' => false,
        'health_check_interval' => false,
        'health_check_timeout' => false,
        'health_check_retries' => false,
        'health_check_start_period' => false,
        'limits_memory' => false,
        'limits_memory_swap' => false,
        'limits_memory_swappiness' => false,
        'limits_memory_reservation' => false,
        'limits_cpus' => false,
        'limits_cpuset' => false,
        'limits_cpu_shares' => false,
        'status' => false,
        'preview_url_template' => false,
        'destination_type' => false,
        'destination_id' => false,
        'source_id' => false,
        'private_key_id' => false,
        'environment_id' => false,
        'dockerfile' => false,
        'dockerfile_location' => false,
        'custom_labels' => false,
        'dockerfile_target_build' => false,
        'manual_webhook_secret_github' => false,
        'manual_webhook_secret_gitlab' => false,
        'manual_webhook_secret_bitbucket' => false,
        'manual_webhook_secret_gitea' => false,
        'docker_compose_location' => false,
        'docker_compose' => false,
        'docker_compose_raw' => false,
        'docker_compose_domains' => false,
        'docker_compose_custom_start_command' => false,
        'docker_compose_custom_build_command' => false,
        'swarm_replicas' => false,
        'swarm_placement_constraints' => false,
        'custom_docker_run_options' => false,
        'post_deployment_command' => false,
        'post_deployment_command_container' => false,
        'pre_deployment_command' => false,
        'pre_deployment_command_container' => false,
        'watch_paths' => false,
        'custom_healthcheck_found' => false,
        'redirect' => false,
        'created_at' => false,
        'updated_at' => false,
        'deleted_at' => false,
        'compose_parsing_version' => false,
        'custom_nginx_configuration' => false,
        'is_http_basic_auth_enabled' => false,
        'http_basic_auth_username' => false,
        'http_basic_auth_password' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'description' => 'description',
        'repository_project_id' => 'repository_project_id',
        'uuid' => 'uuid',
        'name' => 'name',
        'fqdn' => 'fqdn',
        'config_hash' => 'config_hash',
        'git_repository' => 'git_repository',
        'git_branch' => 'git_branch',
        'git_commit_sha' => 'git_commit_sha',
        'git_full_url' => 'git_full_url',
        'docker_registry_image_name' => 'docker_registry_image_name',
        'docker_registry_image_tag' => 'docker_registry_image_tag',
        'build_pack' => 'build_pack',
        'static_image' => 'static_image',
        'install_command' => 'install_command',
        'build_command' => 'build_command',
        'start_command' => 'start_command',
        'ports_exposes' => 'ports_exposes',
        'ports_mappings' => 'ports_mappings',
        'custom_network_aliases' => 'custom_network_aliases',
        'base_directory' => 'base_directory',
        'publish_directory' => 'publish_directory',
        'health_check_enabled' => 'health_check_enabled',
        'health_check_path' => 'health_check_path',
        'health_check_port' => 'health_check_port',
        'health_check_host' => 'health_check_host',
        'health_check_method' => 'health_check_method',
        'health_check_return_code' => 'health_check_return_code',
        'health_check_scheme' => 'health_check_scheme',
        'health_check_response_text' => 'health_check_response_text',
        'health_check_interval' => 'health_check_interval',
        'health_check_timeout' => 'health_check_timeout',
        'health_check_retries' => 'health_check_retries',
        'health_check_start_period' => 'health_check_start_period',
        'limits_memory' => 'limits_memory',
        'limits_memory_swap' => 'limits_memory_swap',
        'limits_memory_swappiness' => 'limits_memory_swappiness',
        'limits_memory_reservation' => 'limits_memory_reservation',
        'limits_cpus' => 'limits_cpus',
        'limits_cpuset' => 'limits_cpuset',
        'limits_cpu_shares' => 'limits_cpu_shares',
        'status' => 'status',
        'preview_url_template' => 'preview_url_template',
        'destination_type' => 'destination_type',
        'destination_id' => 'destination_id',
        'source_id' => 'source_id',
        'private_key_id' => 'private_key_id',
        'environment_id' => 'environment_id',
        'dockerfile' => 'dockerfile',
        'dockerfile_location' => 'dockerfile_location',
        'custom_labels' => 'custom_labels',
        'dockerfile_target_build' => 'dockerfile_target_build',
        'manual_webhook_secret_github' => 'manual_webhook_secret_github',
        'manual_webhook_secret_gitlab' => 'manual_webhook_secret_gitlab',
        'manual_webhook_secret_bitbucket' => 'manual_webhook_secret_bitbucket',
        'manual_webhook_secret_gitea' => 'manual_webhook_secret_gitea',
        'docker_compose_location' => 'docker_compose_location',
        'docker_compose' => 'docker_compose',
        'docker_compose_raw' => 'docker_compose_raw',
        'docker_compose_domains' => 'docker_compose_domains',
        'docker_compose_custom_start_command' => 'docker_compose_custom_start_command',
        'docker_compose_custom_build_command' => 'docker_compose_custom_build_command',
        'swarm_replicas' => 'swarm_replicas',
        'swarm_placement_constraints' => 'swarm_placement_constraints',
        'custom_docker_run_options' => 'custom_docker_run_options',
        'post_deployment_command' => 'post_deployment_command',
        'post_deployment_command_container' => 'post_deployment_command_container',
        'pre_deployment_command' => 'pre_deployment_command',
        'pre_deployment_command_container' => 'pre_deployment_command_container',
        'watch_paths' => 'watch_paths',
        'custom_healthcheck_found' => 'custom_healthcheck_found',
        'redirect' => 'redirect',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'deleted_at' => 'deleted_at',
        'compose_parsing_version' => 'compose_parsing_version',
        'custom_nginx_configuration' => 'custom_nginx_configuration',
        'is_http_basic_auth_enabled' => 'is_http_basic_auth_enabled',
        'http_basic_auth_username' => 'http_basic_auth_username',
        'http_basic_auth_password' => 'http_basic_auth_password'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'description' => 'setDescription',
        'repository_project_id' => 'setRepositoryProjectId',
        'uuid' => 'setUuid',
        'name' => 'setName',
        'fqdn' => 'setFqdn',
        'config_hash' => 'setConfigHash',
        'git_repository' => 'setGitRepository',
        'git_branch' => 'setGitBranch',
        'git_commit_sha' => 'setGitCommitSha',
        'git_full_url' => 'setGitFullUrl',
        'docker_registry_image_name' => 'setDockerRegistryImageName',
        'docker_registry_image_tag' => 'setDockerRegistryImageTag',
        'build_pack' => 'setBuildPack',
        'static_image' => 'setStaticImage',
        'install_command' => 'setInstallCommand',
        'build_command' => 'setBuildCommand',
        'start_command' => 'setStartCommand',
        'ports_exposes' => 'setPortsExposes',
        'ports_mappings' => 'setPortsMappings',
        'custom_network_aliases' => 'setCustomNetworkAliases',
        'base_directory' => 'setBaseDirectory',
        'publish_directory' => 'setPublishDirectory',
        'health_check_enabled' => 'setHealthCheckEnabled',
        'health_check_path' => 'setHealthCheckPath',
        'health_check_port' => 'setHealthCheckPort',
        'health_check_host' => 'setHealthCheckHost',
        'health_check_method' => 'setHealthCheckMethod',
        'health_check_return_code' => 'setHealthCheckReturnCode',
        'health_check_scheme' => 'setHealthCheckScheme',
        'health_check_response_text' => 'setHealthCheckResponseText',
        'health_check_interval' => 'setHealthCheckInterval',
        'health_check_timeout' => 'setHealthCheckTimeout',
        'health_check_retries' => 'setHealthCheckRetries',
        'health_check_start_period' => 'setHealthCheckStartPeriod',
        'limits_memory' => 'setLimitsMemory',
        'limits_memory_swap' => 'setLimitsMemorySwap',
        'limits_memory_swappiness' => 'setLimitsMemorySwappiness',
        'limits_memory_reservation' => 'setLimitsMemoryReservation',
        'limits_cpus' => 'setLimitsCpus',
        'limits_cpuset' => 'setLimitsCpuset',
        'limits_cpu_shares' => 'setLimitsCpuShares',
        'status' => 'setStatus',
        'preview_url_template' => 'setPreviewUrlTemplate',
        'destination_type' => 'setDestinationType',
        'destination_id' => 'setDestinationId',
        'source_id' => 'setSourceId',
        'private_key_id' => 'setPrivateKeyId',
        'environment_id' => 'setEnvironmentId',
        'dockerfile' => 'setDockerfile',
        'dockerfile_location' => 'setDockerfileLocation',
        'custom_labels' => 'setCustomLabels',
        'dockerfile_target_build' => 'setDockerfileTargetBuild',
        'manual_webhook_secret_github' => 'setManualWebhookSecretGithub',
        'manual_webhook_secret_gitlab' => 'setManualWebhookSecretGitlab',
        'manual_webhook_secret_bitbucket' => 'setManualWebhookSecretBitbucket',
        'manual_webhook_secret_gitea' => 'setManualWebhookSecretGitea',
        'docker_compose_location' => 'setDockerComposeLocation',
        'docker_compose' => 'setDockerCompose',
        'docker_compose_raw' => 'setDockerComposeRaw',
        'docker_compose_domains' => 'setDockerComposeDomains',
        'docker_compose_custom_start_command' => 'setDockerComposeCustomStartCommand',
        'docker_compose_custom_build_command' => 'setDockerComposeCustomBuildCommand',
        'swarm_replicas' => 'setSwarmReplicas',
        'swarm_placement_constraints' => 'setSwarmPlacementConstraints',
        'custom_docker_run_options' => 'setCustomDockerRunOptions',
        'post_deployment_command' => 'setPostDeploymentCommand',
        'post_deployment_command_container' => 'setPostDeploymentCommandContainer',
        'pre_deployment_command' => 'setPreDeploymentCommand',
        'pre_deployment_command_container' => 'setPreDeploymentCommandContainer',
        'watch_paths' => 'setWatchPaths',
        'custom_healthcheck_found' => 'setCustomHealthcheckFound',
        'redirect' => 'setRedirect',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'deleted_at' => 'setDeletedAt',
        'compose_parsing_version' => 'setComposeParsingVersion',
        'custom_nginx_configuration' => 'setCustomNginxConfiguration',
        'is_http_basic_auth_enabled' => 'setIsHttpBasicAuthEnabled',
        'http_basic_auth_username' => 'setHttpBasicAuthUsername',
        'http_basic_auth_password' => 'setHttpBasicAuthPassword'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'description' => 'getDescription',
        'repository_project_id' => 'getRepositoryProjectId',
        'uuid' => 'getUuid',
        'name' => 'getName',
        'fqdn' => 'getFqdn',
        'config_hash' => 'getConfigHash',
        'git_repository' => 'getGitRepository',
        'git_branch' => 'getGitBranch',
        'git_commit_sha' => 'getGitCommitSha',
        'git_full_url' => 'getGitFullUrl',
        'docker_registry_image_name' => 'getDockerRegistryImageName',
        'docker_registry_image_tag' => 'getDockerRegistryImageTag',
        'build_pack' => 'getBuildPack',
        'static_image' => 'getStaticImage',
        'install_command' => 'getInstallCommand',
        'build_command' => 'getBuildCommand',
        'start_command' => 'getStartCommand',
        'ports_exposes' => 'getPortsExposes',
        'ports_mappings' => 'getPortsMappings',
        'custom_network_aliases' => 'getCustomNetworkAliases',
        'base_directory' => 'getBaseDirectory',
        'publish_directory' => 'getPublishDirectory',
        'health_check_enabled' => 'getHealthCheckEnabled',
        'health_check_path' => 'getHealthCheckPath',
        'health_check_port' => 'getHealthCheckPort',
        'health_check_host' => 'getHealthCheckHost',
        'health_check_method' => 'getHealthCheckMethod',
        'health_check_return_code' => 'getHealthCheckReturnCode',
        'health_check_scheme' => 'getHealthCheckScheme',
        'health_check_response_text' => 'getHealthCheckResponseText',
        'health_check_interval' => 'getHealthCheckInterval',
        'health_check_timeout' => 'getHealthCheckTimeout',
        'health_check_retries' => 'getHealthCheckRetries',
        'health_check_start_period' => 'getHealthCheckStartPeriod',
        'limits_memory' => 'getLimitsMemory',
        'limits_memory_swap' => 'getLimitsMemorySwap',
        'limits_memory_swappiness' => 'getLimitsMemorySwappiness',
        'limits_memory_reservation' => 'getLimitsMemoryReservation',
        'limits_cpus' => 'getLimitsCpus',
        'limits_cpuset' => 'getLimitsCpuset',
        'limits_cpu_shares' => 'getLimitsCpuShares',
        'status' => 'getStatus',
        'preview_url_template' => 'getPreviewUrlTemplate',
        'destination_type' => 'getDestinationType',
        'destination_id' => 'getDestinationId',
        'source_id' => 'getSourceId',
        'private_key_id' => 'getPrivateKeyId',
        'environment_id' => 'getEnvironmentId',
        'dockerfile' => 'getDockerfile',
        'dockerfile_location' => 'getDockerfileLocation',
        'custom_labels' => 'getCustomLabels',
        'dockerfile_target_build' => 'getDockerfileTargetBuild',
        'manual_webhook_secret_github' => 'getManualWebhookSecretGithub',
        'manual_webhook_secret_gitlab' => 'getManualWebhookSecretGitlab',
        'manual_webhook_secret_bitbucket' => 'getManualWebhookSecretBitbucket',
        'manual_webhook_secret_gitea' => 'getManualWebhookSecretGitea',
        'docker_compose_location' => 'getDockerComposeLocation',
        'docker_compose' => 'getDockerCompose',
        'docker_compose_raw' => 'getDockerComposeRaw',
        'docker_compose_domains' => 'getDockerComposeDomains',
        'docker_compose_custom_start_command' => 'getDockerComposeCustomStartCommand',
        'docker_compose_custom_build_command' => 'getDockerComposeCustomBuildCommand',
        'swarm_replicas' => 'getSwarmReplicas',
        'swarm_placement_constraints' => 'getSwarmPlacementConstraints',
        'custom_docker_run_options' => 'getCustomDockerRunOptions',
        'post_deployment_command' => 'getPostDeploymentCommand',
        'post_deployment_command_container' => 'getPostDeploymentCommandContainer',
        'pre_deployment_command' => 'getPreDeploymentCommand',
        'pre_deployment_command_container' => 'getPreDeploymentCommandContainer',
        'watch_paths' => 'getWatchPaths',
        'custom_healthcheck_found' => 'getCustomHealthcheckFound',
        'redirect' => 'getRedirect',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'deleted_at' => 'getDeletedAt',
        'compose_parsing_version' => 'getComposeParsingVersion',
        'custom_nginx_configuration' => 'getCustomNginxConfiguration',
        'is_http_basic_auth_enabled' => 'getIsHttpBasicAuthEnabled',
        'http_basic_auth_username' => 'getHttpBasicAuthUsername',
        'http_basic_auth_password' => 'getHttpBasicAuthPassword'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BUILD_PACK_NIXPACKS = 'nixpacks';
    public const BUILD_PACK__STATIC = 'static';
    public const BUILD_PACK_DOCKERFILE = 'dockerfile';
    public const BUILD_PACK_DOCKERCOMPOSE = 'dockercompose';
    public const REDIRECT_WWW = 'www';
    public const REDIRECT_NON_WWW = 'non-www';
    public const REDIRECT_BOTH = 'both';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBuildPackAllowableValues()
    {
        return [
            self::BUILD_PACK_NIXPACKS,
            self::BUILD_PACK__STATIC,
            self::BUILD_PACK_DOCKERFILE,
            self::BUILD_PACK_DOCKERCOMPOSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRedirectAllowableValues()
    {
        return [
            self::REDIRECT_WWW,
            self::REDIRECT_NON_WWW,
            self::REDIRECT_BOTH,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('repository_project_id', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('fqdn', $data ?? [], null);
        $this->setIfExists('config_hash', $data ?? [], null);
        $this->setIfExists('git_repository', $data ?? [], null);
        $this->setIfExists('git_branch', $data ?? [], null);
        $this->setIfExists('git_commit_sha', $data ?? [], null);
        $this->setIfExists('git_full_url', $data ?? [], null);
        $this->setIfExists('docker_registry_image_name', $data ?? [], null);
        $this->setIfExists('docker_registry_image_tag', $data ?? [], null);
        $this->setIfExists('build_pack', $data ?? [], null);
        $this->setIfExists('static_image', $data ?? [], null);
        $this->setIfExists('install_command', $data ?? [], null);
        $this->setIfExists('build_command', $data ?? [], null);
        $this->setIfExists('start_command', $data ?? [], null);
        $this->setIfExists('ports_exposes', $data ?? [], null);
        $this->setIfExists('ports_mappings', $data ?? [], null);
        $this->setIfExists('custom_network_aliases', $data ?? [], null);
        $this->setIfExists('base_directory', $data ?? [], null);
        $this->setIfExists('publish_directory', $data ?? [], null);
        $this->setIfExists('health_check_enabled', $data ?? [], null);
        $this->setIfExists('health_check_path', $data ?? [], null);
        $this->setIfExists('health_check_port', $data ?? [], null);
        $this->setIfExists('health_check_host', $data ?? [], null);
        $this->setIfExists('health_check_method', $data ?? [], null);
        $this->setIfExists('health_check_return_code', $data ?? [], null);
        $this->setIfExists('health_check_scheme', $data ?? [], null);
        $this->setIfExists('health_check_response_text', $data ?? [], null);
        $this->setIfExists('health_check_interval', $data ?? [], null);
        $this->setIfExists('health_check_timeout', $data ?? [], null);
        $this->setIfExists('health_check_retries', $data ?? [], null);
        $this->setIfExists('health_check_start_period', $data ?? [], null);
        $this->setIfExists('limits_memory', $data ?? [], null);
        $this->setIfExists('limits_memory_swap', $data ?? [], null);
        $this->setIfExists('limits_memory_swappiness', $data ?? [], null);
        $this->setIfExists('limits_memory_reservation', $data ?? [], null);
        $this->setIfExists('limits_cpus', $data ?? [], null);
        $this->setIfExists('limits_cpuset', $data ?? [], null);
        $this->setIfExists('limits_cpu_shares', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('preview_url_template', $data ?? [], null);
        $this->setIfExists('destination_type', $data ?? [], null);
        $this->setIfExists('destination_id', $data ?? [], null);
        $this->setIfExists('source_id', $data ?? [], null);
        $this->setIfExists('private_key_id', $data ?? [], null);
        $this->setIfExists('environment_id', $data ?? [], null);
        $this->setIfExists('dockerfile', $data ?? [], null);
        $this->setIfExists('dockerfile_location', $data ?? [], null);
        $this->setIfExists('custom_labels', $data ?? [], null);
        $this->setIfExists('dockerfile_target_build', $data ?? [], null);
        $this->setIfExists('manual_webhook_secret_github', $data ?? [], null);
        $this->setIfExists('manual_webhook_secret_gitlab', $data ?? [], null);
        $this->setIfExists('manual_webhook_secret_bitbucket', $data ?? [], null);
        $this->setIfExists('manual_webhook_secret_gitea', $data ?? [], null);
        $this->setIfExists('docker_compose_location', $data ?? [], null);
        $this->setIfExists('docker_compose', $data ?? [], null);
        $this->setIfExists('docker_compose_raw', $data ?? [], null);
        $this->setIfExists('docker_compose_domains', $data ?? [], null);
        $this->setIfExists('docker_compose_custom_start_command', $data ?? [], null);
        $this->setIfExists('docker_compose_custom_build_command', $data ?? [], null);
        $this->setIfExists('swarm_replicas', $data ?? [], null);
        $this->setIfExists('swarm_placement_constraints', $data ?? [], null);
        $this->setIfExists('custom_docker_run_options', $data ?? [], null);
        $this->setIfExists('post_deployment_command', $data ?? [], null);
        $this->setIfExists('post_deployment_command_container', $data ?? [], null);
        $this->setIfExists('pre_deployment_command', $data ?? [], null);
        $this->setIfExists('pre_deployment_command_container', $data ?? [], null);
        $this->setIfExists('watch_paths', $data ?? [], null);
        $this->setIfExists('custom_healthcheck_found', $data ?? [], null);
        $this->setIfExists('redirect', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('deleted_at', $data ?? [], null);
        $this->setIfExists('compose_parsing_version', $data ?? [], null);
        $this->setIfExists('custom_nginx_configuration', $data ?? [], null);
        $this->setIfExists('is_http_basic_auth_enabled', $data ?? [], null);
        $this->setIfExists('http_basic_auth_username', $data ?? [], null);
        $this->setIfExists('http_basic_auth_password', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBuildPackAllowableValues();
        if (!is_null($this->container['build_pack']) && !in_array($this->container['build_pack'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'build_pack', must be one of '%s'",
                $this->container['build_pack'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRedirectAllowableValues();
        if (!is_null($this->container['redirect']) && !in_array($this->container['redirect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'redirect', must be one of '%s'",
                $this->container['redirect'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The application identifier in the database.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The application description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets repository_project_id
     *
     * @return int|null
     */
    public function getRepositoryProjectId()
    {
        return $this->container['repository_project_id'];
    }

    /**
     * Sets repository_project_id
     *
     * @param int|null $repository_project_id The repository project identifier.
     *
     * @return self
     */
    public function setRepositoryProjectId($repository_project_id)
    {
        if (is_null($repository_project_id)) {
            throw new \InvalidArgumentException('non-nullable repository_project_id cannot be null');
        }
        $this->container['repository_project_id'] = $repository_project_id;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid The application UUID.
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The application name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets fqdn
     *
     * @return string|null
     */
    public function getFqdn()
    {
        return $this->container['fqdn'];
    }

    /**
     * Sets fqdn
     *
     * @param string|null $fqdn The application domains.
     *
     * @return self
     */
    public function setFqdn($fqdn)
    {
        if (is_null($fqdn)) {
            throw new \InvalidArgumentException('non-nullable fqdn cannot be null');
        }
        $this->container['fqdn'] = $fqdn;

        return $this;
    }

    /**
     * Gets config_hash
     *
     * @return string|null
     */
    public function getConfigHash()
    {
        return $this->container['config_hash'];
    }

    /**
     * Sets config_hash
     *
     * @param string|null $config_hash Configuration hash.
     *
     * @return self
     */
    public function setConfigHash($config_hash)
    {
        if (is_null($config_hash)) {
            throw new \InvalidArgumentException('non-nullable config_hash cannot be null');
        }
        $this->container['config_hash'] = $config_hash;

        return $this;
    }

    /**
     * Gets git_repository
     *
     * @return string|null
     */
    public function getGitRepository()
    {
        return $this->container['git_repository'];
    }

    /**
     * Sets git_repository
     *
     * @param string|null $git_repository Git repository URL.
     *
     * @return self
     */
    public function setGitRepository($git_repository)
    {
        if (is_null($git_repository)) {
            throw new \InvalidArgumentException('non-nullable git_repository cannot be null');
        }
        $this->container['git_repository'] = $git_repository;

        return $this;
    }

    /**
     * Gets git_branch
     *
     * @return string|null
     */
    public function getGitBranch()
    {
        return $this->container['git_branch'];
    }

    /**
     * Sets git_branch
     *
     * @param string|null $git_branch Git branch.
     *
     * @return self
     */
    public function setGitBranch($git_branch)
    {
        if (is_null($git_branch)) {
            throw new \InvalidArgumentException('non-nullable git_branch cannot be null');
        }
        $this->container['git_branch'] = $git_branch;

        return $this;
    }

    /**
     * Gets git_commit_sha
     *
     * @return string|null
     */
    public function getGitCommitSha()
    {
        return $this->container['git_commit_sha'];
    }

    /**
     * Sets git_commit_sha
     *
     * @param string|null $git_commit_sha Git commit SHA.
     *
     * @return self
     */
    public function setGitCommitSha($git_commit_sha)
    {
        if (is_null($git_commit_sha)) {
            throw new \InvalidArgumentException('non-nullable git_commit_sha cannot be null');
        }
        $this->container['git_commit_sha'] = $git_commit_sha;

        return $this;
    }

    /**
     * Gets git_full_url
     *
     * @return string|null
     */
    public function getGitFullUrl()
    {
        return $this->container['git_full_url'];
    }

    /**
     * Sets git_full_url
     *
     * @param string|null $git_full_url Git full URL.
     *
     * @return self
     */
    public function setGitFullUrl($git_full_url)
    {
        if (is_null($git_full_url)) {
            throw new \InvalidArgumentException('non-nullable git_full_url cannot be null');
        }
        $this->container['git_full_url'] = $git_full_url;

        return $this;
    }

    /**
     * Gets docker_registry_image_name
     *
     * @return string|null
     */
    public function getDockerRegistryImageName()
    {
        return $this->container['docker_registry_image_name'];
    }

    /**
     * Sets docker_registry_image_name
     *
     * @param string|null $docker_registry_image_name Docker registry image name.
     *
     * @return self
     */
    public function setDockerRegistryImageName($docker_registry_image_name)
    {
        if (is_null($docker_registry_image_name)) {
            throw new \InvalidArgumentException('non-nullable docker_registry_image_name cannot be null');
        }
        $this->container['docker_registry_image_name'] = $docker_registry_image_name;

        return $this;
    }

    /**
     * Gets docker_registry_image_tag
     *
     * @return string|null
     */
    public function getDockerRegistryImageTag()
    {
        return $this->container['docker_registry_image_tag'];
    }

    /**
     * Sets docker_registry_image_tag
     *
     * @param string|null $docker_registry_image_tag Docker registry image tag.
     *
     * @return self
     */
    public function setDockerRegistryImageTag($docker_registry_image_tag)
    {
        if (is_null($docker_registry_image_tag)) {
            throw new \InvalidArgumentException('non-nullable docker_registry_image_tag cannot be null');
        }
        $this->container['docker_registry_image_tag'] = $docker_registry_image_tag;

        return $this;
    }

    /**
     * Gets build_pack
     *
     * @return string|null
     */
    public function getBuildPack()
    {
        return $this->container['build_pack'];
    }

    /**
     * Sets build_pack
     *
     * @param string|null $build_pack Build pack.
     *
     * @return self
     */
    public function setBuildPack($build_pack)
    {
        if (is_null($build_pack)) {
            throw new \InvalidArgumentException('non-nullable build_pack cannot be null');
        }
        $allowedValues = $this->getBuildPackAllowableValues();
        if (!in_array($build_pack, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'build_pack', must be one of '%s'",
                    $build_pack,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['build_pack'] = $build_pack;

        return $this;
    }

    /**
     * Gets static_image
     *
     * @return string|null
     */
    public function getStaticImage()
    {
        return $this->container['static_image'];
    }

    /**
     * Sets static_image
     *
     * @param string|null $static_image Static image used when static site is deployed.
     *
     * @return self
     */
    public function setStaticImage($static_image)
    {
        if (is_null($static_image)) {
            throw new \InvalidArgumentException('non-nullable static_image cannot be null');
        }
        $this->container['static_image'] = $static_image;

        return $this;
    }

    /**
     * Gets install_command
     *
     * @return string|null
     */
    public function getInstallCommand()
    {
        return $this->container['install_command'];
    }

    /**
     * Sets install_command
     *
     * @param string|null $install_command Install command.
     *
     * @return self
     */
    public function setInstallCommand($install_command)
    {
        if (is_null($install_command)) {
            throw new \InvalidArgumentException('non-nullable install_command cannot be null');
        }
        $this->container['install_command'] = $install_command;

        return $this;
    }

    /**
     * Gets build_command
     *
     * @return string|null
     */
    public function getBuildCommand()
    {
        return $this->container['build_command'];
    }

    /**
     * Sets build_command
     *
     * @param string|null $build_command Build command.
     *
     * @return self
     */
    public function setBuildCommand($build_command)
    {
        if (is_null($build_command)) {
            throw new \InvalidArgumentException('non-nullable build_command cannot be null');
        }
        $this->container['build_command'] = $build_command;

        return $this;
    }

    /**
     * Gets start_command
     *
     * @return string|null
     */
    public function getStartCommand()
    {
        return $this->container['start_command'];
    }

    /**
     * Sets start_command
     *
     * @param string|null $start_command Start command.
     *
     * @return self
     */
    public function setStartCommand($start_command)
    {
        if (is_null($start_command)) {
            throw new \InvalidArgumentException('non-nullable start_command cannot be null');
        }
        $this->container['start_command'] = $start_command;

        return $this;
    }

    /**
     * Gets ports_exposes
     *
     * @return string|null
     */
    public function getPortsExposes()
    {
        return $this->container['ports_exposes'];
    }

    /**
     * Sets ports_exposes
     *
     * @param string|null $ports_exposes Ports exposes.
     *
     * @return self
     */
    public function setPortsExposes($ports_exposes)
    {
        if (is_null($ports_exposes)) {
            throw new \InvalidArgumentException('non-nullable ports_exposes cannot be null');
        }
        $this->container['ports_exposes'] = $ports_exposes;

        return $this;
    }

    /**
     * Gets ports_mappings
     *
     * @return string|null
     */
    public function getPortsMappings()
    {
        return $this->container['ports_mappings'];
    }

    /**
     * Sets ports_mappings
     *
     * @param string|null $ports_mappings Ports mappings.
     *
     * @return self
     */
    public function setPortsMappings($ports_mappings)
    {
        if (is_null($ports_mappings)) {
            throw new \InvalidArgumentException('non-nullable ports_mappings cannot be null');
        }
        $this->container['ports_mappings'] = $ports_mappings;

        return $this;
    }

    /**
     * Gets custom_network_aliases
     *
     * @return string|null
     */
    public function getCustomNetworkAliases()
    {
        return $this->container['custom_network_aliases'];
    }

    /**
     * Sets custom_network_aliases
     *
     * @param string|null $custom_network_aliases Network aliases for Docker container.
     *
     * @return self
     */
    public function setCustomNetworkAliases($custom_network_aliases)
    {
        if (is_null($custom_network_aliases)) {
            throw new \InvalidArgumentException('non-nullable custom_network_aliases cannot be null');
        }
        $this->container['custom_network_aliases'] = $custom_network_aliases;

        return $this;
    }

    /**
     * Gets base_directory
     *
     * @return string|null
     */
    public function getBaseDirectory()
    {
        return $this->container['base_directory'];
    }

    /**
     * Sets base_directory
     *
     * @param string|null $base_directory Base directory for all commands.
     *
     * @return self
     */
    public function setBaseDirectory($base_directory)
    {
        if (is_null($base_directory)) {
            throw new \InvalidArgumentException('non-nullable base_directory cannot be null');
        }
        $this->container['base_directory'] = $base_directory;

        return $this;
    }

    /**
     * Gets publish_directory
     *
     * @return string|null
     */
    public function getPublishDirectory()
    {
        return $this->container['publish_directory'];
    }

    /**
     * Sets publish_directory
     *
     * @param string|null $publish_directory Publish directory.
     *
     * @return self
     */
    public function setPublishDirectory($publish_directory)
    {
        if (is_null($publish_directory)) {
            throw new \InvalidArgumentException('non-nullable publish_directory cannot be null');
        }
        $this->container['publish_directory'] = $publish_directory;

        return $this;
    }

    /**
     * Gets health_check_enabled
     *
     * @return bool|null
     */
    public function getHealthCheckEnabled()
    {
        return $this->container['health_check_enabled'];
    }

    /**
     * Sets health_check_enabled
     *
     * @param bool|null $health_check_enabled Health check enabled.
     *
     * @return self
     */
    public function setHealthCheckEnabled($health_check_enabled)
    {
        if (is_null($health_check_enabled)) {
            throw new \InvalidArgumentException('non-nullable health_check_enabled cannot be null');
        }
        $this->container['health_check_enabled'] = $health_check_enabled;

        return $this;
    }

    /**
     * Gets health_check_path
     *
     * @return string|null
     */
    public function getHealthCheckPath()
    {
        return $this->container['health_check_path'];
    }

    /**
     * Sets health_check_path
     *
     * @param string|null $health_check_path Health check path.
     *
     * @return self
     */
    public function setHealthCheckPath($health_check_path)
    {
        if (is_null($health_check_path)) {
            throw new \InvalidArgumentException('non-nullable health_check_path cannot be null');
        }
        $this->container['health_check_path'] = $health_check_path;

        return $this;
    }

    /**
     * Gets health_check_port
     *
     * @return string|null
     */
    public function getHealthCheckPort()
    {
        return $this->container['health_check_port'];
    }

    /**
     * Sets health_check_port
     *
     * @param string|null $health_check_port Health check port.
     *
     * @return self
     */
    public function setHealthCheckPort($health_check_port)
    {
        if (is_null($health_check_port)) {
            throw new \InvalidArgumentException('non-nullable health_check_port cannot be null');
        }
        $this->container['health_check_port'] = $health_check_port;

        return $this;
    }

    /**
     * Gets health_check_host
     *
     * @return string|null
     */
    public function getHealthCheckHost()
    {
        return $this->container['health_check_host'];
    }

    /**
     * Sets health_check_host
     *
     * @param string|null $health_check_host Health check host.
     *
     * @return self
     */
    public function setHealthCheckHost($health_check_host)
    {
        if (is_null($health_check_host)) {
            throw new \InvalidArgumentException('non-nullable health_check_host cannot be null');
        }
        $this->container['health_check_host'] = $health_check_host;

        return $this;
    }

    /**
     * Gets health_check_method
     *
     * @return string|null
     */
    public function getHealthCheckMethod()
    {
        return $this->container['health_check_method'];
    }

    /**
     * Sets health_check_method
     *
     * @param string|null $health_check_method Health check method.
     *
     * @return self
     */
    public function setHealthCheckMethod($health_check_method)
    {
        if (is_null($health_check_method)) {
            throw new \InvalidArgumentException('non-nullable health_check_method cannot be null');
        }
        $this->container['health_check_method'] = $health_check_method;

        return $this;
    }

    /**
     * Gets health_check_return_code
     *
     * @return int|null
     */
    public function getHealthCheckReturnCode()
    {
        return $this->container['health_check_return_code'];
    }

    /**
     * Sets health_check_return_code
     *
     * @param int|null $health_check_return_code Health check return code.
     *
     * @return self
     */
    public function setHealthCheckReturnCode($health_check_return_code)
    {
        if (is_null($health_check_return_code)) {
            throw new \InvalidArgumentException('non-nullable health_check_return_code cannot be null');
        }
        $this->container['health_check_return_code'] = $health_check_return_code;

        return $this;
    }

    /**
     * Gets health_check_scheme
     *
     * @return string|null
     */
    public function getHealthCheckScheme()
    {
        return $this->container['health_check_scheme'];
    }

    /**
     * Sets health_check_scheme
     *
     * @param string|null $health_check_scheme Health check scheme.
     *
     * @return self
     */
    public function setHealthCheckScheme($health_check_scheme)
    {
        if (is_null($health_check_scheme)) {
            throw new \InvalidArgumentException('non-nullable health_check_scheme cannot be null');
        }
        $this->container['health_check_scheme'] = $health_check_scheme;

        return $this;
    }

    /**
     * Gets health_check_response_text
     *
     * @return string|null
     */
    public function getHealthCheckResponseText()
    {
        return $this->container['health_check_response_text'];
    }

    /**
     * Sets health_check_response_text
     *
     * @param string|null $health_check_response_text Health check response text.
     *
     * @return self
     */
    public function setHealthCheckResponseText($health_check_response_text)
    {
        if (is_null($health_check_response_text)) {
            throw new \InvalidArgumentException('non-nullable health_check_response_text cannot be null');
        }
        $this->container['health_check_response_text'] = $health_check_response_text;

        return $this;
    }

    /**
     * Gets health_check_interval
     *
     * @return int|null
     */
    public function getHealthCheckInterval()
    {
        return $this->container['health_check_interval'];
    }

    /**
     * Sets health_check_interval
     *
     * @param int|null $health_check_interval Health check interval in seconds.
     *
     * @return self
     */
    public function setHealthCheckInterval($health_check_interval)
    {
        if (is_null($health_check_interval)) {
            throw new \InvalidArgumentException('non-nullable health_check_interval cannot be null');
        }
        $this->container['health_check_interval'] = $health_check_interval;

        return $this;
    }

    /**
     * Gets health_check_timeout
     *
     * @return int|null
     */
    public function getHealthCheckTimeout()
    {
        return $this->container['health_check_timeout'];
    }

    /**
     * Sets health_check_timeout
     *
     * @param int|null $health_check_timeout Health check timeout in seconds.
     *
     * @return self
     */
    public function setHealthCheckTimeout($health_check_timeout)
    {
        if (is_null($health_check_timeout)) {
            throw new \InvalidArgumentException('non-nullable health_check_timeout cannot be null');
        }
        $this->container['health_check_timeout'] = $health_check_timeout;

        return $this;
    }

    /**
     * Gets health_check_retries
     *
     * @return int|null
     */
    public function getHealthCheckRetries()
    {
        return $this->container['health_check_retries'];
    }

    /**
     * Sets health_check_retries
     *
     * @param int|null $health_check_retries Health check retries count.
     *
     * @return self
     */
    public function setHealthCheckRetries($health_check_retries)
    {
        if (is_null($health_check_retries)) {
            throw new \InvalidArgumentException('non-nullable health_check_retries cannot be null');
        }
        $this->container['health_check_retries'] = $health_check_retries;

        return $this;
    }

    /**
     * Gets health_check_start_period
     *
     * @return int|null
     */
    public function getHealthCheckStartPeriod()
    {
        return $this->container['health_check_start_period'];
    }

    /**
     * Sets health_check_start_period
     *
     * @param int|null $health_check_start_period Health check start period in seconds.
     *
     * @return self
     */
    public function setHealthCheckStartPeriod($health_check_start_period)
    {
        if (is_null($health_check_start_period)) {
            throw new \InvalidArgumentException('non-nullable health_check_start_period cannot be null');
        }
        $this->container['health_check_start_period'] = $health_check_start_period;

        return $this;
    }

    /**
     * Gets limits_memory
     *
     * @return string|null
     */
    public function getLimitsMemory()
    {
        return $this->container['limits_memory'];
    }

    /**
     * Sets limits_memory
     *
     * @param string|null $limits_memory Memory limit.
     *
     * @return self
     */
    public function setLimitsMemory($limits_memory)
    {
        if (is_null($limits_memory)) {
            throw new \InvalidArgumentException('non-nullable limits_memory cannot be null');
        }
        $this->container['limits_memory'] = $limits_memory;

        return $this;
    }

    /**
     * Gets limits_memory_swap
     *
     * @return string|null
     */
    public function getLimitsMemorySwap()
    {
        return $this->container['limits_memory_swap'];
    }

    /**
     * Sets limits_memory_swap
     *
     * @param string|null $limits_memory_swap Memory swap limit.
     *
     * @return self
     */
    public function setLimitsMemorySwap($limits_memory_swap)
    {
        if (is_null($limits_memory_swap)) {
            throw new \InvalidArgumentException('non-nullable limits_memory_swap cannot be null');
        }
        $this->container['limits_memory_swap'] = $limits_memory_swap;

        return $this;
    }

    /**
     * Gets limits_memory_swappiness
     *
     * @return int|null
     */
    public function getLimitsMemorySwappiness()
    {
        return $this->container['limits_memory_swappiness'];
    }

    /**
     * Sets limits_memory_swappiness
     *
     * @param int|null $limits_memory_swappiness Memory swappiness.
     *
     * @return self
     */
    public function setLimitsMemorySwappiness($limits_memory_swappiness)
    {
        if (is_null($limits_memory_swappiness)) {
            throw new \InvalidArgumentException('non-nullable limits_memory_swappiness cannot be null');
        }
        $this->container['limits_memory_swappiness'] = $limits_memory_swappiness;

        return $this;
    }

    /**
     * Gets limits_memory_reservation
     *
     * @return string|null
     */
    public function getLimitsMemoryReservation()
    {
        return $this->container['limits_memory_reservation'];
    }

    /**
     * Sets limits_memory_reservation
     *
     * @param string|null $limits_memory_reservation Memory reservation.
     *
     * @return self
     */
    public function setLimitsMemoryReservation($limits_memory_reservation)
    {
        if (is_null($limits_memory_reservation)) {
            throw new \InvalidArgumentException('non-nullable limits_memory_reservation cannot be null');
        }
        $this->container['limits_memory_reservation'] = $limits_memory_reservation;

        return $this;
    }

    /**
     * Gets limits_cpus
     *
     * @return string|null
     */
    public function getLimitsCpus()
    {
        return $this->container['limits_cpus'];
    }

    /**
     * Sets limits_cpus
     *
     * @param string|null $limits_cpus CPU limit.
     *
     * @return self
     */
    public function setLimitsCpus($limits_cpus)
    {
        if (is_null($limits_cpus)) {
            throw new \InvalidArgumentException('non-nullable limits_cpus cannot be null');
        }
        $this->container['limits_cpus'] = $limits_cpus;

        return $this;
    }

    /**
     * Gets limits_cpuset
     *
     * @return string|null
     */
    public function getLimitsCpuset()
    {
        return $this->container['limits_cpuset'];
    }

    /**
     * Sets limits_cpuset
     *
     * @param string|null $limits_cpuset CPU set.
     *
     * @return self
     */
    public function setLimitsCpuset($limits_cpuset)
    {
        if (is_null($limits_cpuset)) {
            throw new \InvalidArgumentException('non-nullable limits_cpuset cannot be null');
        }
        $this->container['limits_cpuset'] = $limits_cpuset;

        return $this;
    }

    /**
     * Gets limits_cpu_shares
     *
     * @return int|null
     */
    public function getLimitsCpuShares()
    {
        return $this->container['limits_cpu_shares'];
    }

    /**
     * Sets limits_cpu_shares
     *
     * @param int|null $limits_cpu_shares CPU shares.
     *
     * @return self
     */
    public function setLimitsCpuShares($limits_cpu_shares)
    {
        if (is_null($limits_cpu_shares)) {
            throw new \InvalidArgumentException('non-nullable limits_cpu_shares cannot be null');
        }
        $this->container['limits_cpu_shares'] = $limits_cpu_shares;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Application status.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets preview_url_template
     *
     * @return string|null
     */
    public function getPreviewUrlTemplate()
    {
        return $this->container['preview_url_template'];
    }

    /**
     * Sets preview_url_template
     *
     * @param string|null $preview_url_template Preview URL template.
     *
     * @return self
     */
    public function setPreviewUrlTemplate($preview_url_template)
    {
        if (is_null($preview_url_template)) {
            throw new \InvalidArgumentException('non-nullable preview_url_template cannot be null');
        }
        $this->container['preview_url_template'] = $preview_url_template;

        return $this;
    }

    /**
     * Gets destination_type
     *
     * @return string|null
     */
    public function getDestinationType()
    {
        return $this->container['destination_type'];
    }

    /**
     * Sets destination_type
     *
     * @param string|null $destination_type Destination type.
     *
     * @return self
     */
    public function setDestinationType($destination_type)
    {
        if (is_null($destination_type)) {
            throw new \InvalidArgumentException('non-nullable destination_type cannot be null');
        }
        $this->container['destination_type'] = $destination_type;

        return $this;
    }

    /**
     * Gets destination_id
     *
     * @return int|null
     */
    public function getDestinationId()
    {
        return $this->container['destination_id'];
    }

    /**
     * Sets destination_id
     *
     * @param int|null $destination_id Destination identifier.
     *
     * @return self
     */
    public function setDestinationId($destination_id)
    {
        if (is_null($destination_id)) {
            throw new \InvalidArgumentException('non-nullable destination_id cannot be null');
        }
        $this->container['destination_id'] = $destination_id;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return int|null
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param int|null $source_id Source identifier.
     *
     * @return self
     */
    public function setSourceId($source_id)
    {
        if (is_null($source_id)) {
            throw new \InvalidArgumentException('non-nullable source_id cannot be null');
        }
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets private_key_id
     *
     * @return int|null
     */
    public function getPrivateKeyId()
    {
        return $this->container['private_key_id'];
    }

    /**
     * Sets private_key_id
     *
     * @param int|null $private_key_id Private key identifier.
     *
     * @return self
     */
    public function setPrivateKeyId($private_key_id)
    {
        if (is_null($private_key_id)) {
            throw new \InvalidArgumentException('non-nullable private_key_id cannot be null');
        }
        $this->container['private_key_id'] = $private_key_id;

        return $this;
    }

    /**
     * Gets environment_id
     *
     * @return int|null
     */
    public function getEnvironmentId()
    {
        return $this->container['environment_id'];
    }

    /**
     * Sets environment_id
     *
     * @param int|null $environment_id Environment identifier.
     *
     * @return self
     */
    public function setEnvironmentId($environment_id)
    {
        if (is_null($environment_id)) {
            throw new \InvalidArgumentException('non-nullable environment_id cannot be null');
        }
        $this->container['environment_id'] = $environment_id;

        return $this;
    }

    /**
     * Gets dockerfile
     *
     * @return string|null
     */
    public function getDockerfile()
    {
        return $this->container['dockerfile'];
    }

    /**
     * Sets dockerfile
     *
     * @param string|null $dockerfile Dockerfile content. Used for dockerfile build pack.
     *
     * @return self
     */
    public function setDockerfile($dockerfile)
    {
        if (is_null($dockerfile)) {
            throw new \InvalidArgumentException('non-nullable dockerfile cannot be null');
        }
        $this->container['dockerfile'] = $dockerfile;

        return $this;
    }

    /**
     * Gets dockerfile_location
     *
     * @return string|null
     */
    public function getDockerfileLocation()
    {
        return $this->container['dockerfile_location'];
    }

    /**
     * Sets dockerfile_location
     *
     * @param string|null $dockerfile_location Dockerfile location.
     *
     * @return self
     */
    public function setDockerfileLocation($dockerfile_location)
    {
        if (is_null($dockerfile_location)) {
            throw new \InvalidArgumentException('non-nullable dockerfile_location cannot be null');
        }
        $this->container['dockerfile_location'] = $dockerfile_location;

        return $this;
    }

    /**
     * Gets custom_labels
     *
     * @return string|null
     */
    public function getCustomLabels()
    {
        return $this->container['custom_labels'];
    }

    /**
     * Sets custom_labels
     *
     * @param string|null $custom_labels Custom labels.
     *
     * @return self
     */
    public function setCustomLabels($custom_labels)
    {
        if (is_null($custom_labels)) {
            throw new \InvalidArgumentException('non-nullable custom_labels cannot be null');
        }
        $this->container['custom_labels'] = $custom_labels;

        return $this;
    }

    /**
     * Gets dockerfile_target_build
     *
     * @return string|null
     */
    public function getDockerfileTargetBuild()
    {
        return $this->container['dockerfile_target_build'];
    }

    /**
     * Sets dockerfile_target_build
     *
     * @param string|null $dockerfile_target_build Dockerfile target build.
     *
     * @return self
     */
    public function setDockerfileTargetBuild($dockerfile_target_build)
    {
        if (is_null($dockerfile_target_build)) {
            throw new \InvalidArgumentException('non-nullable dockerfile_target_build cannot be null');
        }
        $this->container['dockerfile_target_build'] = $dockerfile_target_build;

        return $this;
    }

    /**
     * Gets manual_webhook_secret_github
     *
     * @return string|null
     */
    public function getManualWebhookSecretGithub()
    {
        return $this->container['manual_webhook_secret_github'];
    }

    /**
     * Sets manual_webhook_secret_github
     *
     * @param string|null $manual_webhook_secret_github Manual webhook secret for GitHub.
     *
     * @return self
     */
    public function setManualWebhookSecretGithub($manual_webhook_secret_github)
    {
        if (is_null($manual_webhook_secret_github)) {
            throw new \InvalidArgumentException('non-nullable manual_webhook_secret_github cannot be null');
        }
        $this->container['manual_webhook_secret_github'] = $manual_webhook_secret_github;

        return $this;
    }

    /**
     * Gets manual_webhook_secret_gitlab
     *
     * @return string|null
     */
    public function getManualWebhookSecretGitlab()
    {
        return $this->container['manual_webhook_secret_gitlab'];
    }

    /**
     * Sets manual_webhook_secret_gitlab
     *
     * @param string|null $manual_webhook_secret_gitlab Manual webhook secret for GitLab.
     *
     * @return self
     */
    public function setManualWebhookSecretGitlab($manual_webhook_secret_gitlab)
    {
        if (is_null($manual_webhook_secret_gitlab)) {
            throw new \InvalidArgumentException('non-nullable manual_webhook_secret_gitlab cannot be null');
        }
        $this->container['manual_webhook_secret_gitlab'] = $manual_webhook_secret_gitlab;

        return $this;
    }

    /**
     * Gets manual_webhook_secret_bitbucket
     *
     * @return string|null
     */
    public function getManualWebhookSecretBitbucket()
    {
        return $this->container['manual_webhook_secret_bitbucket'];
    }

    /**
     * Sets manual_webhook_secret_bitbucket
     *
     * @param string|null $manual_webhook_secret_bitbucket Manual webhook secret for Bitbucket.
     *
     * @return self
     */
    public function setManualWebhookSecretBitbucket($manual_webhook_secret_bitbucket)
    {
        if (is_null($manual_webhook_secret_bitbucket)) {
            throw new \InvalidArgumentException('non-nullable manual_webhook_secret_bitbucket cannot be null');
        }
        $this->container['manual_webhook_secret_bitbucket'] = $manual_webhook_secret_bitbucket;

        return $this;
    }

    /**
     * Gets manual_webhook_secret_gitea
     *
     * @return string|null
     */
    public function getManualWebhookSecretGitea()
    {
        return $this->container['manual_webhook_secret_gitea'];
    }

    /**
     * Sets manual_webhook_secret_gitea
     *
     * @param string|null $manual_webhook_secret_gitea Manual webhook secret for Gitea.
     *
     * @return self
     */
    public function setManualWebhookSecretGitea($manual_webhook_secret_gitea)
    {
        if (is_null($manual_webhook_secret_gitea)) {
            throw new \InvalidArgumentException('non-nullable manual_webhook_secret_gitea cannot be null');
        }
        $this->container['manual_webhook_secret_gitea'] = $manual_webhook_secret_gitea;

        return $this;
    }

    /**
     * Gets docker_compose_location
     *
     * @return string|null
     */
    public function getDockerComposeLocation()
    {
        return $this->container['docker_compose_location'];
    }

    /**
     * Sets docker_compose_location
     *
     * @param string|null $docker_compose_location Docker compose location.
     *
     * @return self
     */
    public function setDockerComposeLocation($docker_compose_location)
    {
        if (is_null($docker_compose_location)) {
            throw new \InvalidArgumentException('non-nullable docker_compose_location cannot be null');
        }
        $this->container['docker_compose_location'] = $docker_compose_location;

        return $this;
    }

    /**
     * Gets docker_compose
     *
     * @return string|null
     */
    public function getDockerCompose()
    {
        return $this->container['docker_compose'];
    }

    /**
     * Sets docker_compose
     *
     * @param string|null $docker_compose Docker compose content. Used for docker compose build pack.
     *
     * @return self
     */
    public function setDockerCompose($docker_compose)
    {
        if (is_null($docker_compose)) {
            throw new \InvalidArgumentException('non-nullable docker_compose cannot be null');
        }
        $this->container['docker_compose'] = $docker_compose;

        return $this;
    }

    /**
     * Gets docker_compose_raw
     *
     * @return string|null
     */
    public function getDockerComposeRaw()
    {
        return $this->container['docker_compose_raw'];
    }

    /**
     * Sets docker_compose_raw
     *
     * @param string|null $docker_compose_raw Docker compose raw content.
     *
     * @return self
     */
    public function setDockerComposeRaw($docker_compose_raw)
    {
        if (is_null($docker_compose_raw)) {
            throw new \InvalidArgumentException('non-nullable docker_compose_raw cannot be null');
        }
        $this->container['docker_compose_raw'] = $docker_compose_raw;

        return $this;
    }

    /**
     * Gets docker_compose_domains
     *
     * @return string|null
     */
    public function getDockerComposeDomains()
    {
        return $this->container['docker_compose_domains'];
    }

    /**
     * Sets docker_compose_domains
     *
     * @param string|null $docker_compose_domains Docker compose domains.
     *
     * @return self
     */
    public function setDockerComposeDomains($docker_compose_domains)
    {
        if (is_null($docker_compose_domains)) {
            throw new \InvalidArgumentException('non-nullable docker_compose_domains cannot be null');
        }
        $this->container['docker_compose_domains'] = $docker_compose_domains;

        return $this;
    }

    /**
     * Gets docker_compose_custom_start_command
     *
     * @return string|null
     */
    public function getDockerComposeCustomStartCommand()
    {
        return $this->container['docker_compose_custom_start_command'];
    }

    /**
     * Sets docker_compose_custom_start_command
     *
     * @param string|null $docker_compose_custom_start_command Docker compose custom start command.
     *
     * @return self
     */
    public function setDockerComposeCustomStartCommand($docker_compose_custom_start_command)
    {
        if (is_null($docker_compose_custom_start_command)) {
            throw new \InvalidArgumentException('non-nullable docker_compose_custom_start_command cannot be null');
        }
        $this->container['docker_compose_custom_start_command'] = $docker_compose_custom_start_command;

        return $this;
    }

    /**
     * Gets docker_compose_custom_build_command
     *
     * @return string|null
     */
    public function getDockerComposeCustomBuildCommand()
    {
        return $this->container['docker_compose_custom_build_command'];
    }

    /**
     * Sets docker_compose_custom_build_command
     *
     * @param string|null $docker_compose_custom_build_command Docker compose custom build command.
     *
     * @return self
     */
    public function setDockerComposeCustomBuildCommand($docker_compose_custom_build_command)
    {
        if (is_null($docker_compose_custom_build_command)) {
            throw new \InvalidArgumentException('non-nullable docker_compose_custom_build_command cannot be null');
        }
        $this->container['docker_compose_custom_build_command'] = $docker_compose_custom_build_command;

        return $this;
    }

    /**
     * Gets swarm_replicas
     *
     * @return int|null
     */
    public function getSwarmReplicas()
    {
        return $this->container['swarm_replicas'];
    }

    /**
     * Sets swarm_replicas
     *
     * @param int|null $swarm_replicas Swarm replicas. Only used for swarm deployments.
     *
     * @return self
     */
    public function setSwarmReplicas($swarm_replicas)
    {
        if (is_null($swarm_replicas)) {
            throw new \InvalidArgumentException('non-nullable swarm_replicas cannot be null');
        }
        $this->container['swarm_replicas'] = $swarm_replicas;

        return $this;
    }

    /**
     * Gets swarm_placement_constraints
     *
     * @return string|null
     */
    public function getSwarmPlacementConstraints()
    {
        return $this->container['swarm_placement_constraints'];
    }

    /**
     * Sets swarm_placement_constraints
     *
     * @param string|null $swarm_placement_constraints Swarm placement constraints. Only used for swarm deployments.
     *
     * @return self
     */
    public function setSwarmPlacementConstraints($swarm_placement_constraints)
    {
        if (is_null($swarm_placement_constraints)) {
            throw new \InvalidArgumentException('non-nullable swarm_placement_constraints cannot be null');
        }
        $this->container['swarm_placement_constraints'] = $swarm_placement_constraints;

        return $this;
    }

    /**
     * Gets custom_docker_run_options
     *
     * @return string|null
     */
    public function getCustomDockerRunOptions()
    {
        return $this->container['custom_docker_run_options'];
    }

    /**
     * Sets custom_docker_run_options
     *
     * @param string|null $custom_docker_run_options Custom docker run options.
     *
     * @return self
     */
    public function setCustomDockerRunOptions($custom_docker_run_options)
    {
        if (is_null($custom_docker_run_options)) {
            throw new \InvalidArgumentException('non-nullable custom_docker_run_options cannot be null');
        }
        $this->container['custom_docker_run_options'] = $custom_docker_run_options;

        return $this;
    }

    /**
     * Gets post_deployment_command
     *
     * @return string|null
     */
    public function getPostDeploymentCommand()
    {
        return $this->container['post_deployment_command'];
    }

    /**
     * Sets post_deployment_command
     *
     * @param string|null $post_deployment_command Post deployment command.
     *
     * @return self
     */
    public function setPostDeploymentCommand($post_deployment_command)
    {
        if (is_null($post_deployment_command)) {
            throw new \InvalidArgumentException('non-nullable post_deployment_command cannot be null');
        }
        $this->container['post_deployment_command'] = $post_deployment_command;

        return $this;
    }

    /**
     * Gets post_deployment_command_container
     *
     * @return string|null
     */
    public function getPostDeploymentCommandContainer()
    {
        return $this->container['post_deployment_command_container'];
    }

    /**
     * Sets post_deployment_command_container
     *
     * @param string|null $post_deployment_command_container Post deployment command container.
     *
     * @return self
     */
    public function setPostDeploymentCommandContainer($post_deployment_command_container)
    {
        if (is_null($post_deployment_command_container)) {
            throw new \InvalidArgumentException('non-nullable post_deployment_command_container cannot be null');
        }
        $this->container['post_deployment_command_container'] = $post_deployment_command_container;

        return $this;
    }

    /**
     * Gets pre_deployment_command
     *
     * @return string|null
     */
    public function getPreDeploymentCommand()
    {
        return $this->container['pre_deployment_command'];
    }

    /**
     * Sets pre_deployment_command
     *
     * @param string|null $pre_deployment_command Pre deployment command.
     *
     * @return self
     */
    public function setPreDeploymentCommand($pre_deployment_command)
    {
        if (is_null($pre_deployment_command)) {
            throw new \InvalidArgumentException('non-nullable pre_deployment_command cannot be null');
        }
        $this->container['pre_deployment_command'] = $pre_deployment_command;

        return $this;
    }

    /**
     * Gets pre_deployment_command_container
     *
     * @return string|null
     */
    public function getPreDeploymentCommandContainer()
    {
        return $this->container['pre_deployment_command_container'];
    }

    /**
     * Sets pre_deployment_command_container
     *
     * @param string|null $pre_deployment_command_container Pre deployment command container.
     *
     * @return self
     */
    public function setPreDeploymentCommandContainer($pre_deployment_command_container)
    {
        if (is_null($pre_deployment_command_container)) {
            throw new \InvalidArgumentException('non-nullable pre_deployment_command_container cannot be null');
        }
        $this->container['pre_deployment_command_container'] = $pre_deployment_command_container;

        return $this;
    }

    /**
     * Gets watch_paths
     *
     * @return string|null
     */
    public function getWatchPaths()
    {
        return $this->container['watch_paths'];
    }

    /**
     * Sets watch_paths
     *
     * @param string|null $watch_paths Watch paths.
     *
     * @return self
     */
    public function setWatchPaths($watch_paths)
    {
        if (is_null($watch_paths)) {
            throw new \InvalidArgumentException('non-nullable watch_paths cannot be null');
        }
        $this->container['watch_paths'] = $watch_paths;

        return $this;
    }

    /**
     * Gets custom_healthcheck_found
     *
     * @return bool|null
     */
    public function getCustomHealthcheckFound()
    {
        return $this->container['custom_healthcheck_found'];
    }

    /**
     * Sets custom_healthcheck_found
     *
     * @param bool|null $custom_healthcheck_found Custom healthcheck found.
     *
     * @return self
     */
    public function setCustomHealthcheckFound($custom_healthcheck_found)
    {
        if (is_null($custom_healthcheck_found)) {
            throw new \InvalidArgumentException('non-nullable custom_healthcheck_found cannot be null');
        }
        $this->container['custom_healthcheck_found'] = $custom_healthcheck_found;

        return $this;
    }

    /**
     * Gets redirect
     *
     * @return string|null
     */
    public function getRedirect()
    {
        return $this->container['redirect'];
    }

    /**
     * Sets redirect
     *
     * @param string|null $redirect How to set redirect with Traefik / Caddy. www<->non-www.
     *
     * @return self
     */
    public function setRedirect($redirect)
    {
        if (is_null($redirect)) {
            throw new \InvalidArgumentException('non-nullable redirect cannot be null');
        }
        $allowedValues = $this->getRedirectAllowableValues();
        if (!in_array($redirect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'redirect', must be one of '%s'",
                    $redirect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['redirect'] = $redirect;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at The date and time when the application was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at The date and time when the application was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime|null
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime|null $deleted_at The date and time when the application was deleted.
     *
     * @return self
     */
    public function setDeletedAt($deleted_at)
    {
        if (is_null($deleted_at)) {
            throw new \InvalidArgumentException('non-nullable deleted_at cannot be null');
        }
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets compose_parsing_version
     *
     * @return string|null
     */
    public function getComposeParsingVersion()
    {
        return $this->container['compose_parsing_version'];
    }

    /**
     * Sets compose_parsing_version
     *
     * @param string|null $compose_parsing_version How Coolify parse the compose file.
     *
     * @return self
     */
    public function setComposeParsingVersion($compose_parsing_version)
    {
        if (is_null($compose_parsing_version)) {
            throw new \InvalidArgumentException('non-nullable compose_parsing_version cannot be null');
        }
        $this->container['compose_parsing_version'] = $compose_parsing_version;

        return $this;
    }

    /**
     * Gets custom_nginx_configuration
     *
     * @return string|null
     */
    public function getCustomNginxConfiguration()
    {
        return $this->container['custom_nginx_configuration'];
    }

    /**
     * Sets custom_nginx_configuration
     *
     * @param string|null $custom_nginx_configuration Custom Nginx configuration base64 encoded.
     *
     * @return self
     */
    public function setCustomNginxConfiguration($custom_nginx_configuration)
    {
        if (is_null($custom_nginx_configuration)) {
            throw new \InvalidArgumentException('non-nullable custom_nginx_configuration cannot be null');
        }
        $this->container['custom_nginx_configuration'] = $custom_nginx_configuration;

        return $this;
    }

    /**
     * Gets is_http_basic_auth_enabled
     *
     * @return bool|null
     */
    public function getIsHttpBasicAuthEnabled()
    {
        return $this->container['is_http_basic_auth_enabled'];
    }

    /**
     * Sets is_http_basic_auth_enabled
     *
     * @param bool|null $is_http_basic_auth_enabled HTTP Basic Authentication enabled.
     *
     * @return self
     */
    public function setIsHttpBasicAuthEnabled($is_http_basic_auth_enabled)
    {
        if (is_null($is_http_basic_auth_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_http_basic_auth_enabled cannot be null');
        }
        $this->container['is_http_basic_auth_enabled'] = $is_http_basic_auth_enabled;

        return $this;
    }

    /**
     * Gets http_basic_auth_username
     *
     * @return string|null
     */
    public function getHttpBasicAuthUsername()
    {
        return $this->container['http_basic_auth_username'];
    }

    /**
     * Sets http_basic_auth_username
     *
     * @param string|null $http_basic_auth_username Username for HTTP Basic Authentication
     *
     * @return self
     */
    public function setHttpBasicAuthUsername($http_basic_auth_username)
    {
        if (is_null($http_basic_auth_username)) {
            throw new \InvalidArgumentException('non-nullable http_basic_auth_username cannot be null');
        }
        $this->container['http_basic_auth_username'] = $http_basic_auth_username;

        return $this;
    }

    /**
     * Gets http_basic_auth_password
     *
     * @return string|null
     */
    public function getHttpBasicAuthPassword()
    {
        return $this->container['http_basic_auth_password'];
    }

    /**
     * Sets http_basic_auth_password
     *
     * @param string|null $http_basic_auth_password Password for HTTP Basic Authentication
     *
     * @return self
     */
    public function setHttpBasicAuthPassword($http_basic_auth_password)
    {
        if (is_null($http_basic_auth_password)) {
            throw new \InvalidArgumentException('non-nullable http_basic_auth_password cannot be null');
        }
        $this->container['http_basic_auth_password'] = $http_basic_auth_password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


