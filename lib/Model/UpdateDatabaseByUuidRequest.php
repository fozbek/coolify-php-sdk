<?php
/**
 * UpdateDatabaseByUuidRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Coolify
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UpdateDatabaseByUuidRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateDatabaseByUuidRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'update_database_by_uuid_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'image' => 'string',
        'is_public' => 'bool',
        'public_port' => 'int',
        'limits_memory' => 'string',
        'limits_memory_swap' => 'string',
        'limits_memory_swappiness' => 'int',
        'limits_memory_reservation' => 'string',
        'limits_cpus' => 'string',
        'limits_cpuset' => 'string',
        'limits_cpu_shares' => 'int',
        'postgres_user' => 'string',
        'postgres_password' => 'string',
        'postgres_db' => 'string',
        'postgres_initdb_args' => 'string',
        'postgres_host_auth_method' => 'string',
        'postgres_conf' => 'string',
        'clickhouse_admin_user' => 'string',
        'clickhouse_admin_password' => 'string',
        'dragonfly_password' => 'string',
        'redis_password' => 'string',
        'redis_conf' => 'string',
        'keydb_password' => 'string',
        'keydb_conf' => 'string',
        'mariadb_conf' => 'string',
        'mariadb_root_password' => 'string',
        'mariadb_user' => 'string',
        'mariadb_password' => 'string',
        'mariadb_database' => 'string',
        'mongo_conf' => 'string',
        'mongo_initdb_root_username' => 'string',
        'mongo_initdb_root_password' => 'string',
        'mongo_initdb_database' => 'string',
        'mysql_root_password' => 'string',
        'mysql_password' => 'string',
        'mysql_user' => 'string',
        'mysql_database' => 'string',
        'mysql_conf' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'image' => null,
        'is_public' => null,
        'public_port' => null,
        'limits_memory' => null,
        'limits_memory_swap' => null,
        'limits_memory_swappiness' => null,
        'limits_memory_reservation' => null,
        'limits_cpus' => null,
        'limits_cpuset' => null,
        'limits_cpu_shares' => null,
        'postgres_user' => null,
        'postgres_password' => null,
        'postgres_db' => null,
        'postgres_initdb_args' => null,
        'postgres_host_auth_method' => null,
        'postgres_conf' => null,
        'clickhouse_admin_user' => null,
        'clickhouse_admin_password' => null,
        'dragonfly_password' => null,
        'redis_password' => null,
        'redis_conf' => null,
        'keydb_password' => null,
        'keydb_conf' => null,
        'mariadb_conf' => null,
        'mariadb_root_password' => null,
        'mariadb_user' => null,
        'mariadb_password' => null,
        'mariadb_database' => null,
        'mongo_conf' => null,
        'mongo_initdb_root_username' => null,
        'mongo_initdb_root_password' => null,
        'mongo_initdb_database' => null,
        'mysql_root_password' => null,
        'mysql_password' => null,
        'mysql_user' => null,
        'mysql_database' => null,
        'mysql_conf' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'description' => false,
        'image' => false,
        'is_public' => false,
        'public_port' => false,
        'limits_memory' => false,
        'limits_memory_swap' => false,
        'limits_memory_swappiness' => false,
        'limits_memory_reservation' => false,
        'limits_cpus' => false,
        'limits_cpuset' => false,
        'limits_cpu_shares' => false,
        'postgres_user' => false,
        'postgres_password' => false,
        'postgres_db' => false,
        'postgres_initdb_args' => false,
        'postgres_host_auth_method' => false,
        'postgres_conf' => false,
        'clickhouse_admin_user' => false,
        'clickhouse_admin_password' => false,
        'dragonfly_password' => false,
        'redis_password' => false,
        'redis_conf' => false,
        'keydb_password' => false,
        'keydb_conf' => false,
        'mariadb_conf' => false,
        'mariadb_root_password' => false,
        'mariadb_user' => false,
        'mariadb_password' => false,
        'mariadb_database' => false,
        'mongo_conf' => false,
        'mongo_initdb_root_username' => false,
        'mongo_initdb_root_password' => false,
        'mongo_initdb_database' => false,
        'mysql_root_password' => false,
        'mysql_password' => false,
        'mysql_user' => false,
        'mysql_database' => false,
        'mysql_conf' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'image' => 'image',
        'is_public' => 'is_public',
        'public_port' => 'public_port',
        'limits_memory' => 'limits_memory',
        'limits_memory_swap' => 'limits_memory_swap',
        'limits_memory_swappiness' => 'limits_memory_swappiness',
        'limits_memory_reservation' => 'limits_memory_reservation',
        'limits_cpus' => 'limits_cpus',
        'limits_cpuset' => 'limits_cpuset',
        'limits_cpu_shares' => 'limits_cpu_shares',
        'postgres_user' => 'postgres_user',
        'postgres_password' => 'postgres_password',
        'postgres_db' => 'postgres_db',
        'postgres_initdb_args' => 'postgres_initdb_args',
        'postgres_host_auth_method' => 'postgres_host_auth_method',
        'postgres_conf' => 'postgres_conf',
        'clickhouse_admin_user' => 'clickhouse_admin_user',
        'clickhouse_admin_password' => 'clickhouse_admin_password',
        'dragonfly_password' => 'dragonfly_password',
        'redis_password' => 'redis_password',
        'redis_conf' => 'redis_conf',
        'keydb_password' => 'keydb_password',
        'keydb_conf' => 'keydb_conf',
        'mariadb_conf' => 'mariadb_conf',
        'mariadb_root_password' => 'mariadb_root_password',
        'mariadb_user' => 'mariadb_user',
        'mariadb_password' => 'mariadb_password',
        'mariadb_database' => 'mariadb_database',
        'mongo_conf' => 'mongo_conf',
        'mongo_initdb_root_username' => 'mongo_initdb_root_username',
        'mongo_initdb_root_password' => 'mongo_initdb_root_password',
        'mongo_initdb_database' => 'mongo_initdb_database',
        'mysql_root_password' => 'mysql_root_password',
        'mysql_password' => 'mysql_password',
        'mysql_user' => 'mysql_user',
        'mysql_database' => 'mysql_database',
        'mysql_conf' => 'mysql_conf'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'image' => 'setImage',
        'is_public' => 'setIsPublic',
        'public_port' => 'setPublicPort',
        'limits_memory' => 'setLimitsMemory',
        'limits_memory_swap' => 'setLimitsMemorySwap',
        'limits_memory_swappiness' => 'setLimitsMemorySwappiness',
        'limits_memory_reservation' => 'setLimitsMemoryReservation',
        'limits_cpus' => 'setLimitsCpus',
        'limits_cpuset' => 'setLimitsCpuset',
        'limits_cpu_shares' => 'setLimitsCpuShares',
        'postgres_user' => 'setPostgresUser',
        'postgres_password' => 'setPostgresPassword',
        'postgres_db' => 'setPostgresDb',
        'postgres_initdb_args' => 'setPostgresInitdbArgs',
        'postgres_host_auth_method' => 'setPostgresHostAuthMethod',
        'postgres_conf' => 'setPostgresConf',
        'clickhouse_admin_user' => 'setClickhouseAdminUser',
        'clickhouse_admin_password' => 'setClickhouseAdminPassword',
        'dragonfly_password' => 'setDragonflyPassword',
        'redis_password' => 'setRedisPassword',
        'redis_conf' => 'setRedisConf',
        'keydb_password' => 'setKeydbPassword',
        'keydb_conf' => 'setKeydbConf',
        'mariadb_conf' => 'setMariadbConf',
        'mariadb_root_password' => 'setMariadbRootPassword',
        'mariadb_user' => 'setMariadbUser',
        'mariadb_password' => 'setMariadbPassword',
        'mariadb_database' => 'setMariadbDatabase',
        'mongo_conf' => 'setMongoConf',
        'mongo_initdb_root_username' => 'setMongoInitdbRootUsername',
        'mongo_initdb_root_password' => 'setMongoInitdbRootPassword',
        'mongo_initdb_database' => 'setMongoInitdbDatabase',
        'mysql_root_password' => 'setMysqlRootPassword',
        'mysql_password' => 'setMysqlPassword',
        'mysql_user' => 'setMysqlUser',
        'mysql_database' => 'setMysqlDatabase',
        'mysql_conf' => 'setMysqlConf'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'image' => 'getImage',
        'is_public' => 'getIsPublic',
        'public_port' => 'getPublicPort',
        'limits_memory' => 'getLimitsMemory',
        'limits_memory_swap' => 'getLimitsMemorySwap',
        'limits_memory_swappiness' => 'getLimitsMemorySwappiness',
        'limits_memory_reservation' => 'getLimitsMemoryReservation',
        'limits_cpus' => 'getLimitsCpus',
        'limits_cpuset' => 'getLimitsCpuset',
        'limits_cpu_shares' => 'getLimitsCpuShares',
        'postgres_user' => 'getPostgresUser',
        'postgres_password' => 'getPostgresPassword',
        'postgres_db' => 'getPostgresDb',
        'postgres_initdb_args' => 'getPostgresInitdbArgs',
        'postgres_host_auth_method' => 'getPostgresHostAuthMethod',
        'postgres_conf' => 'getPostgresConf',
        'clickhouse_admin_user' => 'getClickhouseAdminUser',
        'clickhouse_admin_password' => 'getClickhouseAdminPassword',
        'dragonfly_password' => 'getDragonflyPassword',
        'redis_password' => 'getRedisPassword',
        'redis_conf' => 'getRedisConf',
        'keydb_password' => 'getKeydbPassword',
        'keydb_conf' => 'getKeydbConf',
        'mariadb_conf' => 'getMariadbConf',
        'mariadb_root_password' => 'getMariadbRootPassword',
        'mariadb_user' => 'getMariadbUser',
        'mariadb_password' => 'getMariadbPassword',
        'mariadb_database' => 'getMariadbDatabase',
        'mongo_conf' => 'getMongoConf',
        'mongo_initdb_root_username' => 'getMongoInitdbRootUsername',
        'mongo_initdb_root_password' => 'getMongoInitdbRootPassword',
        'mongo_initdb_database' => 'getMongoInitdbDatabase',
        'mysql_root_password' => 'getMysqlRootPassword',
        'mysql_password' => 'getMysqlPassword',
        'mysql_user' => 'getMysqlUser',
        'mysql_database' => 'getMysqlDatabase',
        'mysql_conf' => 'getMysqlConf'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('is_public', $data ?? [], null);
        $this->setIfExists('public_port', $data ?? [], null);
        $this->setIfExists('limits_memory', $data ?? [], null);
        $this->setIfExists('limits_memory_swap', $data ?? [], null);
        $this->setIfExists('limits_memory_swappiness', $data ?? [], null);
        $this->setIfExists('limits_memory_reservation', $data ?? [], null);
        $this->setIfExists('limits_cpus', $data ?? [], null);
        $this->setIfExists('limits_cpuset', $data ?? [], null);
        $this->setIfExists('limits_cpu_shares', $data ?? [], null);
        $this->setIfExists('postgres_user', $data ?? [], null);
        $this->setIfExists('postgres_password', $data ?? [], null);
        $this->setIfExists('postgres_db', $data ?? [], null);
        $this->setIfExists('postgres_initdb_args', $data ?? [], null);
        $this->setIfExists('postgres_host_auth_method', $data ?? [], null);
        $this->setIfExists('postgres_conf', $data ?? [], null);
        $this->setIfExists('clickhouse_admin_user', $data ?? [], null);
        $this->setIfExists('clickhouse_admin_password', $data ?? [], null);
        $this->setIfExists('dragonfly_password', $data ?? [], null);
        $this->setIfExists('redis_password', $data ?? [], null);
        $this->setIfExists('redis_conf', $data ?? [], null);
        $this->setIfExists('keydb_password', $data ?? [], null);
        $this->setIfExists('keydb_conf', $data ?? [], null);
        $this->setIfExists('mariadb_conf', $data ?? [], null);
        $this->setIfExists('mariadb_root_password', $data ?? [], null);
        $this->setIfExists('mariadb_user', $data ?? [], null);
        $this->setIfExists('mariadb_password', $data ?? [], null);
        $this->setIfExists('mariadb_database', $data ?? [], null);
        $this->setIfExists('mongo_conf', $data ?? [], null);
        $this->setIfExists('mongo_initdb_root_username', $data ?? [], null);
        $this->setIfExists('mongo_initdb_root_password', $data ?? [], null);
        $this->setIfExists('mongo_initdb_database', $data ?? [], null);
        $this->setIfExists('mysql_root_password', $data ?? [], null);
        $this->setIfExists('mysql_password', $data ?? [], null);
        $this->setIfExists('mysql_user', $data ?? [], null);
        $this->setIfExists('mysql_database', $data ?? [], null);
        $this->setIfExists('mysql_conf', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the database
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the database
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image Docker Image of the database
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool|null $is_public Is the database public?
     *
     * @return self
     */
    public function setIsPublic($is_public)
    {
        if (is_null($is_public)) {
            throw new \InvalidArgumentException('non-nullable is_public cannot be null');
        }
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets public_port
     *
     * @return int|null
     */
    public function getPublicPort()
    {
        return $this->container['public_port'];
    }

    /**
     * Sets public_port
     *
     * @param int|null $public_port Public port of the database
     *
     * @return self
     */
    public function setPublicPort($public_port)
    {
        if (is_null($public_port)) {
            throw new \InvalidArgumentException('non-nullable public_port cannot be null');
        }
        $this->container['public_port'] = $public_port;

        return $this;
    }

    /**
     * Gets limits_memory
     *
     * @return string|null
     */
    public function getLimitsMemory()
    {
        return $this->container['limits_memory'];
    }

    /**
     * Sets limits_memory
     *
     * @param string|null $limits_memory Memory limit of the database
     *
     * @return self
     */
    public function setLimitsMemory($limits_memory)
    {
        if (is_null($limits_memory)) {
            throw new \InvalidArgumentException('non-nullable limits_memory cannot be null');
        }
        $this->container['limits_memory'] = $limits_memory;

        return $this;
    }

    /**
     * Gets limits_memory_swap
     *
     * @return string|null
     */
    public function getLimitsMemorySwap()
    {
        return $this->container['limits_memory_swap'];
    }

    /**
     * Sets limits_memory_swap
     *
     * @param string|null $limits_memory_swap Memory swap limit of the database
     *
     * @return self
     */
    public function setLimitsMemorySwap($limits_memory_swap)
    {
        if (is_null($limits_memory_swap)) {
            throw new \InvalidArgumentException('non-nullable limits_memory_swap cannot be null');
        }
        $this->container['limits_memory_swap'] = $limits_memory_swap;

        return $this;
    }

    /**
     * Gets limits_memory_swappiness
     *
     * @return int|null
     */
    public function getLimitsMemorySwappiness()
    {
        return $this->container['limits_memory_swappiness'];
    }

    /**
     * Sets limits_memory_swappiness
     *
     * @param int|null $limits_memory_swappiness Memory swappiness of the database
     *
     * @return self
     */
    public function setLimitsMemorySwappiness($limits_memory_swappiness)
    {
        if (is_null($limits_memory_swappiness)) {
            throw new \InvalidArgumentException('non-nullable limits_memory_swappiness cannot be null');
        }
        $this->container['limits_memory_swappiness'] = $limits_memory_swappiness;

        return $this;
    }

    /**
     * Gets limits_memory_reservation
     *
     * @return string|null
     */
    public function getLimitsMemoryReservation()
    {
        return $this->container['limits_memory_reservation'];
    }

    /**
     * Sets limits_memory_reservation
     *
     * @param string|null $limits_memory_reservation Memory reservation of the database
     *
     * @return self
     */
    public function setLimitsMemoryReservation($limits_memory_reservation)
    {
        if (is_null($limits_memory_reservation)) {
            throw new \InvalidArgumentException('non-nullable limits_memory_reservation cannot be null');
        }
        $this->container['limits_memory_reservation'] = $limits_memory_reservation;

        return $this;
    }

    /**
     * Gets limits_cpus
     *
     * @return string|null
     */
    public function getLimitsCpus()
    {
        return $this->container['limits_cpus'];
    }

    /**
     * Sets limits_cpus
     *
     * @param string|null $limits_cpus CPU limit of the database
     *
     * @return self
     */
    public function setLimitsCpus($limits_cpus)
    {
        if (is_null($limits_cpus)) {
            throw new \InvalidArgumentException('non-nullable limits_cpus cannot be null');
        }
        $this->container['limits_cpus'] = $limits_cpus;

        return $this;
    }

    /**
     * Gets limits_cpuset
     *
     * @return string|null
     */
    public function getLimitsCpuset()
    {
        return $this->container['limits_cpuset'];
    }

    /**
     * Sets limits_cpuset
     *
     * @param string|null $limits_cpuset CPU set of the database
     *
     * @return self
     */
    public function setLimitsCpuset($limits_cpuset)
    {
        if (is_null($limits_cpuset)) {
            throw new \InvalidArgumentException('non-nullable limits_cpuset cannot be null');
        }
        $this->container['limits_cpuset'] = $limits_cpuset;

        return $this;
    }

    /**
     * Gets limits_cpu_shares
     *
     * @return int|null
     */
    public function getLimitsCpuShares()
    {
        return $this->container['limits_cpu_shares'];
    }

    /**
     * Sets limits_cpu_shares
     *
     * @param int|null $limits_cpu_shares CPU shares of the database
     *
     * @return self
     */
    public function setLimitsCpuShares($limits_cpu_shares)
    {
        if (is_null($limits_cpu_shares)) {
            throw new \InvalidArgumentException('non-nullable limits_cpu_shares cannot be null');
        }
        $this->container['limits_cpu_shares'] = $limits_cpu_shares;

        return $this;
    }

    /**
     * Gets postgres_user
     *
     * @return string|null
     */
    public function getPostgresUser()
    {
        return $this->container['postgres_user'];
    }

    /**
     * Sets postgres_user
     *
     * @param string|null $postgres_user PostgreSQL user
     *
     * @return self
     */
    public function setPostgresUser($postgres_user)
    {
        if (is_null($postgres_user)) {
            throw new \InvalidArgumentException('non-nullable postgres_user cannot be null');
        }
        $this->container['postgres_user'] = $postgres_user;

        return $this;
    }

    /**
     * Gets postgres_password
     *
     * @return string|null
     */
    public function getPostgresPassword()
    {
        return $this->container['postgres_password'];
    }

    /**
     * Sets postgres_password
     *
     * @param string|null $postgres_password PostgreSQL password
     *
     * @return self
     */
    public function setPostgresPassword($postgres_password)
    {
        if (is_null($postgres_password)) {
            throw new \InvalidArgumentException('non-nullable postgres_password cannot be null');
        }
        $this->container['postgres_password'] = $postgres_password;

        return $this;
    }

    /**
     * Gets postgres_db
     *
     * @return string|null
     */
    public function getPostgresDb()
    {
        return $this->container['postgres_db'];
    }

    /**
     * Sets postgres_db
     *
     * @param string|null $postgres_db PostgreSQL database
     *
     * @return self
     */
    public function setPostgresDb($postgres_db)
    {
        if (is_null($postgres_db)) {
            throw new \InvalidArgumentException('non-nullable postgres_db cannot be null');
        }
        $this->container['postgres_db'] = $postgres_db;

        return $this;
    }

    /**
     * Gets postgres_initdb_args
     *
     * @return string|null
     */
    public function getPostgresInitdbArgs()
    {
        return $this->container['postgres_initdb_args'];
    }

    /**
     * Sets postgres_initdb_args
     *
     * @param string|null $postgres_initdb_args PostgreSQL initdb args
     *
     * @return self
     */
    public function setPostgresInitdbArgs($postgres_initdb_args)
    {
        if (is_null($postgres_initdb_args)) {
            throw new \InvalidArgumentException('non-nullable postgres_initdb_args cannot be null');
        }
        $this->container['postgres_initdb_args'] = $postgres_initdb_args;

        return $this;
    }

    /**
     * Gets postgres_host_auth_method
     *
     * @return string|null
     */
    public function getPostgresHostAuthMethod()
    {
        return $this->container['postgres_host_auth_method'];
    }

    /**
     * Sets postgres_host_auth_method
     *
     * @param string|null $postgres_host_auth_method PostgreSQL host auth method
     *
     * @return self
     */
    public function setPostgresHostAuthMethod($postgres_host_auth_method)
    {
        if (is_null($postgres_host_auth_method)) {
            throw new \InvalidArgumentException('non-nullable postgres_host_auth_method cannot be null');
        }
        $this->container['postgres_host_auth_method'] = $postgres_host_auth_method;

        return $this;
    }

    /**
     * Gets postgres_conf
     *
     * @return string|null
     */
    public function getPostgresConf()
    {
        return $this->container['postgres_conf'];
    }

    /**
     * Sets postgres_conf
     *
     * @param string|null $postgres_conf PostgreSQL conf
     *
     * @return self
     */
    public function setPostgresConf($postgres_conf)
    {
        if (is_null($postgres_conf)) {
            throw new \InvalidArgumentException('non-nullable postgres_conf cannot be null');
        }
        $this->container['postgres_conf'] = $postgres_conf;

        return $this;
    }

    /**
     * Gets clickhouse_admin_user
     *
     * @return string|null
     */
    public function getClickhouseAdminUser()
    {
        return $this->container['clickhouse_admin_user'];
    }

    /**
     * Sets clickhouse_admin_user
     *
     * @param string|null $clickhouse_admin_user Clickhouse admin user
     *
     * @return self
     */
    public function setClickhouseAdminUser($clickhouse_admin_user)
    {
        if (is_null($clickhouse_admin_user)) {
            throw new \InvalidArgumentException('non-nullable clickhouse_admin_user cannot be null');
        }
        $this->container['clickhouse_admin_user'] = $clickhouse_admin_user;

        return $this;
    }

    /**
     * Gets clickhouse_admin_password
     *
     * @return string|null
     */
    public function getClickhouseAdminPassword()
    {
        return $this->container['clickhouse_admin_password'];
    }

    /**
     * Sets clickhouse_admin_password
     *
     * @param string|null $clickhouse_admin_password Clickhouse admin password
     *
     * @return self
     */
    public function setClickhouseAdminPassword($clickhouse_admin_password)
    {
        if (is_null($clickhouse_admin_password)) {
            throw new \InvalidArgumentException('non-nullable clickhouse_admin_password cannot be null');
        }
        $this->container['clickhouse_admin_password'] = $clickhouse_admin_password;

        return $this;
    }

    /**
     * Gets dragonfly_password
     *
     * @return string|null
     */
    public function getDragonflyPassword()
    {
        return $this->container['dragonfly_password'];
    }

    /**
     * Sets dragonfly_password
     *
     * @param string|null $dragonfly_password DragonFly password
     *
     * @return self
     */
    public function setDragonflyPassword($dragonfly_password)
    {
        if (is_null($dragonfly_password)) {
            throw new \InvalidArgumentException('non-nullable dragonfly_password cannot be null');
        }
        $this->container['dragonfly_password'] = $dragonfly_password;

        return $this;
    }

    /**
     * Gets redis_password
     *
     * @return string|null
     */
    public function getRedisPassword()
    {
        return $this->container['redis_password'];
    }

    /**
     * Sets redis_password
     *
     * @param string|null $redis_password Redis password
     *
     * @return self
     */
    public function setRedisPassword($redis_password)
    {
        if (is_null($redis_password)) {
            throw new \InvalidArgumentException('non-nullable redis_password cannot be null');
        }
        $this->container['redis_password'] = $redis_password;

        return $this;
    }

    /**
     * Gets redis_conf
     *
     * @return string|null
     */
    public function getRedisConf()
    {
        return $this->container['redis_conf'];
    }

    /**
     * Sets redis_conf
     *
     * @param string|null $redis_conf Redis conf
     *
     * @return self
     */
    public function setRedisConf($redis_conf)
    {
        if (is_null($redis_conf)) {
            throw new \InvalidArgumentException('non-nullable redis_conf cannot be null');
        }
        $this->container['redis_conf'] = $redis_conf;

        return $this;
    }

    /**
     * Gets keydb_password
     *
     * @return string|null
     */
    public function getKeydbPassword()
    {
        return $this->container['keydb_password'];
    }

    /**
     * Sets keydb_password
     *
     * @param string|null $keydb_password KeyDB password
     *
     * @return self
     */
    public function setKeydbPassword($keydb_password)
    {
        if (is_null($keydb_password)) {
            throw new \InvalidArgumentException('non-nullable keydb_password cannot be null');
        }
        $this->container['keydb_password'] = $keydb_password;

        return $this;
    }

    /**
     * Gets keydb_conf
     *
     * @return string|null
     */
    public function getKeydbConf()
    {
        return $this->container['keydb_conf'];
    }

    /**
     * Sets keydb_conf
     *
     * @param string|null $keydb_conf KeyDB conf
     *
     * @return self
     */
    public function setKeydbConf($keydb_conf)
    {
        if (is_null($keydb_conf)) {
            throw new \InvalidArgumentException('non-nullable keydb_conf cannot be null');
        }
        $this->container['keydb_conf'] = $keydb_conf;

        return $this;
    }

    /**
     * Gets mariadb_conf
     *
     * @return string|null
     */
    public function getMariadbConf()
    {
        return $this->container['mariadb_conf'];
    }

    /**
     * Sets mariadb_conf
     *
     * @param string|null $mariadb_conf MariaDB conf
     *
     * @return self
     */
    public function setMariadbConf($mariadb_conf)
    {
        if (is_null($mariadb_conf)) {
            throw new \InvalidArgumentException('non-nullable mariadb_conf cannot be null');
        }
        $this->container['mariadb_conf'] = $mariadb_conf;

        return $this;
    }

    /**
     * Gets mariadb_root_password
     *
     * @return string|null
     */
    public function getMariadbRootPassword()
    {
        return $this->container['mariadb_root_password'];
    }

    /**
     * Sets mariadb_root_password
     *
     * @param string|null $mariadb_root_password MariaDB root password
     *
     * @return self
     */
    public function setMariadbRootPassword($mariadb_root_password)
    {
        if (is_null($mariadb_root_password)) {
            throw new \InvalidArgumentException('non-nullable mariadb_root_password cannot be null');
        }
        $this->container['mariadb_root_password'] = $mariadb_root_password;

        return $this;
    }

    /**
     * Gets mariadb_user
     *
     * @return string|null
     */
    public function getMariadbUser()
    {
        return $this->container['mariadb_user'];
    }

    /**
     * Sets mariadb_user
     *
     * @param string|null $mariadb_user MariaDB user
     *
     * @return self
     */
    public function setMariadbUser($mariadb_user)
    {
        if (is_null($mariadb_user)) {
            throw new \InvalidArgumentException('non-nullable mariadb_user cannot be null');
        }
        $this->container['mariadb_user'] = $mariadb_user;

        return $this;
    }

    /**
     * Gets mariadb_password
     *
     * @return string|null
     */
    public function getMariadbPassword()
    {
        return $this->container['mariadb_password'];
    }

    /**
     * Sets mariadb_password
     *
     * @param string|null $mariadb_password MariaDB password
     *
     * @return self
     */
    public function setMariadbPassword($mariadb_password)
    {
        if (is_null($mariadb_password)) {
            throw new \InvalidArgumentException('non-nullable mariadb_password cannot be null');
        }
        $this->container['mariadb_password'] = $mariadb_password;

        return $this;
    }

    /**
     * Gets mariadb_database
     *
     * @return string|null
     */
    public function getMariadbDatabase()
    {
        return $this->container['mariadb_database'];
    }

    /**
     * Sets mariadb_database
     *
     * @param string|null $mariadb_database MariaDB database
     *
     * @return self
     */
    public function setMariadbDatabase($mariadb_database)
    {
        if (is_null($mariadb_database)) {
            throw new \InvalidArgumentException('non-nullable mariadb_database cannot be null');
        }
        $this->container['mariadb_database'] = $mariadb_database;

        return $this;
    }

    /**
     * Gets mongo_conf
     *
     * @return string|null
     */
    public function getMongoConf()
    {
        return $this->container['mongo_conf'];
    }

    /**
     * Sets mongo_conf
     *
     * @param string|null $mongo_conf Mongo conf
     *
     * @return self
     */
    public function setMongoConf($mongo_conf)
    {
        if (is_null($mongo_conf)) {
            throw new \InvalidArgumentException('non-nullable mongo_conf cannot be null');
        }
        $this->container['mongo_conf'] = $mongo_conf;

        return $this;
    }

    /**
     * Gets mongo_initdb_root_username
     *
     * @return string|null
     */
    public function getMongoInitdbRootUsername()
    {
        return $this->container['mongo_initdb_root_username'];
    }

    /**
     * Sets mongo_initdb_root_username
     *
     * @param string|null $mongo_initdb_root_username Mongo initdb root username
     *
     * @return self
     */
    public function setMongoInitdbRootUsername($mongo_initdb_root_username)
    {
        if (is_null($mongo_initdb_root_username)) {
            throw new \InvalidArgumentException('non-nullable mongo_initdb_root_username cannot be null');
        }
        $this->container['mongo_initdb_root_username'] = $mongo_initdb_root_username;

        return $this;
    }

    /**
     * Gets mongo_initdb_root_password
     *
     * @return string|null
     */
    public function getMongoInitdbRootPassword()
    {
        return $this->container['mongo_initdb_root_password'];
    }

    /**
     * Sets mongo_initdb_root_password
     *
     * @param string|null $mongo_initdb_root_password Mongo initdb root password
     *
     * @return self
     */
    public function setMongoInitdbRootPassword($mongo_initdb_root_password)
    {
        if (is_null($mongo_initdb_root_password)) {
            throw new \InvalidArgumentException('non-nullable mongo_initdb_root_password cannot be null');
        }
        $this->container['mongo_initdb_root_password'] = $mongo_initdb_root_password;

        return $this;
    }

    /**
     * Gets mongo_initdb_database
     *
     * @return string|null
     */
    public function getMongoInitdbDatabase()
    {
        return $this->container['mongo_initdb_database'];
    }

    /**
     * Sets mongo_initdb_database
     *
     * @param string|null $mongo_initdb_database Mongo initdb init database
     *
     * @return self
     */
    public function setMongoInitdbDatabase($mongo_initdb_database)
    {
        if (is_null($mongo_initdb_database)) {
            throw new \InvalidArgumentException('non-nullable mongo_initdb_database cannot be null');
        }
        $this->container['mongo_initdb_database'] = $mongo_initdb_database;

        return $this;
    }

    /**
     * Gets mysql_root_password
     *
     * @return string|null
     */
    public function getMysqlRootPassword()
    {
        return $this->container['mysql_root_password'];
    }

    /**
     * Sets mysql_root_password
     *
     * @param string|null $mysql_root_password MySQL root password
     *
     * @return self
     */
    public function setMysqlRootPassword($mysql_root_password)
    {
        if (is_null($mysql_root_password)) {
            throw new \InvalidArgumentException('non-nullable mysql_root_password cannot be null');
        }
        $this->container['mysql_root_password'] = $mysql_root_password;

        return $this;
    }

    /**
     * Gets mysql_password
     *
     * @return string|null
     */
    public function getMysqlPassword()
    {
        return $this->container['mysql_password'];
    }

    /**
     * Sets mysql_password
     *
     * @param string|null $mysql_password MySQL password
     *
     * @return self
     */
    public function setMysqlPassword($mysql_password)
    {
        if (is_null($mysql_password)) {
            throw new \InvalidArgumentException('non-nullable mysql_password cannot be null');
        }
        $this->container['mysql_password'] = $mysql_password;

        return $this;
    }

    /**
     * Gets mysql_user
     *
     * @return string|null
     */
    public function getMysqlUser()
    {
        return $this->container['mysql_user'];
    }

    /**
     * Sets mysql_user
     *
     * @param string|null $mysql_user MySQL user
     *
     * @return self
     */
    public function setMysqlUser($mysql_user)
    {
        if (is_null($mysql_user)) {
            throw new \InvalidArgumentException('non-nullable mysql_user cannot be null');
        }
        $this->container['mysql_user'] = $mysql_user;

        return $this;
    }

    /**
     * Gets mysql_database
     *
     * @return string|null
     */
    public function getMysqlDatabase()
    {
        return $this->container['mysql_database'];
    }

    /**
     * Sets mysql_database
     *
     * @param string|null $mysql_database MySQL database
     *
     * @return self
     */
    public function setMysqlDatabase($mysql_database)
    {
        if (is_null($mysql_database)) {
            throw new \InvalidArgumentException('non-nullable mysql_database cannot be null');
        }
        $this->container['mysql_database'] = $mysql_database;

        return $this;
    }

    /**
     * Gets mysql_conf
     *
     * @return string|null
     */
    public function getMysqlConf()
    {
        return $this->container['mysql_conf'];
    }

    /**
     * Sets mysql_conf
     *
     * @param string|null $mysql_conf MySQL conf
     *
     * @return self
     */
    public function setMysqlConf($mysql_conf)
    {
        if (is_null($mysql_conf)) {
            throw new \InvalidArgumentException('non-nullable mysql_conf cannot be null');
        }
        $this->container['mysql_conf'] = $mysql_conf;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


