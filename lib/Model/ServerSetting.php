<?php
/**
 * ServerSetting
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Coolify
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ServerSetting Class Doc Comment
 *
 * @category Class
 * @description Server Settings model
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ServerSetting implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ServerSetting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'concurrent_builds' => 'int',
        'dynamic_timeout' => 'int',
        'force_disabled' => 'bool',
        'force_server_cleanup' => 'bool',
        'is_build_server' => 'bool',
        'is_cloudflare_tunnel' => 'bool',
        'is_jump_server' => 'bool',
        'is_logdrain_axiom_enabled' => 'bool',
        'is_logdrain_custom_enabled' => 'bool',
        'is_logdrain_highlight_enabled' => 'bool',
        'is_logdrain_newrelic_enabled' => 'bool',
        'is_metrics_enabled' => 'bool',
        'is_reachable' => 'bool',
        'is_sentinel_enabled' => 'bool',
        'is_swarm_manager' => 'bool',
        'is_swarm_worker' => 'bool',
        'is_usable' => 'bool',
        'logdrain_axiom_api_key' => 'string',
        'logdrain_axiom_dataset_name' => 'string',
        'logdrain_custom_config' => 'string',
        'logdrain_custom_config_parser' => 'string',
        'logdrain_highlight_project_id' => 'string',
        'logdrain_newrelic_base_uri' => 'string',
        'logdrain_newrelic_license_key' => 'string',
        'sentinel_metrics_history_days' => 'int',
        'sentinel_metrics_refresh_rate_seconds' => 'int',
        'sentinel_token' => 'string',
        'docker_cleanup_frequency' => 'string',
        'docker_cleanup_threshold' => 'int',
        'server_id' => 'int',
        'wildcard_domain' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'delete_unused_volumes' => 'bool',
        'delete_unused_networks' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'concurrent_builds' => null,
        'dynamic_timeout' => null,
        'force_disabled' => null,
        'force_server_cleanup' => null,
        'is_build_server' => null,
        'is_cloudflare_tunnel' => null,
        'is_jump_server' => null,
        'is_logdrain_axiom_enabled' => null,
        'is_logdrain_custom_enabled' => null,
        'is_logdrain_highlight_enabled' => null,
        'is_logdrain_newrelic_enabled' => null,
        'is_metrics_enabled' => null,
        'is_reachable' => null,
        'is_sentinel_enabled' => null,
        'is_swarm_manager' => null,
        'is_swarm_worker' => null,
        'is_usable' => null,
        'logdrain_axiom_api_key' => null,
        'logdrain_axiom_dataset_name' => null,
        'logdrain_custom_config' => null,
        'logdrain_custom_config_parser' => null,
        'logdrain_highlight_project_id' => null,
        'logdrain_newrelic_base_uri' => null,
        'logdrain_newrelic_license_key' => null,
        'sentinel_metrics_history_days' => null,
        'sentinel_metrics_refresh_rate_seconds' => null,
        'sentinel_token' => null,
        'docker_cleanup_frequency' => null,
        'docker_cleanup_threshold' => null,
        'server_id' => null,
        'wildcard_domain' => null,
        'created_at' => null,
        'updated_at' => null,
        'delete_unused_volumes' => null,
        'delete_unused_networks' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'concurrent_builds' => false,
        'dynamic_timeout' => false,
        'force_disabled' => false,
        'force_server_cleanup' => false,
        'is_build_server' => false,
        'is_cloudflare_tunnel' => false,
        'is_jump_server' => false,
        'is_logdrain_axiom_enabled' => false,
        'is_logdrain_custom_enabled' => false,
        'is_logdrain_highlight_enabled' => false,
        'is_logdrain_newrelic_enabled' => false,
        'is_metrics_enabled' => false,
        'is_reachable' => false,
        'is_sentinel_enabled' => false,
        'is_swarm_manager' => false,
        'is_swarm_worker' => false,
        'is_usable' => false,
        'logdrain_axiom_api_key' => false,
        'logdrain_axiom_dataset_name' => false,
        'logdrain_custom_config' => false,
        'logdrain_custom_config_parser' => false,
        'logdrain_highlight_project_id' => false,
        'logdrain_newrelic_base_uri' => false,
        'logdrain_newrelic_license_key' => false,
        'sentinel_metrics_history_days' => false,
        'sentinel_metrics_refresh_rate_seconds' => false,
        'sentinel_token' => false,
        'docker_cleanup_frequency' => false,
        'docker_cleanup_threshold' => false,
        'server_id' => false,
        'wildcard_domain' => false,
        'created_at' => false,
        'updated_at' => false,
        'delete_unused_volumes' => false,
        'delete_unused_networks' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'concurrent_builds' => 'concurrent_builds',
        'dynamic_timeout' => 'dynamic_timeout',
        'force_disabled' => 'force_disabled',
        'force_server_cleanup' => 'force_server_cleanup',
        'is_build_server' => 'is_build_server',
        'is_cloudflare_tunnel' => 'is_cloudflare_tunnel',
        'is_jump_server' => 'is_jump_server',
        'is_logdrain_axiom_enabled' => 'is_logdrain_axiom_enabled',
        'is_logdrain_custom_enabled' => 'is_logdrain_custom_enabled',
        'is_logdrain_highlight_enabled' => 'is_logdrain_highlight_enabled',
        'is_logdrain_newrelic_enabled' => 'is_logdrain_newrelic_enabled',
        'is_metrics_enabled' => 'is_metrics_enabled',
        'is_reachable' => 'is_reachable',
        'is_sentinel_enabled' => 'is_sentinel_enabled',
        'is_swarm_manager' => 'is_swarm_manager',
        'is_swarm_worker' => 'is_swarm_worker',
        'is_usable' => 'is_usable',
        'logdrain_axiom_api_key' => 'logdrain_axiom_api_key',
        'logdrain_axiom_dataset_name' => 'logdrain_axiom_dataset_name',
        'logdrain_custom_config' => 'logdrain_custom_config',
        'logdrain_custom_config_parser' => 'logdrain_custom_config_parser',
        'logdrain_highlight_project_id' => 'logdrain_highlight_project_id',
        'logdrain_newrelic_base_uri' => 'logdrain_newrelic_base_uri',
        'logdrain_newrelic_license_key' => 'logdrain_newrelic_license_key',
        'sentinel_metrics_history_days' => 'sentinel_metrics_history_days',
        'sentinel_metrics_refresh_rate_seconds' => 'sentinel_metrics_refresh_rate_seconds',
        'sentinel_token' => 'sentinel_token',
        'docker_cleanup_frequency' => 'docker_cleanup_frequency',
        'docker_cleanup_threshold' => 'docker_cleanup_threshold',
        'server_id' => 'server_id',
        'wildcard_domain' => 'wildcard_domain',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'delete_unused_volumes' => 'delete_unused_volumes',
        'delete_unused_networks' => 'delete_unused_networks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'concurrent_builds' => 'setConcurrentBuilds',
        'dynamic_timeout' => 'setDynamicTimeout',
        'force_disabled' => 'setForceDisabled',
        'force_server_cleanup' => 'setForceServerCleanup',
        'is_build_server' => 'setIsBuildServer',
        'is_cloudflare_tunnel' => 'setIsCloudflareTunnel',
        'is_jump_server' => 'setIsJumpServer',
        'is_logdrain_axiom_enabled' => 'setIsLogdrainAxiomEnabled',
        'is_logdrain_custom_enabled' => 'setIsLogdrainCustomEnabled',
        'is_logdrain_highlight_enabled' => 'setIsLogdrainHighlightEnabled',
        'is_logdrain_newrelic_enabled' => 'setIsLogdrainNewrelicEnabled',
        'is_metrics_enabled' => 'setIsMetricsEnabled',
        'is_reachable' => 'setIsReachable',
        'is_sentinel_enabled' => 'setIsSentinelEnabled',
        'is_swarm_manager' => 'setIsSwarmManager',
        'is_swarm_worker' => 'setIsSwarmWorker',
        'is_usable' => 'setIsUsable',
        'logdrain_axiom_api_key' => 'setLogdrainAxiomApiKey',
        'logdrain_axiom_dataset_name' => 'setLogdrainAxiomDatasetName',
        'logdrain_custom_config' => 'setLogdrainCustomConfig',
        'logdrain_custom_config_parser' => 'setLogdrainCustomConfigParser',
        'logdrain_highlight_project_id' => 'setLogdrainHighlightProjectId',
        'logdrain_newrelic_base_uri' => 'setLogdrainNewrelicBaseUri',
        'logdrain_newrelic_license_key' => 'setLogdrainNewrelicLicenseKey',
        'sentinel_metrics_history_days' => 'setSentinelMetricsHistoryDays',
        'sentinel_metrics_refresh_rate_seconds' => 'setSentinelMetricsRefreshRateSeconds',
        'sentinel_token' => 'setSentinelToken',
        'docker_cleanup_frequency' => 'setDockerCleanupFrequency',
        'docker_cleanup_threshold' => 'setDockerCleanupThreshold',
        'server_id' => 'setServerId',
        'wildcard_domain' => 'setWildcardDomain',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'delete_unused_volumes' => 'setDeleteUnusedVolumes',
        'delete_unused_networks' => 'setDeleteUnusedNetworks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'concurrent_builds' => 'getConcurrentBuilds',
        'dynamic_timeout' => 'getDynamicTimeout',
        'force_disabled' => 'getForceDisabled',
        'force_server_cleanup' => 'getForceServerCleanup',
        'is_build_server' => 'getIsBuildServer',
        'is_cloudflare_tunnel' => 'getIsCloudflareTunnel',
        'is_jump_server' => 'getIsJumpServer',
        'is_logdrain_axiom_enabled' => 'getIsLogdrainAxiomEnabled',
        'is_logdrain_custom_enabled' => 'getIsLogdrainCustomEnabled',
        'is_logdrain_highlight_enabled' => 'getIsLogdrainHighlightEnabled',
        'is_logdrain_newrelic_enabled' => 'getIsLogdrainNewrelicEnabled',
        'is_metrics_enabled' => 'getIsMetricsEnabled',
        'is_reachable' => 'getIsReachable',
        'is_sentinel_enabled' => 'getIsSentinelEnabled',
        'is_swarm_manager' => 'getIsSwarmManager',
        'is_swarm_worker' => 'getIsSwarmWorker',
        'is_usable' => 'getIsUsable',
        'logdrain_axiom_api_key' => 'getLogdrainAxiomApiKey',
        'logdrain_axiom_dataset_name' => 'getLogdrainAxiomDatasetName',
        'logdrain_custom_config' => 'getLogdrainCustomConfig',
        'logdrain_custom_config_parser' => 'getLogdrainCustomConfigParser',
        'logdrain_highlight_project_id' => 'getLogdrainHighlightProjectId',
        'logdrain_newrelic_base_uri' => 'getLogdrainNewrelicBaseUri',
        'logdrain_newrelic_license_key' => 'getLogdrainNewrelicLicenseKey',
        'sentinel_metrics_history_days' => 'getSentinelMetricsHistoryDays',
        'sentinel_metrics_refresh_rate_seconds' => 'getSentinelMetricsRefreshRateSeconds',
        'sentinel_token' => 'getSentinelToken',
        'docker_cleanup_frequency' => 'getDockerCleanupFrequency',
        'docker_cleanup_threshold' => 'getDockerCleanupThreshold',
        'server_id' => 'getServerId',
        'wildcard_domain' => 'getWildcardDomain',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'delete_unused_volumes' => 'getDeleteUnusedVolumes',
        'delete_unused_networks' => 'getDeleteUnusedNetworks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('concurrent_builds', $data ?? [], null);
        $this->setIfExists('dynamic_timeout', $data ?? [], null);
        $this->setIfExists('force_disabled', $data ?? [], null);
        $this->setIfExists('force_server_cleanup', $data ?? [], null);
        $this->setIfExists('is_build_server', $data ?? [], null);
        $this->setIfExists('is_cloudflare_tunnel', $data ?? [], null);
        $this->setIfExists('is_jump_server', $data ?? [], null);
        $this->setIfExists('is_logdrain_axiom_enabled', $data ?? [], null);
        $this->setIfExists('is_logdrain_custom_enabled', $data ?? [], null);
        $this->setIfExists('is_logdrain_highlight_enabled', $data ?? [], null);
        $this->setIfExists('is_logdrain_newrelic_enabled', $data ?? [], null);
        $this->setIfExists('is_metrics_enabled', $data ?? [], null);
        $this->setIfExists('is_reachable', $data ?? [], null);
        $this->setIfExists('is_sentinel_enabled', $data ?? [], null);
        $this->setIfExists('is_swarm_manager', $data ?? [], null);
        $this->setIfExists('is_swarm_worker', $data ?? [], null);
        $this->setIfExists('is_usable', $data ?? [], null);
        $this->setIfExists('logdrain_axiom_api_key', $data ?? [], null);
        $this->setIfExists('logdrain_axiom_dataset_name', $data ?? [], null);
        $this->setIfExists('logdrain_custom_config', $data ?? [], null);
        $this->setIfExists('logdrain_custom_config_parser', $data ?? [], null);
        $this->setIfExists('logdrain_highlight_project_id', $data ?? [], null);
        $this->setIfExists('logdrain_newrelic_base_uri', $data ?? [], null);
        $this->setIfExists('logdrain_newrelic_license_key', $data ?? [], null);
        $this->setIfExists('sentinel_metrics_history_days', $data ?? [], null);
        $this->setIfExists('sentinel_metrics_refresh_rate_seconds', $data ?? [], null);
        $this->setIfExists('sentinel_token', $data ?? [], null);
        $this->setIfExists('docker_cleanup_frequency', $data ?? [], null);
        $this->setIfExists('docker_cleanup_threshold', $data ?? [], null);
        $this->setIfExists('server_id', $data ?? [], null);
        $this->setIfExists('wildcard_domain', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('delete_unused_volumes', $data ?? [], null);
        $this->setIfExists('delete_unused_networks', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets concurrent_builds
     *
     * @return int|null
     */
    public function getConcurrentBuilds()
    {
        return $this->container['concurrent_builds'];
    }

    /**
     * Sets concurrent_builds
     *
     * @param int|null $concurrent_builds concurrent_builds
     *
     * @return self
     */
    public function setConcurrentBuilds($concurrent_builds)
    {
        if (is_null($concurrent_builds)) {
            throw new \InvalidArgumentException('non-nullable concurrent_builds cannot be null');
        }
        $this->container['concurrent_builds'] = $concurrent_builds;

        return $this;
    }

    /**
     * Gets dynamic_timeout
     *
     * @return int|null
     */
    public function getDynamicTimeout()
    {
        return $this->container['dynamic_timeout'];
    }

    /**
     * Sets dynamic_timeout
     *
     * @param int|null $dynamic_timeout dynamic_timeout
     *
     * @return self
     */
    public function setDynamicTimeout($dynamic_timeout)
    {
        if (is_null($dynamic_timeout)) {
            throw new \InvalidArgumentException('non-nullable dynamic_timeout cannot be null');
        }
        $this->container['dynamic_timeout'] = $dynamic_timeout;

        return $this;
    }

    /**
     * Gets force_disabled
     *
     * @return bool|null
     */
    public function getForceDisabled()
    {
        return $this->container['force_disabled'];
    }

    /**
     * Sets force_disabled
     *
     * @param bool|null $force_disabled force_disabled
     *
     * @return self
     */
    public function setForceDisabled($force_disabled)
    {
        if (is_null($force_disabled)) {
            throw new \InvalidArgumentException('non-nullable force_disabled cannot be null');
        }
        $this->container['force_disabled'] = $force_disabled;

        return $this;
    }

    /**
     * Gets force_server_cleanup
     *
     * @return bool|null
     */
    public function getForceServerCleanup()
    {
        return $this->container['force_server_cleanup'];
    }

    /**
     * Sets force_server_cleanup
     *
     * @param bool|null $force_server_cleanup force_server_cleanup
     *
     * @return self
     */
    public function setForceServerCleanup($force_server_cleanup)
    {
        if (is_null($force_server_cleanup)) {
            throw new \InvalidArgumentException('non-nullable force_server_cleanup cannot be null');
        }
        $this->container['force_server_cleanup'] = $force_server_cleanup;

        return $this;
    }

    /**
     * Gets is_build_server
     *
     * @return bool|null
     */
    public function getIsBuildServer()
    {
        return $this->container['is_build_server'];
    }

    /**
     * Sets is_build_server
     *
     * @param bool|null $is_build_server is_build_server
     *
     * @return self
     */
    public function setIsBuildServer($is_build_server)
    {
        if (is_null($is_build_server)) {
            throw new \InvalidArgumentException('non-nullable is_build_server cannot be null');
        }
        $this->container['is_build_server'] = $is_build_server;

        return $this;
    }

    /**
     * Gets is_cloudflare_tunnel
     *
     * @return bool|null
     */
    public function getIsCloudflareTunnel()
    {
        return $this->container['is_cloudflare_tunnel'];
    }

    /**
     * Sets is_cloudflare_tunnel
     *
     * @param bool|null $is_cloudflare_tunnel is_cloudflare_tunnel
     *
     * @return self
     */
    public function setIsCloudflareTunnel($is_cloudflare_tunnel)
    {
        if (is_null($is_cloudflare_tunnel)) {
            throw new \InvalidArgumentException('non-nullable is_cloudflare_tunnel cannot be null');
        }
        $this->container['is_cloudflare_tunnel'] = $is_cloudflare_tunnel;

        return $this;
    }

    /**
     * Gets is_jump_server
     *
     * @return bool|null
     */
    public function getIsJumpServer()
    {
        return $this->container['is_jump_server'];
    }

    /**
     * Sets is_jump_server
     *
     * @param bool|null $is_jump_server is_jump_server
     *
     * @return self
     */
    public function setIsJumpServer($is_jump_server)
    {
        if (is_null($is_jump_server)) {
            throw new \InvalidArgumentException('non-nullable is_jump_server cannot be null');
        }
        $this->container['is_jump_server'] = $is_jump_server;

        return $this;
    }

    /**
     * Gets is_logdrain_axiom_enabled
     *
     * @return bool|null
     */
    public function getIsLogdrainAxiomEnabled()
    {
        return $this->container['is_logdrain_axiom_enabled'];
    }

    /**
     * Sets is_logdrain_axiom_enabled
     *
     * @param bool|null $is_logdrain_axiom_enabled is_logdrain_axiom_enabled
     *
     * @return self
     */
    public function setIsLogdrainAxiomEnabled($is_logdrain_axiom_enabled)
    {
        if (is_null($is_logdrain_axiom_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_logdrain_axiom_enabled cannot be null');
        }
        $this->container['is_logdrain_axiom_enabled'] = $is_logdrain_axiom_enabled;

        return $this;
    }

    /**
     * Gets is_logdrain_custom_enabled
     *
     * @return bool|null
     */
    public function getIsLogdrainCustomEnabled()
    {
        return $this->container['is_logdrain_custom_enabled'];
    }

    /**
     * Sets is_logdrain_custom_enabled
     *
     * @param bool|null $is_logdrain_custom_enabled is_logdrain_custom_enabled
     *
     * @return self
     */
    public function setIsLogdrainCustomEnabled($is_logdrain_custom_enabled)
    {
        if (is_null($is_logdrain_custom_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_logdrain_custom_enabled cannot be null');
        }
        $this->container['is_logdrain_custom_enabled'] = $is_logdrain_custom_enabled;

        return $this;
    }

    /**
     * Gets is_logdrain_highlight_enabled
     *
     * @return bool|null
     */
    public function getIsLogdrainHighlightEnabled()
    {
        return $this->container['is_logdrain_highlight_enabled'];
    }

    /**
     * Sets is_logdrain_highlight_enabled
     *
     * @param bool|null $is_logdrain_highlight_enabled is_logdrain_highlight_enabled
     *
     * @return self
     */
    public function setIsLogdrainHighlightEnabled($is_logdrain_highlight_enabled)
    {
        if (is_null($is_logdrain_highlight_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_logdrain_highlight_enabled cannot be null');
        }
        $this->container['is_logdrain_highlight_enabled'] = $is_logdrain_highlight_enabled;

        return $this;
    }

    /**
     * Gets is_logdrain_newrelic_enabled
     *
     * @return bool|null
     */
    public function getIsLogdrainNewrelicEnabled()
    {
        return $this->container['is_logdrain_newrelic_enabled'];
    }

    /**
     * Sets is_logdrain_newrelic_enabled
     *
     * @param bool|null $is_logdrain_newrelic_enabled is_logdrain_newrelic_enabled
     *
     * @return self
     */
    public function setIsLogdrainNewrelicEnabled($is_logdrain_newrelic_enabled)
    {
        if (is_null($is_logdrain_newrelic_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_logdrain_newrelic_enabled cannot be null');
        }
        $this->container['is_logdrain_newrelic_enabled'] = $is_logdrain_newrelic_enabled;

        return $this;
    }

    /**
     * Gets is_metrics_enabled
     *
     * @return bool|null
     */
    public function getIsMetricsEnabled()
    {
        return $this->container['is_metrics_enabled'];
    }

    /**
     * Sets is_metrics_enabled
     *
     * @param bool|null $is_metrics_enabled is_metrics_enabled
     *
     * @return self
     */
    public function setIsMetricsEnabled($is_metrics_enabled)
    {
        if (is_null($is_metrics_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_metrics_enabled cannot be null');
        }
        $this->container['is_metrics_enabled'] = $is_metrics_enabled;

        return $this;
    }

    /**
     * Gets is_reachable
     *
     * @return bool|null
     */
    public function getIsReachable()
    {
        return $this->container['is_reachable'];
    }

    /**
     * Sets is_reachable
     *
     * @param bool|null $is_reachable is_reachable
     *
     * @return self
     */
    public function setIsReachable($is_reachable)
    {
        if (is_null($is_reachable)) {
            throw new \InvalidArgumentException('non-nullable is_reachable cannot be null');
        }
        $this->container['is_reachable'] = $is_reachable;

        return $this;
    }

    /**
     * Gets is_sentinel_enabled
     *
     * @return bool|null
     */
    public function getIsSentinelEnabled()
    {
        return $this->container['is_sentinel_enabled'];
    }

    /**
     * Sets is_sentinel_enabled
     *
     * @param bool|null $is_sentinel_enabled is_sentinel_enabled
     *
     * @return self
     */
    public function setIsSentinelEnabled($is_sentinel_enabled)
    {
        if (is_null($is_sentinel_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_sentinel_enabled cannot be null');
        }
        $this->container['is_sentinel_enabled'] = $is_sentinel_enabled;

        return $this;
    }

    /**
     * Gets is_swarm_manager
     *
     * @return bool|null
     */
    public function getIsSwarmManager()
    {
        return $this->container['is_swarm_manager'];
    }

    /**
     * Sets is_swarm_manager
     *
     * @param bool|null $is_swarm_manager is_swarm_manager
     *
     * @return self
     */
    public function setIsSwarmManager($is_swarm_manager)
    {
        if (is_null($is_swarm_manager)) {
            throw new \InvalidArgumentException('non-nullable is_swarm_manager cannot be null');
        }
        $this->container['is_swarm_manager'] = $is_swarm_manager;

        return $this;
    }

    /**
     * Gets is_swarm_worker
     *
     * @return bool|null
     */
    public function getIsSwarmWorker()
    {
        return $this->container['is_swarm_worker'];
    }

    /**
     * Sets is_swarm_worker
     *
     * @param bool|null $is_swarm_worker is_swarm_worker
     *
     * @return self
     */
    public function setIsSwarmWorker($is_swarm_worker)
    {
        if (is_null($is_swarm_worker)) {
            throw new \InvalidArgumentException('non-nullable is_swarm_worker cannot be null');
        }
        $this->container['is_swarm_worker'] = $is_swarm_worker;

        return $this;
    }

    /**
     * Gets is_usable
     *
     * @return bool|null
     */
    public function getIsUsable()
    {
        return $this->container['is_usable'];
    }

    /**
     * Sets is_usable
     *
     * @param bool|null $is_usable is_usable
     *
     * @return self
     */
    public function setIsUsable($is_usable)
    {
        if (is_null($is_usable)) {
            throw new \InvalidArgumentException('non-nullable is_usable cannot be null');
        }
        $this->container['is_usable'] = $is_usable;

        return $this;
    }

    /**
     * Gets logdrain_axiom_api_key
     *
     * @return string|null
     */
    public function getLogdrainAxiomApiKey()
    {
        return $this->container['logdrain_axiom_api_key'];
    }

    /**
     * Sets logdrain_axiom_api_key
     *
     * @param string|null $logdrain_axiom_api_key logdrain_axiom_api_key
     *
     * @return self
     */
    public function setLogdrainAxiomApiKey($logdrain_axiom_api_key)
    {
        if (is_null($logdrain_axiom_api_key)) {
            throw new \InvalidArgumentException('non-nullable logdrain_axiom_api_key cannot be null');
        }
        $this->container['logdrain_axiom_api_key'] = $logdrain_axiom_api_key;

        return $this;
    }

    /**
     * Gets logdrain_axiom_dataset_name
     *
     * @return string|null
     */
    public function getLogdrainAxiomDatasetName()
    {
        return $this->container['logdrain_axiom_dataset_name'];
    }

    /**
     * Sets logdrain_axiom_dataset_name
     *
     * @param string|null $logdrain_axiom_dataset_name logdrain_axiom_dataset_name
     *
     * @return self
     */
    public function setLogdrainAxiomDatasetName($logdrain_axiom_dataset_name)
    {
        if (is_null($logdrain_axiom_dataset_name)) {
            throw new \InvalidArgumentException('non-nullable logdrain_axiom_dataset_name cannot be null');
        }
        $this->container['logdrain_axiom_dataset_name'] = $logdrain_axiom_dataset_name;

        return $this;
    }

    /**
     * Gets logdrain_custom_config
     *
     * @return string|null
     */
    public function getLogdrainCustomConfig()
    {
        return $this->container['logdrain_custom_config'];
    }

    /**
     * Sets logdrain_custom_config
     *
     * @param string|null $logdrain_custom_config logdrain_custom_config
     *
     * @return self
     */
    public function setLogdrainCustomConfig($logdrain_custom_config)
    {
        if (is_null($logdrain_custom_config)) {
            throw new \InvalidArgumentException('non-nullable logdrain_custom_config cannot be null');
        }
        $this->container['logdrain_custom_config'] = $logdrain_custom_config;

        return $this;
    }

    /**
     * Gets logdrain_custom_config_parser
     *
     * @return string|null
     */
    public function getLogdrainCustomConfigParser()
    {
        return $this->container['logdrain_custom_config_parser'];
    }

    /**
     * Sets logdrain_custom_config_parser
     *
     * @param string|null $logdrain_custom_config_parser logdrain_custom_config_parser
     *
     * @return self
     */
    public function setLogdrainCustomConfigParser($logdrain_custom_config_parser)
    {
        if (is_null($logdrain_custom_config_parser)) {
            throw new \InvalidArgumentException('non-nullable logdrain_custom_config_parser cannot be null');
        }
        $this->container['logdrain_custom_config_parser'] = $logdrain_custom_config_parser;

        return $this;
    }

    /**
     * Gets logdrain_highlight_project_id
     *
     * @return string|null
     */
    public function getLogdrainHighlightProjectId()
    {
        return $this->container['logdrain_highlight_project_id'];
    }

    /**
     * Sets logdrain_highlight_project_id
     *
     * @param string|null $logdrain_highlight_project_id logdrain_highlight_project_id
     *
     * @return self
     */
    public function setLogdrainHighlightProjectId($logdrain_highlight_project_id)
    {
        if (is_null($logdrain_highlight_project_id)) {
            throw new \InvalidArgumentException('non-nullable logdrain_highlight_project_id cannot be null');
        }
        $this->container['logdrain_highlight_project_id'] = $logdrain_highlight_project_id;

        return $this;
    }

    /**
     * Gets logdrain_newrelic_base_uri
     *
     * @return string|null
     */
    public function getLogdrainNewrelicBaseUri()
    {
        return $this->container['logdrain_newrelic_base_uri'];
    }

    /**
     * Sets logdrain_newrelic_base_uri
     *
     * @param string|null $logdrain_newrelic_base_uri logdrain_newrelic_base_uri
     *
     * @return self
     */
    public function setLogdrainNewrelicBaseUri($logdrain_newrelic_base_uri)
    {
        if (is_null($logdrain_newrelic_base_uri)) {
            throw new \InvalidArgumentException('non-nullable logdrain_newrelic_base_uri cannot be null');
        }
        $this->container['logdrain_newrelic_base_uri'] = $logdrain_newrelic_base_uri;

        return $this;
    }

    /**
     * Gets logdrain_newrelic_license_key
     *
     * @return string|null
     */
    public function getLogdrainNewrelicLicenseKey()
    {
        return $this->container['logdrain_newrelic_license_key'];
    }

    /**
     * Sets logdrain_newrelic_license_key
     *
     * @param string|null $logdrain_newrelic_license_key logdrain_newrelic_license_key
     *
     * @return self
     */
    public function setLogdrainNewrelicLicenseKey($logdrain_newrelic_license_key)
    {
        if (is_null($logdrain_newrelic_license_key)) {
            throw new \InvalidArgumentException('non-nullable logdrain_newrelic_license_key cannot be null');
        }
        $this->container['logdrain_newrelic_license_key'] = $logdrain_newrelic_license_key;

        return $this;
    }

    /**
     * Gets sentinel_metrics_history_days
     *
     * @return int|null
     */
    public function getSentinelMetricsHistoryDays()
    {
        return $this->container['sentinel_metrics_history_days'];
    }

    /**
     * Sets sentinel_metrics_history_days
     *
     * @param int|null $sentinel_metrics_history_days sentinel_metrics_history_days
     *
     * @return self
     */
    public function setSentinelMetricsHistoryDays($sentinel_metrics_history_days)
    {
        if (is_null($sentinel_metrics_history_days)) {
            throw new \InvalidArgumentException('non-nullable sentinel_metrics_history_days cannot be null');
        }
        $this->container['sentinel_metrics_history_days'] = $sentinel_metrics_history_days;

        return $this;
    }

    /**
     * Gets sentinel_metrics_refresh_rate_seconds
     *
     * @return int|null
     */
    public function getSentinelMetricsRefreshRateSeconds()
    {
        return $this->container['sentinel_metrics_refresh_rate_seconds'];
    }

    /**
     * Sets sentinel_metrics_refresh_rate_seconds
     *
     * @param int|null $sentinel_metrics_refresh_rate_seconds sentinel_metrics_refresh_rate_seconds
     *
     * @return self
     */
    public function setSentinelMetricsRefreshRateSeconds($sentinel_metrics_refresh_rate_seconds)
    {
        if (is_null($sentinel_metrics_refresh_rate_seconds)) {
            throw new \InvalidArgumentException('non-nullable sentinel_metrics_refresh_rate_seconds cannot be null');
        }
        $this->container['sentinel_metrics_refresh_rate_seconds'] = $sentinel_metrics_refresh_rate_seconds;

        return $this;
    }

    /**
     * Gets sentinel_token
     *
     * @return string|null
     */
    public function getSentinelToken()
    {
        return $this->container['sentinel_token'];
    }

    /**
     * Sets sentinel_token
     *
     * @param string|null $sentinel_token sentinel_token
     *
     * @return self
     */
    public function setSentinelToken($sentinel_token)
    {
        if (is_null($sentinel_token)) {
            throw new \InvalidArgumentException('non-nullable sentinel_token cannot be null');
        }
        $this->container['sentinel_token'] = $sentinel_token;

        return $this;
    }

    /**
     * Gets docker_cleanup_frequency
     *
     * @return string|null
     */
    public function getDockerCleanupFrequency()
    {
        return $this->container['docker_cleanup_frequency'];
    }

    /**
     * Sets docker_cleanup_frequency
     *
     * @param string|null $docker_cleanup_frequency docker_cleanup_frequency
     *
     * @return self
     */
    public function setDockerCleanupFrequency($docker_cleanup_frequency)
    {
        if (is_null($docker_cleanup_frequency)) {
            throw new \InvalidArgumentException('non-nullable docker_cleanup_frequency cannot be null');
        }
        $this->container['docker_cleanup_frequency'] = $docker_cleanup_frequency;

        return $this;
    }

    /**
     * Gets docker_cleanup_threshold
     *
     * @return int|null
     */
    public function getDockerCleanupThreshold()
    {
        return $this->container['docker_cleanup_threshold'];
    }

    /**
     * Sets docker_cleanup_threshold
     *
     * @param int|null $docker_cleanup_threshold docker_cleanup_threshold
     *
     * @return self
     */
    public function setDockerCleanupThreshold($docker_cleanup_threshold)
    {
        if (is_null($docker_cleanup_threshold)) {
            throw new \InvalidArgumentException('non-nullable docker_cleanup_threshold cannot be null');
        }
        $this->container['docker_cleanup_threshold'] = $docker_cleanup_threshold;

        return $this;
    }

    /**
     * Gets server_id
     *
     * @return int|null
     */
    public function getServerId()
    {
        return $this->container['server_id'];
    }

    /**
     * Sets server_id
     *
     * @param int|null $server_id server_id
     *
     * @return self
     */
    public function setServerId($server_id)
    {
        if (is_null($server_id)) {
            throw new \InvalidArgumentException('non-nullable server_id cannot be null');
        }
        $this->container['server_id'] = $server_id;

        return $this;
    }

    /**
     * Gets wildcard_domain
     *
     * @return string|null
     */
    public function getWildcardDomain()
    {
        return $this->container['wildcard_domain'];
    }

    /**
     * Sets wildcard_domain
     *
     * @param string|null $wildcard_domain wildcard_domain
     *
     * @return self
     */
    public function setWildcardDomain($wildcard_domain)
    {
        if (is_null($wildcard_domain)) {
            throw new \InvalidArgumentException('non-nullable wildcard_domain cannot be null');
        }
        $this->container['wildcard_domain'] = $wildcard_domain;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets delete_unused_volumes
     *
     * @return bool|null
     */
    public function getDeleteUnusedVolumes()
    {
        return $this->container['delete_unused_volumes'];
    }

    /**
     * Sets delete_unused_volumes
     *
     * @param bool|null $delete_unused_volumes The flag to indicate if the unused volumes should be deleted.
     *
     * @return self
     */
    public function setDeleteUnusedVolumes($delete_unused_volumes)
    {
        if (is_null($delete_unused_volumes)) {
            throw new \InvalidArgumentException('non-nullable delete_unused_volumes cannot be null');
        }
        $this->container['delete_unused_volumes'] = $delete_unused_volumes;

        return $this;
    }

    /**
     * Gets delete_unused_networks
     *
     * @return bool|null
     */
    public function getDeleteUnusedNetworks()
    {
        return $this->container['delete_unused_networks'];
    }

    /**
     * Sets delete_unused_networks
     *
     * @param bool|null $delete_unused_networks The flag to indicate if the unused networks should be deleted.
     *
     * @return self
     */
    public function setDeleteUnusedNetworks($delete_unused_networks)
    {
        if (is_null($delete_unused_networks)) {
            throw new \InvalidArgumentException('non-nullable delete_unused_networks cannot be null');
        }
        $this->container['delete_unused_networks'] = $delete_unused_networks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


