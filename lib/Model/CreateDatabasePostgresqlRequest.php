<?php
/**
 * CreateDatabasePostgresqlRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Coolify
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreateDatabasePostgresqlRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateDatabasePostgresqlRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'create_database_postgresql_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'server_uuid' => 'string',
        'project_uuid' => 'string',
        'environment_name' => 'string',
        'environment_uuid' => 'string',
        'postgres_user' => 'string',
        'postgres_password' => 'string',
        'postgres_db' => 'string',
        'postgres_initdb_args' => 'string',
        'postgres_host_auth_method' => 'string',
        'postgres_conf' => 'string',
        'destination_uuid' => 'string',
        'name' => 'string',
        'description' => 'string',
        'image' => 'string',
        'is_public' => 'bool',
        'public_port' => 'int',
        'limits_memory' => 'string',
        'limits_memory_swap' => 'string',
        'limits_memory_swappiness' => 'int',
        'limits_memory_reservation' => 'string',
        'limits_cpus' => 'string',
        'limits_cpuset' => 'string',
        'limits_cpu_shares' => 'int',
        'instant_deploy' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'server_uuid' => null,
        'project_uuid' => null,
        'environment_name' => null,
        'environment_uuid' => null,
        'postgres_user' => null,
        'postgres_password' => null,
        'postgres_db' => null,
        'postgres_initdb_args' => null,
        'postgres_host_auth_method' => null,
        'postgres_conf' => null,
        'destination_uuid' => null,
        'name' => null,
        'description' => null,
        'image' => null,
        'is_public' => null,
        'public_port' => null,
        'limits_memory' => null,
        'limits_memory_swap' => null,
        'limits_memory_swappiness' => null,
        'limits_memory_reservation' => null,
        'limits_cpus' => null,
        'limits_cpuset' => null,
        'limits_cpu_shares' => null,
        'instant_deploy' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'server_uuid' => false,
        'project_uuid' => false,
        'environment_name' => false,
        'environment_uuid' => false,
        'postgres_user' => false,
        'postgres_password' => false,
        'postgres_db' => false,
        'postgres_initdb_args' => false,
        'postgres_host_auth_method' => false,
        'postgres_conf' => false,
        'destination_uuid' => false,
        'name' => false,
        'description' => false,
        'image' => false,
        'is_public' => false,
        'public_port' => false,
        'limits_memory' => false,
        'limits_memory_swap' => false,
        'limits_memory_swappiness' => false,
        'limits_memory_reservation' => false,
        'limits_cpus' => false,
        'limits_cpuset' => false,
        'limits_cpu_shares' => false,
        'instant_deploy' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'server_uuid' => 'server_uuid',
        'project_uuid' => 'project_uuid',
        'environment_name' => 'environment_name',
        'environment_uuid' => 'environment_uuid',
        'postgres_user' => 'postgres_user',
        'postgres_password' => 'postgres_password',
        'postgres_db' => 'postgres_db',
        'postgres_initdb_args' => 'postgres_initdb_args',
        'postgres_host_auth_method' => 'postgres_host_auth_method',
        'postgres_conf' => 'postgres_conf',
        'destination_uuid' => 'destination_uuid',
        'name' => 'name',
        'description' => 'description',
        'image' => 'image',
        'is_public' => 'is_public',
        'public_port' => 'public_port',
        'limits_memory' => 'limits_memory',
        'limits_memory_swap' => 'limits_memory_swap',
        'limits_memory_swappiness' => 'limits_memory_swappiness',
        'limits_memory_reservation' => 'limits_memory_reservation',
        'limits_cpus' => 'limits_cpus',
        'limits_cpuset' => 'limits_cpuset',
        'limits_cpu_shares' => 'limits_cpu_shares',
        'instant_deploy' => 'instant_deploy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'server_uuid' => 'setServerUuid',
        'project_uuid' => 'setProjectUuid',
        'environment_name' => 'setEnvironmentName',
        'environment_uuid' => 'setEnvironmentUuid',
        'postgres_user' => 'setPostgresUser',
        'postgres_password' => 'setPostgresPassword',
        'postgres_db' => 'setPostgresDb',
        'postgres_initdb_args' => 'setPostgresInitdbArgs',
        'postgres_host_auth_method' => 'setPostgresHostAuthMethod',
        'postgres_conf' => 'setPostgresConf',
        'destination_uuid' => 'setDestinationUuid',
        'name' => 'setName',
        'description' => 'setDescription',
        'image' => 'setImage',
        'is_public' => 'setIsPublic',
        'public_port' => 'setPublicPort',
        'limits_memory' => 'setLimitsMemory',
        'limits_memory_swap' => 'setLimitsMemorySwap',
        'limits_memory_swappiness' => 'setLimitsMemorySwappiness',
        'limits_memory_reservation' => 'setLimitsMemoryReservation',
        'limits_cpus' => 'setLimitsCpus',
        'limits_cpuset' => 'setLimitsCpuset',
        'limits_cpu_shares' => 'setLimitsCpuShares',
        'instant_deploy' => 'setInstantDeploy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'server_uuid' => 'getServerUuid',
        'project_uuid' => 'getProjectUuid',
        'environment_name' => 'getEnvironmentName',
        'environment_uuid' => 'getEnvironmentUuid',
        'postgres_user' => 'getPostgresUser',
        'postgres_password' => 'getPostgresPassword',
        'postgres_db' => 'getPostgresDb',
        'postgres_initdb_args' => 'getPostgresInitdbArgs',
        'postgres_host_auth_method' => 'getPostgresHostAuthMethod',
        'postgres_conf' => 'getPostgresConf',
        'destination_uuid' => 'getDestinationUuid',
        'name' => 'getName',
        'description' => 'getDescription',
        'image' => 'getImage',
        'is_public' => 'getIsPublic',
        'public_port' => 'getPublicPort',
        'limits_memory' => 'getLimitsMemory',
        'limits_memory_swap' => 'getLimitsMemorySwap',
        'limits_memory_swappiness' => 'getLimitsMemorySwappiness',
        'limits_memory_reservation' => 'getLimitsMemoryReservation',
        'limits_cpus' => 'getLimitsCpus',
        'limits_cpuset' => 'getLimitsCpuset',
        'limits_cpu_shares' => 'getLimitsCpuShares',
        'instant_deploy' => 'getInstantDeploy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('server_uuid', $data ?? [], null);
        $this->setIfExists('project_uuid', $data ?? [], null);
        $this->setIfExists('environment_name', $data ?? [], null);
        $this->setIfExists('environment_uuid', $data ?? [], null);
        $this->setIfExists('postgres_user', $data ?? [], null);
        $this->setIfExists('postgres_password', $data ?? [], null);
        $this->setIfExists('postgres_db', $data ?? [], null);
        $this->setIfExists('postgres_initdb_args', $data ?? [], null);
        $this->setIfExists('postgres_host_auth_method', $data ?? [], null);
        $this->setIfExists('postgres_conf', $data ?? [], null);
        $this->setIfExists('destination_uuid', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('is_public', $data ?? [], null);
        $this->setIfExists('public_port', $data ?? [], null);
        $this->setIfExists('limits_memory', $data ?? [], null);
        $this->setIfExists('limits_memory_swap', $data ?? [], null);
        $this->setIfExists('limits_memory_swappiness', $data ?? [], null);
        $this->setIfExists('limits_memory_reservation', $data ?? [], null);
        $this->setIfExists('limits_cpus', $data ?? [], null);
        $this->setIfExists('limits_cpuset', $data ?? [], null);
        $this->setIfExists('limits_cpu_shares', $data ?? [], null);
        $this->setIfExists('instant_deploy', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['server_uuid'] === null) {
            $invalidProperties[] = "'server_uuid' can't be null";
        }
        if ($this->container['project_uuid'] === null) {
            $invalidProperties[] = "'project_uuid' can't be null";
        }
        if ($this->container['environment_name'] === null) {
            $invalidProperties[] = "'environment_name' can't be null";
        }
        if ($this->container['environment_uuid'] === null) {
            $invalidProperties[] = "'environment_uuid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets server_uuid
     *
     * @return string
     */
    public function getServerUuid()
    {
        return $this->container['server_uuid'];
    }

    /**
     * Sets server_uuid
     *
     * @param string $server_uuid UUID of the server
     *
     * @return self
     */
    public function setServerUuid($server_uuid)
    {
        if (is_null($server_uuid)) {
            throw new \InvalidArgumentException('non-nullable server_uuid cannot be null');
        }
        $this->container['server_uuid'] = $server_uuid;

        return $this;
    }

    /**
     * Gets project_uuid
     *
     * @return string
     */
    public function getProjectUuid()
    {
        return $this->container['project_uuid'];
    }

    /**
     * Sets project_uuid
     *
     * @param string $project_uuid UUID of the project
     *
     * @return self
     */
    public function setProjectUuid($project_uuid)
    {
        if (is_null($project_uuid)) {
            throw new \InvalidArgumentException('non-nullable project_uuid cannot be null');
        }
        $this->container['project_uuid'] = $project_uuid;

        return $this;
    }

    /**
     * Gets environment_name
     *
     * @return string
     */
    public function getEnvironmentName()
    {
        return $this->container['environment_name'];
    }

    /**
     * Sets environment_name
     *
     * @param string $environment_name Name of the environment. You need to provide at least one of environment_name or environment_uuid.
     *
     * @return self
     */
    public function setEnvironmentName($environment_name)
    {
        if (is_null($environment_name)) {
            throw new \InvalidArgumentException('non-nullable environment_name cannot be null');
        }
        $this->container['environment_name'] = $environment_name;

        return $this;
    }

    /**
     * Gets environment_uuid
     *
     * @return string
     */
    public function getEnvironmentUuid()
    {
        return $this->container['environment_uuid'];
    }

    /**
     * Sets environment_uuid
     *
     * @param string $environment_uuid UUID of the environment. You need to provide at least one of environment_name or environment_uuid.
     *
     * @return self
     */
    public function setEnvironmentUuid($environment_uuid)
    {
        if (is_null($environment_uuid)) {
            throw new \InvalidArgumentException('non-nullable environment_uuid cannot be null');
        }
        $this->container['environment_uuid'] = $environment_uuid;

        return $this;
    }

    /**
     * Gets postgres_user
     *
     * @return string|null
     */
    public function getPostgresUser()
    {
        return $this->container['postgres_user'];
    }

    /**
     * Sets postgres_user
     *
     * @param string|null $postgres_user PostgreSQL user
     *
     * @return self
     */
    public function setPostgresUser($postgres_user)
    {
        if (is_null($postgres_user)) {
            throw new \InvalidArgumentException('non-nullable postgres_user cannot be null');
        }
        $this->container['postgres_user'] = $postgres_user;

        return $this;
    }

    /**
     * Gets postgres_password
     *
     * @return string|null
     */
    public function getPostgresPassword()
    {
        return $this->container['postgres_password'];
    }

    /**
     * Sets postgres_password
     *
     * @param string|null $postgres_password PostgreSQL password
     *
     * @return self
     */
    public function setPostgresPassword($postgres_password)
    {
        if (is_null($postgres_password)) {
            throw new \InvalidArgumentException('non-nullable postgres_password cannot be null');
        }
        $this->container['postgres_password'] = $postgres_password;

        return $this;
    }

    /**
     * Gets postgres_db
     *
     * @return string|null
     */
    public function getPostgresDb()
    {
        return $this->container['postgres_db'];
    }

    /**
     * Sets postgres_db
     *
     * @param string|null $postgres_db PostgreSQL database
     *
     * @return self
     */
    public function setPostgresDb($postgres_db)
    {
        if (is_null($postgres_db)) {
            throw new \InvalidArgumentException('non-nullable postgres_db cannot be null');
        }
        $this->container['postgres_db'] = $postgres_db;

        return $this;
    }

    /**
     * Gets postgres_initdb_args
     *
     * @return string|null
     */
    public function getPostgresInitdbArgs()
    {
        return $this->container['postgres_initdb_args'];
    }

    /**
     * Sets postgres_initdb_args
     *
     * @param string|null $postgres_initdb_args PostgreSQL initdb args
     *
     * @return self
     */
    public function setPostgresInitdbArgs($postgres_initdb_args)
    {
        if (is_null($postgres_initdb_args)) {
            throw new \InvalidArgumentException('non-nullable postgres_initdb_args cannot be null');
        }
        $this->container['postgres_initdb_args'] = $postgres_initdb_args;

        return $this;
    }

    /**
     * Gets postgres_host_auth_method
     *
     * @return string|null
     */
    public function getPostgresHostAuthMethod()
    {
        return $this->container['postgres_host_auth_method'];
    }

    /**
     * Sets postgres_host_auth_method
     *
     * @param string|null $postgres_host_auth_method PostgreSQL host auth method
     *
     * @return self
     */
    public function setPostgresHostAuthMethod($postgres_host_auth_method)
    {
        if (is_null($postgres_host_auth_method)) {
            throw new \InvalidArgumentException('non-nullable postgres_host_auth_method cannot be null');
        }
        $this->container['postgres_host_auth_method'] = $postgres_host_auth_method;

        return $this;
    }

    /**
     * Gets postgres_conf
     *
     * @return string|null
     */
    public function getPostgresConf()
    {
        return $this->container['postgres_conf'];
    }

    /**
     * Sets postgres_conf
     *
     * @param string|null $postgres_conf PostgreSQL conf
     *
     * @return self
     */
    public function setPostgresConf($postgres_conf)
    {
        if (is_null($postgres_conf)) {
            throw new \InvalidArgumentException('non-nullable postgres_conf cannot be null');
        }
        $this->container['postgres_conf'] = $postgres_conf;

        return $this;
    }

    /**
     * Gets destination_uuid
     *
     * @return string|null
     */
    public function getDestinationUuid()
    {
        return $this->container['destination_uuid'];
    }

    /**
     * Sets destination_uuid
     *
     * @param string|null $destination_uuid UUID of the destination if the server has multiple destinations
     *
     * @return self
     */
    public function setDestinationUuid($destination_uuid)
    {
        if (is_null($destination_uuid)) {
            throw new \InvalidArgumentException('non-nullable destination_uuid cannot be null');
        }
        $this->container['destination_uuid'] = $destination_uuid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the database
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the database
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image Docker Image of the database
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool|null $is_public Is the database public?
     *
     * @return self
     */
    public function setIsPublic($is_public)
    {
        if (is_null($is_public)) {
            throw new \InvalidArgumentException('non-nullable is_public cannot be null');
        }
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets public_port
     *
     * @return int|null
     */
    public function getPublicPort()
    {
        return $this->container['public_port'];
    }

    /**
     * Sets public_port
     *
     * @param int|null $public_port Public port of the database
     *
     * @return self
     */
    public function setPublicPort($public_port)
    {
        if (is_null($public_port)) {
            throw new \InvalidArgumentException('non-nullable public_port cannot be null');
        }
        $this->container['public_port'] = $public_port;

        return $this;
    }

    /**
     * Gets limits_memory
     *
     * @return string|null
     */
    public function getLimitsMemory()
    {
        return $this->container['limits_memory'];
    }

    /**
     * Sets limits_memory
     *
     * @param string|null $limits_memory Memory limit of the database
     *
     * @return self
     */
    public function setLimitsMemory($limits_memory)
    {
        if (is_null($limits_memory)) {
            throw new \InvalidArgumentException('non-nullable limits_memory cannot be null');
        }
        $this->container['limits_memory'] = $limits_memory;

        return $this;
    }

    /**
     * Gets limits_memory_swap
     *
     * @return string|null
     */
    public function getLimitsMemorySwap()
    {
        return $this->container['limits_memory_swap'];
    }

    /**
     * Sets limits_memory_swap
     *
     * @param string|null $limits_memory_swap Memory swap limit of the database
     *
     * @return self
     */
    public function setLimitsMemorySwap($limits_memory_swap)
    {
        if (is_null($limits_memory_swap)) {
            throw new \InvalidArgumentException('non-nullable limits_memory_swap cannot be null');
        }
        $this->container['limits_memory_swap'] = $limits_memory_swap;

        return $this;
    }

    /**
     * Gets limits_memory_swappiness
     *
     * @return int|null
     */
    public function getLimitsMemorySwappiness()
    {
        return $this->container['limits_memory_swappiness'];
    }

    /**
     * Sets limits_memory_swappiness
     *
     * @param int|null $limits_memory_swappiness Memory swappiness of the database
     *
     * @return self
     */
    public function setLimitsMemorySwappiness($limits_memory_swappiness)
    {
        if (is_null($limits_memory_swappiness)) {
            throw new \InvalidArgumentException('non-nullable limits_memory_swappiness cannot be null');
        }
        $this->container['limits_memory_swappiness'] = $limits_memory_swappiness;

        return $this;
    }

    /**
     * Gets limits_memory_reservation
     *
     * @return string|null
     */
    public function getLimitsMemoryReservation()
    {
        return $this->container['limits_memory_reservation'];
    }

    /**
     * Sets limits_memory_reservation
     *
     * @param string|null $limits_memory_reservation Memory reservation of the database
     *
     * @return self
     */
    public function setLimitsMemoryReservation($limits_memory_reservation)
    {
        if (is_null($limits_memory_reservation)) {
            throw new \InvalidArgumentException('non-nullable limits_memory_reservation cannot be null');
        }
        $this->container['limits_memory_reservation'] = $limits_memory_reservation;

        return $this;
    }

    /**
     * Gets limits_cpus
     *
     * @return string|null
     */
    public function getLimitsCpus()
    {
        return $this->container['limits_cpus'];
    }

    /**
     * Sets limits_cpus
     *
     * @param string|null $limits_cpus CPU limit of the database
     *
     * @return self
     */
    public function setLimitsCpus($limits_cpus)
    {
        if (is_null($limits_cpus)) {
            throw new \InvalidArgumentException('non-nullable limits_cpus cannot be null');
        }
        $this->container['limits_cpus'] = $limits_cpus;

        return $this;
    }

    /**
     * Gets limits_cpuset
     *
     * @return string|null
     */
    public function getLimitsCpuset()
    {
        return $this->container['limits_cpuset'];
    }

    /**
     * Sets limits_cpuset
     *
     * @param string|null $limits_cpuset CPU set of the database
     *
     * @return self
     */
    public function setLimitsCpuset($limits_cpuset)
    {
        if (is_null($limits_cpuset)) {
            throw new \InvalidArgumentException('non-nullable limits_cpuset cannot be null');
        }
        $this->container['limits_cpuset'] = $limits_cpuset;

        return $this;
    }

    /**
     * Gets limits_cpu_shares
     *
     * @return int|null
     */
    public function getLimitsCpuShares()
    {
        return $this->container['limits_cpu_shares'];
    }

    /**
     * Sets limits_cpu_shares
     *
     * @param int|null $limits_cpu_shares CPU shares of the database
     *
     * @return self
     */
    public function setLimitsCpuShares($limits_cpu_shares)
    {
        if (is_null($limits_cpu_shares)) {
            throw new \InvalidArgumentException('non-nullable limits_cpu_shares cannot be null');
        }
        $this->container['limits_cpu_shares'] = $limits_cpu_shares;

        return $this;
    }

    /**
     * Gets instant_deploy
     *
     * @return bool|null
     */
    public function getInstantDeploy()
    {
        return $this->container['instant_deploy'];
    }

    /**
     * Sets instant_deploy
     *
     * @param bool|null $instant_deploy Instant deploy the database
     *
     * @return self
     */
    public function setInstantDeploy($instant_deploy)
    {
        if (is_null($instant_deploy)) {
            throw new \InvalidArgumentException('non-nullable instant_deploy cannot be null');
        }
        $this->container['instant_deploy'] = $instant_deploy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


