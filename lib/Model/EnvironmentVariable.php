<?php
/**
 * EnvironmentVariable
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Coolify
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EnvironmentVariable Class Doc Comment
 *
 * @category Class
 * @description Environment Variable model
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EnvironmentVariable implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EnvironmentVariable';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'uuid' => 'string',
        'resourceable_type' => 'string',
        'resourceable_id' => 'int',
        'is_build_time' => 'bool',
        'is_literal' => 'bool',
        'is_multiline' => 'bool',
        'is_preview' => 'bool',
        'is_shared' => 'bool',
        'is_shown_once' => 'bool',
        'key' => 'string',
        'value' => 'string',
        'real_value' => 'string',
        'version' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'uuid' => null,
        'resourceable_type' => null,
        'resourceable_id' => null,
        'is_build_time' => null,
        'is_literal' => null,
        'is_multiline' => null,
        'is_preview' => null,
        'is_shared' => null,
        'is_shown_once' => null,
        'key' => null,
        'value' => null,
        'real_value' => null,
        'version' => null,
        'created_at' => null,
        'updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'uuid' => false,
        'resourceable_type' => false,
        'resourceable_id' => false,
        'is_build_time' => false,
        'is_literal' => false,
        'is_multiline' => false,
        'is_preview' => false,
        'is_shared' => false,
        'is_shown_once' => false,
        'key' => false,
        'value' => false,
        'real_value' => false,
        'version' => false,
        'created_at' => false,
        'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'uuid' => 'uuid',
        'resourceable_type' => 'resourceable_type',
        'resourceable_id' => 'resourceable_id',
        'is_build_time' => 'is_build_time',
        'is_literal' => 'is_literal',
        'is_multiline' => 'is_multiline',
        'is_preview' => 'is_preview',
        'is_shared' => 'is_shared',
        'is_shown_once' => 'is_shown_once',
        'key' => 'key',
        'value' => 'value',
        'real_value' => 'real_value',
        'version' => 'version',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'uuid' => 'setUuid',
        'resourceable_type' => 'setResourceableType',
        'resourceable_id' => 'setResourceableId',
        'is_build_time' => 'setIsBuildTime',
        'is_literal' => 'setIsLiteral',
        'is_multiline' => 'setIsMultiline',
        'is_preview' => 'setIsPreview',
        'is_shared' => 'setIsShared',
        'is_shown_once' => 'setIsShownOnce',
        'key' => 'setKey',
        'value' => 'setValue',
        'real_value' => 'setRealValue',
        'version' => 'setVersion',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'uuid' => 'getUuid',
        'resourceable_type' => 'getResourceableType',
        'resourceable_id' => 'getResourceableId',
        'is_build_time' => 'getIsBuildTime',
        'is_literal' => 'getIsLiteral',
        'is_multiline' => 'getIsMultiline',
        'is_preview' => 'getIsPreview',
        'is_shared' => 'getIsShared',
        'is_shown_once' => 'getIsShownOnce',
        'key' => 'getKey',
        'value' => 'getValue',
        'real_value' => 'getRealValue',
        'version' => 'getVersion',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('resourceable_type', $data ?? [], null);
        $this->setIfExists('resourceable_id', $data ?? [], null);
        $this->setIfExists('is_build_time', $data ?? [], null);
        $this->setIfExists('is_literal', $data ?? [], null);
        $this->setIfExists('is_multiline', $data ?? [], null);
        $this->setIfExists('is_preview', $data ?? [], null);
        $this->setIfExists('is_shared', $data ?? [], null);
        $this->setIfExists('is_shown_once', $data ?? [], null);
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('real_value', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets resourceable_type
     *
     * @return string|null
     */
    public function getResourceableType()
    {
        return $this->container['resourceable_type'];
    }

    /**
     * Sets resourceable_type
     *
     * @param string|null $resourceable_type resourceable_type
     *
     * @return self
     */
    public function setResourceableType($resourceable_type)
    {
        if (is_null($resourceable_type)) {
            throw new \InvalidArgumentException('non-nullable resourceable_type cannot be null');
        }
        $this->container['resourceable_type'] = $resourceable_type;

        return $this;
    }

    /**
     * Gets resourceable_id
     *
     * @return int|null
     */
    public function getResourceableId()
    {
        return $this->container['resourceable_id'];
    }

    /**
     * Sets resourceable_id
     *
     * @param int|null $resourceable_id resourceable_id
     *
     * @return self
     */
    public function setResourceableId($resourceable_id)
    {
        if (is_null($resourceable_id)) {
            throw new \InvalidArgumentException('non-nullable resourceable_id cannot be null');
        }
        $this->container['resourceable_id'] = $resourceable_id;

        return $this;
    }

    /**
     * Gets is_build_time
     *
     * @return bool|null
     */
    public function getIsBuildTime()
    {
        return $this->container['is_build_time'];
    }

    /**
     * Sets is_build_time
     *
     * @param bool|null $is_build_time is_build_time
     *
     * @return self
     */
    public function setIsBuildTime($is_build_time)
    {
        if (is_null($is_build_time)) {
            throw new \InvalidArgumentException('non-nullable is_build_time cannot be null');
        }
        $this->container['is_build_time'] = $is_build_time;

        return $this;
    }

    /**
     * Gets is_literal
     *
     * @return bool|null
     */
    public function getIsLiteral()
    {
        return $this->container['is_literal'];
    }

    /**
     * Sets is_literal
     *
     * @param bool|null $is_literal is_literal
     *
     * @return self
     */
    public function setIsLiteral($is_literal)
    {
        if (is_null($is_literal)) {
            throw new \InvalidArgumentException('non-nullable is_literal cannot be null');
        }
        $this->container['is_literal'] = $is_literal;

        return $this;
    }

    /**
     * Gets is_multiline
     *
     * @return bool|null
     */
    public function getIsMultiline()
    {
        return $this->container['is_multiline'];
    }

    /**
     * Sets is_multiline
     *
     * @param bool|null $is_multiline is_multiline
     *
     * @return self
     */
    public function setIsMultiline($is_multiline)
    {
        if (is_null($is_multiline)) {
            throw new \InvalidArgumentException('non-nullable is_multiline cannot be null');
        }
        $this->container['is_multiline'] = $is_multiline;

        return $this;
    }

    /**
     * Gets is_preview
     *
     * @return bool|null
     */
    public function getIsPreview()
    {
        return $this->container['is_preview'];
    }

    /**
     * Sets is_preview
     *
     * @param bool|null $is_preview is_preview
     *
     * @return self
     */
    public function setIsPreview($is_preview)
    {
        if (is_null($is_preview)) {
            throw new \InvalidArgumentException('non-nullable is_preview cannot be null');
        }
        $this->container['is_preview'] = $is_preview;

        return $this;
    }

    /**
     * Gets is_shared
     *
     * @return bool|null
     */
    public function getIsShared()
    {
        return $this->container['is_shared'];
    }

    /**
     * Sets is_shared
     *
     * @param bool|null $is_shared is_shared
     *
     * @return self
     */
    public function setIsShared($is_shared)
    {
        if (is_null($is_shared)) {
            throw new \InvalidArgumentException('non-nullable is_shared cannot be null');
        }
        $this->container['is_shared'] = $is_shared;

        return $this;
    }

    /**
     * Gets is_shown_once
     *
     * @return bool|null
     */
    public function getIsShownOnce()
    {
        return $this->container['is_shown_once'];
    }

    /**
     * Sets is_shown_once
     *
     * @param bool|null $is_shown_once is_shown_once
     *
     * @return self
     */
    public function setIsShownOnce($is_shown_once)
    {
        if (is_null($is_shown_once)) {
            throw new \InvalidArgumentException('non-nullable is_shown_once cannot be null');
        }
        $this->container['is_shown_once'] = $is_shown_once;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key key
     *
     * @return self
     */
    public function setKey($key)
    {
        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets real_value
     *
     * @return string|null
     */
    public function getRealValue()
    {
        return $this->container['real_value'];
    }

    /**
     * Sets real_value
     *
     * @param string|null $real_value real_value
     *
     * @return self
     */
    public function setRealValue($real_value)
    {
        if (is_null($real_value)) {
            throw new \InvalidArgumentException('non-nullable real_value cannot be null');
        }
        $this->container['real_value'] = $real_value;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


